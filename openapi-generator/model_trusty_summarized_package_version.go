/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TrustySummarizedPackageVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustySummarizedPackageVersion{}

// TrustySummarizedPackageVersion struct for TrustySummarizedPackageVersion
type TrustySummarizedPackageVersion struct {
	Id NullableString `json:"id,omitempty"`
	Version string `json:"version"`
	VersionDate NullableTime `json:"version_date"`
	IsDeprecated *bool `json:"is_deprecated,omitempty"`
	Score NullableFloat32 `json:"score"`
}

type _TrustySummarizedPackageVersion TrustySummarizedPackageVersion

// NewTrustySummarizedPackageVersion instantiates a new TrustySummarizedPackageVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustySummarizedPackageVersion(version string, versionDate NullableTime, score NullableFloat32) *TrustySummarizedPackageVersion {
	this := TrustySummarizedPackageVersion{}
	this.Version = version
	this.VersionDate = versionDate
	var isDeprecated bool = false
	this.IsDeprecated = &isDeprecated
	this.Score = score
	return &this
}

// NewTrustySummarizedPackageVersionWithDefaults instantiates a new TrustySummarizedPackageVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustySummarizedPackageVersionWithDefaults() *TrustySummarizedPackageVersion {
	this := TrustySummarizedPackageVersion{}
	var isDeprecated bool = false
	this.IsDeprecated = &isDeprecated
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustySummarizedPackageVersion) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustySummarizedPackageVersion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TrustySummarizedPackageVersion) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TrustySummarizedPackageVersion) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TrustySummarizedPackageVersion) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TrustySummarizedPackageVersion) UnsetId() {
	o.Id.Unset()
}

// GetVersion returns the Version field value
func (o *TrustySummarizedPackageVersion) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *TrustySummarizedPackageVersion) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *TrustySummarizedPackageVersion) SetVersion(v string) {
	o.Version = v
}

// GetVersionDate returns the VersionDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TrustySummarizedPackageVersion) GetVersionDate() time.Time {
	if o == nil || o.VersionDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.VersionDate.Get()
}

// GetVersionDateOk returns a tuple with the VersionDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustySummarizedPackageVersion) GetVersionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionDate.Get(), o.VersionDate.IsSet()
}

// SetVersionDate sets field value
func (o *TrustySummarizedPackageVersion) SetVersionDate(v time.Time) {
	o.VersionDate.Set(&v)
}

// GetIsDeprecated returns the IsDeprecated field value if set, zero value otherwise.
func (o *TrustySummarizedPackageVersion) GetIsDeprecated() bool {
	if o == nil || IsNil(o.IsDeprecated) {
		var ret bool
		return ret
	}
	return *o.IsDeprecated
}

// GetIsDeprecatedOk returns a tuple with the IsDeprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustySummarizedPackageVersion) GetIsDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeprecated) {
		return nil, false
	}
	return o.IsDeprecated, true
}

// HasIsDeprecated returns a boolean if a field has been set.
func (o *TrustySummarizedPackageVersion) HasIsDeprecated() bool {
	if o != nil && !IsNil(o.IsDeprecated) {
		return true
	}

	return false
}

// SetIsDeprecated gets a reference to the given bool and assigns it to the IsDeprecated field.
func (o *TrustySummarizedPackageVersion) SetIsDeprecated(v bool) {
	o.IsDeprecated = &v
}

// GetScore returns the Score field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *TrustySummarizedPackageVersion) GetScore() float32 {
	if o == nil || o.Score.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustySummarizedPackageVersion) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// SetScore sets field value
func (o *TrustySummarizedPackageVersion) SetScore(v float32) {
	o.Score.Set(&v)
}

func (o TrustySummarizedPackageVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustySummarizedPackageVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["version"] = o.Version
	toSerialize["version_date"] = o.VersionDate.Get()
	if !IsNil(o.IsDeprecated) {
		toSerialize["is_deprecated"] = o.IsDeprecated
	}
	toSerialize["score"] = o.Score.Get()
	return toSerialize, nil
}

func (o *TrustySummarizedPackageVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"version_date",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrustySummarizedPackageVersion := _TrustySummarizedPackageVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrustySummarizedPackageVersion)

	if err != nil {
		return err
	}

	*o = TrustySummarizedPackageVersion(varTrustySummarizedPackageVersion)

	return err
}

type NullableTrustySummarizedPackageVersion struct {
	value *TrustySummarizedPackageVersion
	isSet bool
}

func (v NullableTrustySummarizedPackageVersion) Get() *TrustySummarizedPackageVersion {
	return v.value
}

func (v *NullableTrustySummarizedPackageVersion) Set(val *TrustySummarizedPackageVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustySummarizedPackageVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustySummarizedPackageVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustySummarizedPackageVersion(val *TrustySummarizedPackageVersion) *NullableTrustySummarizedPackageVersion {
	return &NullableTrustySummarizedPackageVersion{value: val, isSet: true}
}

func (v NullableTrustySummarizedPackageVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustySummarizedPackageVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


