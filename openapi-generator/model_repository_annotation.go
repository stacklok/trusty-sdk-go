/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RepositoryAnnotation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryAnnotation{}

// RepositoryAnnotation This represents a package annotation.
type RepositoryAnnotation struct {
	Score NullableFloat32 `json:"score,omitempty"`
	Description interface{} `json:"description,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
}

type _RepositoryAnnotation RepositoryAnnotation

// NewRepositoryAnnotation instantiates a new RepositoryAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryAnnotation(updatedAt time.Time) *RepositoryAnnotation {
	this := RepositoryAnnotation{}
	this.UpdatedAt = updatedAt
	return &this
}

// NewRepositoryAnnotationWithDefaults instantiates a new RepositoryAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryAnnotationWithDefaults() *RepositoryAnnotation {
	this := RepositoryAnnotation{}
	return &this
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryAnnotation) GetScore() float32 {
	if o == nil || IsNil(o.Score.Get()) {
		var ret float32
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryAnnotation) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *RepositoryAnnotation) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableFloat32 and assigns it to the Score field.
func (o *RepositoryAnnotation) SetScore(v float32) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *RepositoryAnnotation) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *RepositoryAnnotation) UnsetScore() {
	o.Score.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryAnnotation) GetDescription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryAnnotation) GetDescriptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return &o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RepositoryAnnotation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given interface{} and assigns it to the Description field.
func (o *RepositoryAnnotation) SetDescription(v interface{}) {
	o.Description = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *RepositoryAnnotation) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *RepositoryAnnotation) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *RepositoryAnnotation) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o RepositoryAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryAnnotation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *RepositoryAnnotation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryAnnotation := _RepositoryAnnotation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRepositoryAnnotation)

	if err != nil {
		return err
	}

	*o = RepositoryAnnotation(varRepositoryAnnotation)

	return err
}

type NullableRepositoryAnnotation struct {
	value *RepositoryAnnotation
	isSet bool
}

func (v NullableRepositoryAnnotation) Get() *RepositoryAnnotation {
	return v.value
}

func (v *NullableRepositoryAnnotation) Set(val *RepositoryAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryAnnotation(val *RepositoryAnnotation) *NullableRepositoryAnnotation {
	return &NullableRepositoryAnnotation{value: val, isSet: true}
}

func (v NullableRepositoryAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


