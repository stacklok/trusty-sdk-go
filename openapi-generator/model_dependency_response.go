/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DependencyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependencyResponse{}

// DependencyResponse struct for DependencyResponse
type DependencyResponse struct {
	Context map[string]string `json:"@context,omitempty"`
	Summary DependenciesSummary `json:"summary"`
	Dependencies []Dependency `json:"dependencies"`
}

type _DependencyResponse DependencyResponse

// NewDependencyResponse instantiates a new DependencyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependencyResponse(summary DependenciesSummary, dependencies []Dependency) *DependencyResponse {
	this := DependencyResponse{}
	this.Summary = summary
	this.Dependencies = dependencies
	return &this
}

// NewDependencyResponseWithDefaults instantiates a new DependencyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependencyResponseWithDefaults() *DependencyResponse {
	this := DependencyResponse{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DependencyResponse) GetContext() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DependencyResponse) GetContextOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Context) {
		return map[string]string{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *DependencyResponse) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]string and assigns it to the Context field.
func (o *DependencyResponse) SetContext(v map[string]string) {
	o.Context = v
}

// GetSummary returns the Summary field value
func (o *DependencyResponse) GetSummary() DependenciesSummary {
	if o == nil {
		var ret DependenciesSummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *DependencyResponse) GetSummaryOk() (*DependenciesSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *DependencyResponse) SetSummary(v DependenciesSummary) {
	o.Summary = v
}

// GetDependencies returns the Dependencies field value
func (o *DependencyResponse) GetDependencies() []Dependency {
	if o == nil {
		var ret []Dependency
		return ret
	}

	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value
// and a boolean to check if the value has been set.
func (o *DependencyResponse) GetDependenciesOk() ([]Dependency, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// SetDependencies sets field value
func (o *DependencyResponse) SetDependencies(v []Dependency) {
	o.Dependencies = v
}

func (o DependencyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependencyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["@context"] = o.Context
	}
	toSerialize["summary"] = o.Summary
	toSerialize["dependencies"] = o.Dependencies
	return toSerialize, nil
}

func (o *DependencyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summary",
		"dependencies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDependencyResponse := _DependencyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDependencyResponse)

	if err != nil {
		return err
	}

	*o = DependencyResponse(varDependencyResponse)

	return err
}

type NullableDependencyResponse struct {
	value *DependencyResponse
	isSet bool
}

func (v NullableDependencyResponse) Get() *DependencyResponse {
	return v.value
}

func (v *NullableDependencyResponse) Set(val *DependencyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDependencyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDependencyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependencyResponse(val *DependencyResponse) *NullableDependencyResponse {
	return &NullableDependencyResponse{value: val, isSet: true}
}

func (v NullableDependencyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependencyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


