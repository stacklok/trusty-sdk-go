/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Dependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dependency{}

// Dependency struct for Dependency
type Dependency struct {
	Name string `json:"name"`
	Type string `json:"type"`
	VersionName string `json:"version_name"`
	PackageId string `json:"package_id"`
	VersionId string `json:"version_id"`
	Parents []string `json:"parents"`
	Depths []int32 `json:"depths"`
	Paths [][]string `json:"paths,omitempty"`
	ActivityScore NullableFloat32 `json:"activity_score,omitempty"`
	DeclaredLicense []string `json:"declared_license,omitempty"`
	VulnSeverity []string `json:"vuln_severity,omitempty"`
	MalOsvId []string `json:"mal_osv_id,omitempty"`
}

type _Dependency Dependency

// NewDependency instantiates a new Dependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependency(name string, type_ string, versionName string, packageId string, versionId string, parents []string, depths []int32) *Dependency {
	this := Dependency{}
	this.Name = name
	this.Type = type_
	this.VersionName = versionName
	this.PackageId = packageId
	this.VersionId = versionId
	this.Parents = parents
	this.Depths = depths
	return &this
}

// NewDependencyWithDefaults instantiates a new Dependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependencyWithDefaults() *Dependency {
	this := Dependency{}
	return &this
}

// GetName returns the Name field value
func (o *Dependency) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Dependency) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Dependency) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Dependency) SetType(v string) {
	o.Type = v
}

// GetVersionName returns the VersionName field value
func (o *Dependency) GetVersionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetVersionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionName, true
}

// SetVersionName sets field value
func (o *Dependency) SetVersionName(v string) {
	o.VersionName = v
}

// GetPackageId returns the PackageId field value
func (o *Dependency) GetPackageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetPackageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageId, true
}

// SetPackageId sets field value
func (o *Dependency) SetPackageId(v string) {
	o.PackageId = v
}

// GetVersionId returns the VersionId field value
func (o *Dependency) GetVersionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *Dependency) SetVersionId(v string) {
	o.VersionId = v
}

// GetParents returns the Parents field value
func (o *Dependency) GetParents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetParentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parents, true
}

// SetParents sets field value
func (o *Dependency) SetParents(v []string) {
	o.Parents = v
}

// GetDepths returns the Depths field value
func (o *Dependency) GetDepths() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Depths
}

// GetDepthsOk returns a tuple with the Depths field value
// and a boolean to check if the value has been set.
func (o *Dependency) GetDepthsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Depths, true
}

// SetDepths sets field value
func (o *Dependency) SetDepths(v []int32) {
	o.Depths = v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *Dependency) GetPaths() [][]string {
	if o == nil || IsNil(o.Paths) {
		var ret [][]string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependency) GetPathsOk() ([][]string, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *Dependency) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given [][]string and assigns it to the Paths field.
func (o *Dependency) SetPaths(v [][]string) {
	o.Paths = v
}

// GetActivityScore returns the ActivityScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dependency) GetActivityScore() float32 {
	if o == nil || IsNil(o.ActivityScore.Get()) {
		var ret float32
		return ret
	}
	return *o.ActivityScore.Get()
}

// GetActivityScoreOk returns a tuple with the ActivityScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dependency) GetActivityScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivityScore.Get(), o.ActivityScore.IsSet()
}

// HasActivityScore returns a boolean if a field has been set.
func (o *Dependency) HasActivityScore() bool {
	if o != nil && o.ActivityScore.IsSet() {
		return true
	}

	return false
}

// SetActivityScore gets a reference to the given NullableFloat32 and assigns it to the ActivityScore field.
func (o *Dependency) SetActivityScore(v float32) {
	o.ActivityScore.Set(&v)
}
// SetActivityScoreNil sets the value for ActivityScore to be an explicit nil
func (o *Dependency) SetActivityScoreNil() {
	o.ActivityScore.Set(nil)
}

// UnsetActivityScore ensures that no value is present for ActivityScore, not even an explicit nil
func (o *Dependency) UnsetActivityScore() {
	o.ActivityScore.Unset()
}

// GetDeclaredLicense returns the DeclaredLicense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dependency) GetDeclaredLicense() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DeclaredLicense
}

// GetDeclaredLicenseOk returns a tuple with the DeclaredLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dependency) GetDeclaredLicenseOk() ([]string, bool) {
	if o == nil || IsNil(o.DeclaredLicense) {
		return nil, false
	}
	return o.DeclaredLicense, true
}

// HasDeclaredLicense returns a boolean if a field has been set.
func (o *Dependency) HasDeclaredLicense() bool {
	if o != nil && !IsNil(o.DeclaredLicense) {
		return true
	}

	return false
}

// SetDeclaredLicense gets a reference to the given []string and assigns it to the DeclaredLicense field.
func (o *Dependency) SetDeclaredLicense(v []string) {
	o.DeclaredLicense = v
}

// GetVulnSeverity returns the VulnSeverity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dependency) GetVulnSeverity() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VulnSeverity
}

// GetVulnSeverityOk returns a tuple with the VulnSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dependency) GetVulnSeverityOk() ([]string, bool) {
	if o == nil || IsNil(o.VulnSeverity) {
		return nil, false
	}
	return o.VulnSeverity, true
}

// HasVulnSeverity returns a boolean if a field has been set.
func (o *Dependency) HasVulnSeverity() bool {
	if o != nil && !IsNil(o.VulnSeverity) {
		return true
	}

	return false
}

// SetVulnSeverity gets a reference to the given []string and assigns it to the VulnSeverity field.
func (o *Dependency) SetVulnSeverity(v []string) {
	o.VulnSeverity = v
}

// GetMalOsvId returns the MalOsvId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dependency) GetMalOsvId() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MalOsvId
}

// GetMalOsvIdOk returns a tuple with the MalOsvId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dependency) GetMalOsvIdOk() ([]string, bool) {
	if o == nil || IsNil(o.MalOsvId) {
		return nil, false
	}
	return o.MalOsvId, true
}

// HasMalOsvId returns a boolean if a field has been set.
func (o *Dependency) HasMalOsvId() bool {
	if o != nil && !IsNil(o.MalOsvId) {
		return true
	}

	return false
}

// SetMalOsvId gets a reference to the given []string and assigns it to the MalOsvId field.
func (o *Dependency) SetMalOsvId(v []string) {
	o.MalOsvId = v
}

func (o Dependency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["version_name"] = o.VersionName
	toSerialize["package_id"] = o.PackageId
	toSerialize["version_id"] = o.VersionId
	toSerialize["parents"] = o.Parents
	toSerialize["depths"] = o.Depths
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	if o.ActivityScore.IsSet() {
		toSerialize["activity_score"] = o.ActivityScore.Get()
	}
	if o.DeclaredLicense != nil {
		toSerialize["declared_license"] = o.DeclaredLicense
	}
	if o.VulnSeverity != nil {
		toSerialize["vuln_severity"] = o.VulnSeverity
	}
	if o.MalOsvId != nil {
		toSerialize["mal_osv_id"] = o.MalOsvId
	}
	return toSerialize, nil
}

func (o *Dependency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"version_name",
		"package_id",
		"version_id",
		"parents",
		"depths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDependency := _Dependency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDependency)

	if err != nil {
		return err
	}

	*o = Dependency(varDependency)

	return err
}

type NullableDependency struct {
	value *Dependency
	isSet bool
}

func (v NullableDependency) Get() *Dependency {
	return v.value
}

func (v *NullableDependency) Set(val *Dependency) {
	v.value = val
	v.isSet = true
}

func (v NullableDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependency(val *Dependency) *NullableDependency {
	return &NullableDependency{value: val, isSet: true}
}

func (v NullableDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


