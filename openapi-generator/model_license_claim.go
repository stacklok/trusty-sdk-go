/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LicenseClaim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseClaim{}

// LicenseClaim A claim about a license.
type LicenseClaim struct {
	Id *string `json:"id,omitempty"`
	OwnerId *string `json:"owner_id,omitempty"`
	Licenses []string `json:"licenses,omitempty"`
	Claim NullableString `json:"claim,omitempty"`
	Content NullableString `json:"content,omitempty"`
	Url NullableString `json:"url,omitempty"`
	Source NullableString `json:"source,omitempty"`
	Description NullableString `json:"description,omitempty"`
}

// NewLicenseClaim instantiates a new LicenseClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseClaim() *LicenseClaim {
	this := LicenseClaim{}
	return &this
}

// NewLicenseClaimWithDefaults instantiates a new LicenseClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseClaimWithDefaults() *LicenseClaim {
	this := LicenseClaim{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LicenseClaim) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseClaim) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LicenseClaim) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LicenseClaim) SetId(v string) {
	o.Id = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *LicenseClaim) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseClaim) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *LicenseClaim) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *LicenseClaim) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *LicenseClaim) GetLicenses() []string {
	if o == nil || IsNil(o.Licenses) {
		var ret []string
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseClaim) GetLicensesOk() ([]string, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *LicenseClaim) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []string and assigns it to the Licenses field.
func (o *LicenseClaim) SetLicenses(v []string) {
	o.Licenses = v
}

// GetClaim returns the Claim field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseClaim) GetClaim() string {
	if o == nil || IsNil(o.Claim.Get()) {
		var ret string
		return ret
	}
	return *o.Claim.Get()
}

// GetClaimOk returns a tuple with the Claim field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseClaim) GetClaimOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Claim.Get(), o.Claim.IsSet()
}

// HasClaim returns a boolean if a field has been set.
func (o *LicenseClaim) HasClaim() bool {
	if o != nil && o.Claim.IsSet() {
		return true
	}

	return false
}

// SetClaim gets a reference to the given NullableString and assigns it to the Claim field.
func (o *LicenseClaim) SetClaim(v string) {
	o.Claim.Set(&v)
}
// SetClaimNil sets the value for Claim to be an explicit nil
func (o *LicenseClaim) SetClaimNil() {
	o.Claim.Set(nil)
}

// UnsetClaim ensures that no value is present for Claim, not even an explicit nil
func (o *LicenseClaim) UnsetClaim() {
	o.Claim.Unset()
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseClaim) GetContent() string {
	if o == nil || IsNil(o.Content.Get()) {
		var ret string
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseClaim) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *LicenseClaim) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableString and assigns it to the Content field.
func (o *LicenseClaim) SetContent(v string) {
	o.Content.Set(&v)
}
// SetContentNil sets the value for Content to be an explicit nil
func (o *LicenseClaim) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *LicenseClaim) UnsetContent() {
	o.Content.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseClaim) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseClaim) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *LicenseClaim) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *LicenseClaim) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *LicenseClaim) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *LicenseClaim) UnsetUrl() {
	o.Url.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseClaim) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseClaim) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *LicenseClaim) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *LicenseClaim) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *LicenseClaim) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *LicenseClaim) UnsetSource() {
	o.Source.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseClaim) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseClaim) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *LicenseClaim) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *LicenseClaim) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *LicenseClaim) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *LicenseClaim) UnsetDescription() {
	o.Description.Unset()
}

func (o LicenseClaim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseClaim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.Licenses) {
		toSerialize["licenses"] = o.Licenses
	}
	if o.Claim.IsSet() {
		toSerialize["claim"] = o.Claim.Get()
	}
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

type NullableLicenseClaim struct {
	value *LicenseClaim
	isSet bool
}

func (v NullableLicenseClaim) Get() *LicenseClaim {
	return v.value
}

func (v *NullableLicenseClaim) Set(val *LicenseClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseClaim(val *LicenseClaim) *NullableLicenseClaim {
	return &NullableLicenseClaim{value: val, isSet: true}
}

func (v NullableLicenseClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


