/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PackageStatus the model 'PackageStatus'
type PackageStatus string

// List of PackageStatus
const (
	PENDING PackageStatus = "pending"
	INITIAL PackageStatus = "initial"
	NEIGHBOURS PackageStatus = "neighbours"
	COMPLETE PackageStatus = "complete"
	FAILED PackageStatus = "failed"
	SCORING PackageStatus = "scoring"
	PROPAGATE PackageStatus = "propagate"
	DELETED PackageStatus = "deleted"
)

// All allowed values of PackageStatus enum
var AllowedPackageStatusEnumValues = []PackageStatus{
	"pending",
	"initial",
	"neighbours",
	"complete",
	"failed",
	"scoring",
	"propagate",
	"deleted",
}

func (v *PackageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PackageStatus(value)
	for _, existing := range AllowedPackageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PackageStatus", value)
}

// NewPackageStatusFromValue returns a pointer to a valid PackageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPackageStatusFromValue(v string) (*PackageStatus, error) {
	ev := PackageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PackageStatus: valid values are %v", v, AllowedPackageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PackageStatus) IsValid() bool {
	for _, existing := range AllowedPackageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackageStatus value
func (v PackageStatus) Ptr() *PackageStatus {
	return &v
}

type NullablePackageStatus struct {
	value *PackageStatus
	isSet bool
}

func (v NullablePackageStatus) Get() *PackageStatus {
	return v.value
}

func (v *NullablePackageStatus) Set(val *PackageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageStatus(val *PackageStatus) *NullablePackageStatus {
	return &NullablePackageStatus{value: val, isSet: true}
}

func (v NullablePackageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

