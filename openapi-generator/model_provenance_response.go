/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProvenanceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvenanceResponse{}

// ProvenanceResponse struct for ProvenanceResponse
type ProvenanceResponse struct {
	Status *string `json:"status,omitempty"`
	Hp *HistoricalProvenance `json:"hp,omitempty"`
	Sigstore *Sigstore `json:"sigstore,omitempty"`
	Score *float32 `json:"score,omitempty"`
}

// NewProvenanceResponse instantiates a new ProvenanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceResponse() *ProvenanceResponse {
	this := ProvenanceResponse{}
	var status string = "missing"
	this.Status = &status
	var sigstore Sigstore = {}
	this.Sigstore = &sigstore
	var score float32 = 0
	this.Score = &score
	return &this
}

// NewProvenanceResponseWithDefaults instantiates a new ProvenanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceResponseWithDefaults() *ProvenanceResponse {
	this := ProvenanceResponse{}
	var status string = "missing"
	this.Status = &status
	var sigstore Sigstore = {}
	this.Sigstore = &sigstore
	var score float32 = 0
	this.Score = &score
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProvenanceResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProvenanceResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProvenanceResponse) SetStatus(v string) {
	o.Status = &v
}

// GetHp returns the Hp field value if set, zero value otherwise.
func (o *ProvenanceResponse) GetHp() HistoricalProvenance {
	if o == nil || IsNil(o.Hp) {
		var ret HistoricalProvenance
		return ret
	}
	return *o.Hp
}

// GetHpOk returns a tuple with the Hp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceResponse) GetHpOk() (*HistoricalProvenance, bool) {
	if o == nil || IsNil(o.Hp) {
		return nil, false
	}
	return o.Hp, true
}

// HasHp returns a boolean if a field has been set.
func (o *ProvenanceResponse) HasHp() bool {
	if o != nil && !IsNil(o.Hp) {
		return true
	}

	return false
}

// SetHp gets a reference to the given HistoricalProvenance and assigns it to the Hp field.
func (o *ProvenanceResponse) SetHp(v HistoricalProvenance) {
	o.Hp = &v
}

// GetSigstore returns the Sigstore field value if set, zero value otherwise.
func (o *ProvenanceResponse) GetSigstore() Sigstore {
	if o == nil || IsNil(o.Sigstore) {
		var ret Sigstore
		return ret
	}
	return *o.Sigstore
}

// GetSigstoreOk returns a tuple with the Sigstore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceResponse) GetSigstoreOk() (*Sigstore, bool) {
	if o == nil || IsNil(o.Sigstore) {
		return nil, false
	}
	return o.Sigstore, true
}

// HasSigstore returns a boolean if a field has been set.
func (o *ProvenanceResponse) HasSigstore() bool {
	if o != nil && !IsNil(o.Sigstore) {
		return true
	}

	return false
}

// SetSigstore gets a reference to the given Sigstore and assigns it to the Sigstore field.
func (o *ProvenanceResponse) SetSigstore(v Sigstore) {
	o.Sigstore = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *ProvenanceResponse) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceResponse) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *ProvenanceResponse) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *ProvenanceResponse) SetScore(v float32) {
	o.Score = &v
}

func (o ProvenanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvenanceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Hp) {
		toSerialize["hp"] = o.Hp
	}
	if !IsNil(o.Sigstore) {
		toSerialize["sigstore"] = o.Sigstore
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	return toSerialize, nil
}

type NullableProvenanceResponse struct {
	value *ProvenanceResponse
	isSet bool
}

func (v NullableProvenanceResponse) Get() *ProvenanceResponse {
	return v.value
}

func (v *NullableProvenanceResponse) Set(val *ProvenanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceResponse(val *ProvenanceResponse) *NullableProvenanceResponse {
	return &NullableProvenanceResponse{value: val, isSet: true}
}

func (v NullableProvenanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


