/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


// VersionsAPIService VersionsAPI service
type VersionsAPIService service

type ApiGetVersionsV2VersionsGetRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	packageName *string
	packageType *PackageType
	versionPrefix *string
	versionFragment *string
	token *time.Time
}

func (r ApiGetVersionsV2VersionsGetRequest) PackageName(packageName string) ApiGetVersionsV2VersionsGetRequest {
	r.packageName = &packageName
	return r
}

func (r ApiGetVersionsV2VersionsGetRequest) PackageType(packageType PackageType) ApiGetVersionsV2VersionsGetRequest {
	r.packageType = &packageType
	return r
}

func (r ApiGetVersionsV2VersionsGetRequest) VersionPrefix(versionPrefix string) ApiGetVersionsV2VersionsGetRequest {
	r.versionPrefix = &versionPrefix
	return r
}

func (r ApiGetVersionsV2VersionsGetRequest) VersionFragment(versionFragment string) ApiGetVersionsV2VersionsGetRequest {
	r.versionFragment = &versionFragment
	return r
}

func (r ApiGetVersionsV2VersionsGetRequest) Token(token time.Time) ApiGetVersionsV2VersionsGetRequest {
	r.token = &token
	return r
}

func (r ApiGetVersionsV2VersionsGetRequest) Execute() (*TrustySummarizedPackageVersionResults, *http.Response, error) {
	return r.ApiService.GetVersionsV2VersionsGetExecute(r)
}

/*
GetVersionsV2VersionsGet Get Versions

Fetch a list of versions for a package.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetVersionsV2VersionsGetRequest
*/
func (a *VersionsAPIService) GetVersionsV2VersionsGet(ctx context.Context) ApiGetVersionsV2VersionsGetRequest {
	return ApiGetVersionsV2VersionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TrustySummarizedPackageVersionResults
func (a *VersionsAPIService) GetVersionsV2VersionsGetExecute(r ApiGetVersionsV2VersionsGetRequest) (*TrustySummarizedPackageVersionResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrustySummarizedPackageVersionResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.GetVersionsV2VersionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.packageName == nil {
		return localVarReturnValue, nil, reportError("packageName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "package_name", r.packageName, "form", "")
	if r.packageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "package_type", r.packageType, "form", "")
	}
	if r.versionPrefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version_prefix", r.versionPrefix, "form", "")
	}
	if r.versionFragment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version_fragment", r.versionFragment, "form", "")
	}
	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
