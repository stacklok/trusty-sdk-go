/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrustyPackageResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustyPackageResult{}

// TrustyPackageResult This result repesents all the intelligence about a package.  It includes component scores, typosquatting, activity, and provenance and also a summary.  See [scoring](https://github.com/stacklok/trusty/blob/main/docs/scoring.md) for more information.
type TrustyPackageResult struct {
	PackageName string `json:"package_name"`
	PackageType PackageType `json:"package_type"`
	PackageVersion NullableString `json:"package_version,omitempty"`
	PackageData TrustyPackageData `json:"package_data"`
	Status *PackageStatus `json:"status,omitempty"`
	Summary *PackageAnnotation `json:"summary,omitempty"`
	Provenance *PackageAnnotation `json:"provenance,omitempty"`
	Activity *PackageAnnotation `json:"activity,omitempty"`
	Typosquatting *PackageAnnotation `json:"typosquatting,omitempty"`
	Alternatives *PackageAlternatives `json:"alternatives,omitempty"`
	SimilarPackageNames []PackageBasicInfo `json:"similar_package_names,omitempty"`
	SameOriginPackagesCount NullableInt32 `json:"same_origin_packages_count,omitempty"`
	HasTriggeredReingestion NullableBool `json:"has_triggered_reingestion,omitempty"`
}

type _TrustyPackageResult TrustyPackageResult

// NewTrustyPackageResult instantiates a new TrustyPackageResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustyPackageResult(packageName string, packageType PackageType, packageData TrustyPackageData) *TrustyPackageResult {
	this := TrustyPackageResult{}
	this.PackageName = packageName
	this.PackageType = packageType
	this.PackageData = packageData
	return &this
}

// NewTrustyPackageResultWithDefaults instantiates a new TrustyPackageResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustyPackageResultWithDefaults() *TrustyPackageResult {
	this := TrustyPackageResult{}
	return &this
}

// GetPackageName returns the PackageName field value
func (o *TrustyPackageResult) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *TrustyPackageResult) SetPackageName(v string) {
	o.PackageName = v
}

// GetPackageType returns the PackageType field value
func (o *TrustyPackageResult) GetPackageType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *TrustyPackageResult) SetPackageType(v PackageType) {
	o.PackageType = v
}

// GetPackageVersion returns the PackageVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageResult) GetPackageVersion() string {
	if o == nil || IsNil(o.PackageVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PackageVersion.Get()
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageResult) GetPackageVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageVersion.Get(), o.PackageVersion.IsSet()
}

// HasPackageVersion returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasPackageVersion() bool {
	if o != nil && o.PackageVersion.IsSet() {
		return true
	}

	return false
}

// SetPackageVersion gets a reference to the given NullableString and assigns it to the PackageVersion field.
func (o *TrustyPackageResult) SetPackageVersion(v string) {
	o.PackageVersion.Set(&v)
}
// SetPackageVersionNil sets the value for PackageVersion to be an explicit nil
func (o *TrustyPackageResult) SetPackageVersionNil() {
	o.PackageVersion.Set(nil)
}

// UnsetPackageVersion ensures that no value is present for PackageVersion, not even an explicit nil
func (o *TrustyPackageResult) UnsetPackageVersion() {
	o.PackageVersion.Unset()
}

// GetPackageData returns the PackageData field value
func (o *TrustyPackageResult) GetPackageData() TrustyPackageData {
	if o == nil {
		var ret TrustyPackageData
		return ret
	}

	return o.PackageData
}

// GetPackageDataOk returns a tuple with the PackageData field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetPackageDataOk() (*TrustyPackageData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageData, true
}

// SetPackageData sets field value
func (o *TrustyPackageResult) SetPackageData(v TrustyPackageData) {
	o.PackageData = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TrustyPackageResult) GetStatus() PackageStatus {
	if o == nil || IsNil(o.Status) {
		var ret PackageStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetStatusOk() (*PackageStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PackageStatus and assigns it to the Status field.
func (o *TrustyPackageResult) SetStatus(v PackageStatus) {
	o.Status = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *TrustyPackageResult) GetSummary() PackageAnnotation {
	if o == nil || IsNil(o.Summary) {
		var ret PackageAnnotation
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetSummaryOk() (*PackageAnnotation, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given PackageAnnotation and assigns it to the Summary field.
func (o *TrustyPackageResult) SetSummary(v PackageAnnotation) {
	o.Summary = &v
}

// GetProvenance returns the Provenance field value if set, zero value otherwise.
func (o *TrustyPackageResult) GetProvenance() PackageAnnotation {
	if o == nil || IsNil(o.Provenance) {
		var ret PackageAnnotation
		return ret
	}
	return *o.Provenance
}

// GetProvenanceOk returns a tuple with the Provenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetProvenanceOk() (*PackageAnnotation, bool) {
	if o == nil || IsNil(o.Provenance) {
		return nil, false
	}
	return o.Provenance, true
}

// HasProvenance returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasProvenance() bool {
	if o != nil && !IsNil(o.Provenance) {
		return true
	}

	return false
}

// SetProvenance gets a reference to the given PackageAnnotation and assigns it to the Provenance field.
func (o *TrustyPackageResult) SetProvenance(v PackageAnnotation) {
	o.Provenance = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *TrustyPackageResult) GetActivity() PackageAnnotation {
	if o == nil || IsNil(o.Activity) {
		var ret PackageAnnotation
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetActivityOk() (*PackageAnnotation, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given PackageAnnotation and assigns it to the Activity field.
func (o *TrustyPackageResult) SetActivity(v PackageAnnotation) {
	o.Activity = &v
}

// GetTyposquatting returns the Typosquatting field value if set, zero value otherwise.
func (o *TrustyPackageResult) GetTyposquatting() PackageAnnotation {
	if o == nil || IsNil(o.Typosquatting) {
		var ret PackageAnnotation
		return ret
	}
	return *o.Typosquatting
}

// GetTyposquattingOk returns a tuple with the Typosquatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetTyposquattingOk() (*PackageAnnotation, bool) {
	if o == nil || IsNil(o.Typosquatting) {
		return nil, false
	}
	return o.Typosquatting, true
}

// HasTyposquatting returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasTyposquatting() bool {
	if o != nil && !IsNil(o.Typosquatting) {
		return true
	}

	return false
}

// SetTyposquatting gets a reference to the given PackageAnnotation and assigns it to the Typosquatting field.
func (o *TrustyPackageResult) SetTyposquatting(v PackageAnnotation) {
	o.Typosquatting = &v
}

// GetAlternatives returns the Alternatives field value if set, zero value otherwise.
func (o *TrustyPackageResult) GetAlternatives() PackageAlternatives {
	if o == nil || IsNil(o.Alternatives) {
		var ret PackageAlternatives
		return ret
	}
	return *o.Alternatives
}

// GetAlternativesOk returns a tuple with the Alternatives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageResult) GetAlternativesOk() (*PackageAlternatives, bool) {
	if o == nil || IsNil(o.Alternatives) {
		return nil, false
	}
	return o.Alternatives, true
}

// HasAlternatives returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasAlternatives() bool {
	if o != nil && !IsNil(o.Alternatives) {
		return true
	}

	return false
}

// SetAlternatives gets a reference to the given PackageAlternatives and assigns it to the Alternatives field.
func (o *TrustyPackageResult) SetAlternatives(v PackageAlternatives) {
	o.Alternatives = &v
}

// GetSimilarPackageNames returns the SimilarPackageNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageResult) GetSimilarPackageNames() []PackageBasicInfo {
	if o == nil {
		var ret []PackageBasicInfo
		return ret
	}
	return o.SimilarPackageNames
}

// GetSimilarPackageNamesOk returns a tuple with the SimilarPackageNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageResult) GetSimilarPackageNamesOk() ([]PackageBasicInfo, bool) {
	if o == nil || IsNil(o.SimilarPackageNames) {
		return nil, false
	}
	return o.SimilarPackageNames, true
}

// HasSimilarPackageNames returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasSimilarPackageNames() bool {
	if o != nil && !IsNil(o.SimilarPackageNames) {
		return true
	}

	return false
}

// SetSimilarPackageNames gets a reference to the given []PackageBasicInfo and assigns it to the SimilarPackageNames field.
func (o *TrustyPackageResult) SetSimilarPackageNames(v []PackageBasicInfo) {
	o.SimilarPackageNames = v
}

// GetSameOriginPackagesCount returns the SameOriginPackagesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageResult) GetSameOriginPackagesCount() int32 {
	if o == nil || IsNil(o.SameOriginPackagesCount.Get()) {
		var ret int32
		return ret
	}
	return *o.SameOriginPackagesCount.Get()
}

// GetSameOriginPackagesCountOk returns a tuple with the SameOriginPackagesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageResult) GetSameOriginPackagesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SameOriginPackagesCount.Get(), o.SameOriginPackagesCount.IsSet()
}

// HasSameOriginPackagesCount returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasSameOriginPackagesCount() bool {
	if o != nil && o.SameOriginPackagesCount.IsSet() {
		return true
	}

	return false
}

// SetSameOriginPackagesCount gets a reference to the given NullableInt32 and assigns it to the SameOriginPackagesCount field.
func (o *TrustyPackageResult) SetSameOriginPackagesCount(v int32) {
	o.SameOriginPackagesCount.Set(&v)
}
// SetSameOriginPackagesCountNil sets the value for SameOriginPackagesCount to be an explicit nil
func (o *TrustyPackageResult) SetSameOriginPackagesCountNil() {
	o.SameOriginPackagesCount.Set(nil)
}

// UnsetSameOriginPackagesCount ensures that no value is present for SameOriginPackagesCount, not even an explicit nil
func (o *TrustyPackageResult) UnsetSameOriginPackagesCount() {
	o.SameOriginPackagesCount.Unset()
}

// GetHasTriggeredReingestion returns the HasTriggeredReingestion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageResult) GetHasTriggeredReingestion() bool {
	if o == nil || IsNil(o.HasTriggeredReingestion.Get()) {
		var ret bool
		return ret
	}
	return *o.HasTriggeredReingestion.Get()
}

// GetHasTriggeredReingestionOk returns a tuple with the HasTriggeredReingestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageResult) GetHasTriggeredReingestionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasTriggeredReingestion.Get(), o.HasTriggeredReingestion.IsSet()
}

// HasHasTriggeredReingestion returns a boolean if a field has been set.
func (o *TrustyPackageResult) HasHasTriggeredReingestion() bool {
	if o != nil && o.HasTriggeredReingestion.IsSet() {
		return true
	}

	return false
}

// SetHasTriggeredReingestion gets a reference to the given NullableBool and assigns it to the HasTriggeredReingestion field.
func (o *TrustyPackageResult) SetHasTriggeredReingestion(v bool) {
	o.HasTriggeredReingestion.Set(&v)
}
// SetHasTriggeredReingestionNil sets the value for HasTriggeredReingestion to be an explicit nil
func (o *TrustyPackageResult) SetHasTriggeredReingestionNil() {
	o.HasTriggeredReingestion.Set(nil)
}

// UnsetHasTriggeredReingestion ensures that no value is present for HasTriggeredReingestion, not even an explicit nil
func (o *TrustyPackageResult) UnsetHasTriggeredReingestion() {
	o.HasTriggeredReingestion.Unset()
}

func (o TrustyPackageResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustyPackageResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["package_name"] = o.PackageName
	toSerialize["package_type"] = o.PackageType
	if o.PackageVersion.IsSet() {
		toSerialize["package_version"] = o.PackageVersion.Get()
	}
	toSerialize["package_data"] = o.PackageData
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Provenance) {
		toSerialize["provenance"] = o.Provenance
	}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.Typosquatting) {
		toSerialize["typosquatting"] = o.Typosquatting
	}
	if !IsNil(o.Alternatives) {
		toSerialize["alternatives"] = o.Alternatives
	}
	if o.SimilarPackageNames != nil {
		toSerialize["similar_package_names"] = o.SimilarPackageNames
	}
	if o.SameOriginPackagesCount.IsSet() {
		toSerialize["same_origin_packages_count"] = o.SameOriginPackagesCount.Get()
	}
	if o.HasTriggeredReingestion.IsSet() {
		toSerialize["has_triggered_reingestion"] = o.HasTriggeredReingestion.Get()
	}
	return toSerialize, nil
}

func (o *TrustyPackageResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"package_name",
		"package_type",
		"package_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrustyPackageResult := _TrustyPackageResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrustyPackageResult)

	if err != nil {
		return err
	}

	*o = TrustyPackageResult(varTrustyPackageResult)

	return err
}

type NullableTrustyPackageResult struct {
	value *TrustyPackageResult
	isSet bool
}

func (v NullableTrustyPackageResult) Get() *TrustyPackageResult {
	return v.value
}

func (v *NullableTrustyPackageResult) Set(val *TrustyPackageResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustyPackageResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustyPackageResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustyPackageResult(val *TrustyPackageResult) *NullableTrustyPackageResult {
	return &NullableTrustyPackageResult{value: val, isSet: true}
}

func (v NullableTrustyPackageResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustyPackageResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


