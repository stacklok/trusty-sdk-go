/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RepositoryResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryResult{}

// RepositoryResult struct for RepositoryResult
type RepositoryResult struct {
	Repository *RepositoryData `json:"repository,omitempty"`
	Contributors []PackageContributorData `json:"contributors,omitempty"`
	Packages []TrustyPackageData `json:"packages,omitempty"`
}

// NewRepositoryResult instantiates a new RepositoryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryResult() *RepositoryResult {
	this := RepositoryResult{}
	return &this
}

// NewRepositoryResultWithDefaults instantiates a new RepositoryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryResultWithDefaults() *RepositoryResult {
	this := RepositoryResult{}
	return &this
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *RepositoryResult) GetRepository() RepositoryData {
	if o == nil || IsNil(o.Repository) {
		var ret RepositoryData
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryResult) GetRepositoryOk() (*RepositoryData, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *RepositoryResult) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RepositoryData and assigns it to the Repository field.
func (o *RepositoryResult) SetRepository(v RepositoryData) {
	o.Repository = &v
}

// GetContributors returns the Contributors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryResult) GetContributors() []PackageContributorData {
	if o == nil {
		var ret []PackageContributorData
		return ret
	}
	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryResult) GetContributorsOk() ([]PackageContributorData, bool) {
	if o == nil || IsNil(o.Contributors) {
		return nil, false
	}
	return o.Contributors, true
}

// HasContributors returns a boolean if a field has been set.
func (o *RepositoryResult) HasContributors() bool {
	if o != nil && !IsNil(o.Contributors) {
		return true
	}

	return false
}

// SetContributors gets a reference to the given []PackageContributorData and assigns it to the Contributors field.
func (o *RepositoryResult) SetContributors(v []PackageContributorData) {
	o.Contributors = v
}

// GetPackages returns the Packages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryResult) GetPackages() []TrustyPackageData {
	if o == nil {
		var ret []TrustyPackageData
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryResult) GetPackagesOk() ([]TrustyPackageData, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *RepositoryResult) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []TrustyPackageData and assigns it to the Packages field.
func (o *RepositoryResult) SetPackages(v []TrustyPackageData) {
	o.Packages = v
}

func (o RepositoryResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if o.Contributors != nil {
		toSerialize["contributors"] = o.Contributors
	}
	if o.Packages != nil {
		toSerialize["packages"] = o.Packages
	}
	return toSerialize, nil
}

type NullableRepositoryResult struct {
	value *RepositoryResult
	isSet bool
}

func (v NullableRepositoryResult) Get() *RepositoryResult {
	return v.value
}

func (v *NullableRepositoryResult) Set(val *RepositoryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryResult(val *RepositoryResult) *NullableRepositoryResult {
	return &NullableRepositoryResult{value: val, isSet: true}
}

func (v NullableRepositoryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


