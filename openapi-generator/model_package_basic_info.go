/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PackageBasicInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageBasicInfo{}

// PackageBasicInfo This represents the basic information about a package.
type PackageBasicInfo struct {
	Id string `json:"id"`
	PackageName string `json:"package_name"`
	PackageType PackageType `json:"package_type"`
	PackageVersion NullableString `json:"package_version"`
	RepoDescription NullableString `json:"repo_description,omitempty"`
	Score NullableFloat32 `json:"score,omitempty"`
	IsMalicious *bool `json:"is_malicious,omitempty"`
	Provenance *Provenance `json:"provenance,omitempty"`
}

type _PackageBasicInfo PackageBasicInfo

// NewPackageBasicInfo instantiates a new PackageBasicInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageBasicInfo(id string, packageName string, packageType PackageType, packageVersion NullableString) *PackageBasicInfo {
	this := PackageBasicInfo{}
	this.Id = id
	this.PackageName = packageName
	this.PackageType = packageType
	this.PackageVersion = packageVersion
	var isMalicious bool = false
	this.IsMalicious = &isMalicious
	var provenance Provenance = {}
	this.Provenance = &provenance
	return &this
}

// NewPackageBasicInfoWithDefaults instantiates a new PackageBasicInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageBasicInfoWithDefaults() *PackageBasicInfo {
	this := PackageBasicInfo{}
	var isMalicious bool = false
	this.IsMalicious = &isMalicious
	var provenance Provenance = {}
	this.Provenance = &provenance
	return &this
}

// GetId returns the Id field value
func (o *PackageBasicInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PackageBasicInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PackageBasicInfo) SetId(v string) {
	o.Id = v
}

// GetPackageName returns the PackageName field value
func (o *PackageBasicInfo) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *PackageBasicInfo) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *PackageBasicInfo) SetPackageName(v string) {
	o.PackageName = v
}

// GetPackageType returns the PackageType field value
func (o *PackageBasicInfo) GetPackageType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *PackageBasicInfo) GetPackageTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *PackageBasicInfo) SetPackageType(v PackageType) {
	o.PackageType = v
}

// GetPackageVersion returns the PackageVersion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PackageBasicInfo) GetPackageVersion() string {
	if o == nil || o.PackageVersion.Get() == nil {
		var ret string
		return ret
	}

	return *o.PackageVersion.Get()
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageBasicInfo) GetPackageVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageVersion.Get(), o.PackageVersion.IsSet()
}

// SetPackageVersion sets field value
func (o *PackageBasicInfo) SetPackageVersion(v string) {
	o.PackageVersion.Set(&v)
}

// GetRepoDescription returns the RepoDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageBasicInfo) GetRepoDescription() string {
	if o == nil || IsNil(o.RepoDescription.Get()) {
		var ret string
		return ret
	}
	return *o.RepoDescription.Get()
}

// GetRepoDescriptionOk returns a tuple with the RepoDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageBasicInfo) GetRepoDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepoDescription.Get(), o.RepoDescription.IsSet()
}

// HasRepoDescription returns a boolean if a field has been set.
func (o *PackageBasicInfo) HasRepoDescription() bool {
	if o != nil && o.RepoDescription.IsSet() {
		return true
	}

	return false
}

// SetRepoDescription gets a reference to the given NullableString and assigns it to the RepoDescription field.
func (o *PackageBasicInfo) SetRepoDescription(v string) {
	o.RepoDescription.Set(&v)
}
// SetRepoDescriptionNil sets the value for RepoDescription to be an explicit nil
func (o *PackageBasicInfo) SetRepoDescriptionNil() {
	o.RepoDescription.Set(nil)
}

// UnsetRepoDescription ensures that no value is present for RepoDescription, not even an explicit nil
func (o *PackageBasicInfo) UnsetRepoDescription() {
	o.RepoDescription.Unset()
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageBasicInfo) GetScore() float32 {
	if o == nil || IsNil(o.Score.Get()) {
		var ret float32
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageBasicInfo) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *PackageBasicInfo) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableFloat32 and assigns it to the Score field.
func (o *PackageBasicInfo) SetScore(v float32) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *PackageBasicInfo) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *PackageBasicInfo) UnsetScore() {
	o.Score.Unset()
}

// GetIsMalicious returns the IsMalicious field value if set, zero value otherwise.
func (o *PackageBasicInfo) GetIsMalicious() bool {
	if o == nil || IsNil(o.IsMalicious) {
		var ret bool
		return ret
	}
	return *o.IsMalicious
}

// GetIsMaliciousOk returns a tuple with the IsMalicious field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageBasicInfo) GetIsMaliciousOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMalicious) {
		return nil, false
	}
	return o.IsMalicious, true
}

// HasIsMalicious returns a boolean if a field has been set.
func (o *PackageBasicInfo) HasIsMalicious() bool {
	if o != nil && !IsNil(o.IsMalicious) {
		return true
	}

	return false
}

// SetIsMalicious gets a reference to the given bool and assigns it to the IsMalicious field.
func (o *PackageBasicInfo) SetIsMalicious(v bool) {
	o.IsMalicious = &v
}

// GetProvenance returns the Provenance field value if set, zero value otherwise.
func (o *PackageBasicInfo) GetProvenance() Provenance {
	if o == nil || IsNil(o.Provenance) {
		var ret Provenance
		return ret
	}
	return *o.Provenance
}

// GetProvenanceOk returns a tuple with the Provenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageBasicInfo) GetProvenanceOk() (*Provenance, bool) {
	if o == nil || IsNil(o.Provenance) {
		return nil, false
	}
	return o.Provenance, true
}

// HasProvenance returns a boolean if a field has been set.
func (o *PackageBasicInfo) HasProvenance() bool {
	if o != nil && !IsNil(o.Provenance) {
		return true
	}

	return false
}

// SetProvenance gets a reference to the given Provenance and assigns it to the Provenance field.
func (o *PackageBasicInfo) SetProvenance(v Provenance) {
	o.Provenance = &v
}

func (o PackageBasicInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageBasicInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["package_name"] = o.PackageName
	toSerialize["package_type"] = o.PackageType
	toSerialize["package_version"] = o.PackageVersion.Get()
	if o.RepoDescription.IsSet() {
		toSerialize["repo_description"] = o.RepoDescription.Get()
	}
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if !IsNil(o.IsMalicious) {
		toSerialize["is_malicious"] = o.IsMalicious
	}
	if !IsNil(o.Provenance) {
		toSerialize["provenance"] = o.Provenance
	}
	return toSerialize, nil
}

func (o *PackageBasicInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"package_name",
		"package_type",
		"package_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPackageBasicInfo := _PackageBasicInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPackageBasicInfo)

	if err != nil {
		return err
	}

	*o = PackageBasicInfo(varPackageBasicInfo)

	return err
}

type NullablePackageBasicInfo struct {
	value *PackageBasicInfo
	isSet bool
}

func (v NullablePackageBasicInfo) Get() *PackageBasicInfo {
	return v.value
}

func (v *NullablePackageBasicInfo) Set(val *PackageBasicInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageBasicInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageBasicInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageBasicInfo(val *PackageBasicInfo) *NullablePackageBasicInfo {
	return &NullablePackageBasicInfo{value: val, isSet: true}
}

func (v NullablePackageBasicInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageBasicInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


