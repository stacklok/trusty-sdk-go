/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TrustyPackageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustyPackageData{}

// TrustyPackageData struct for TrustyPackageData
type TrustyPackageData struct {
	Id string `json:"id"`
	Status PackageStatus `json:"status"`
	StatusCode NullableString `json:"status_code,omitempty"`
	Name string `json:"name"`
	Type PackageType `json:"type"`
	Version NullableString `json:"version,omitempty"`
	VersionDate NullableTime `json:"version_date,omitempty"`
	Author NullableString `json:"author,omitempty"`
	AuthorEmail NullableString `json:"author_email,omitempty"`
	PackageDescription NullableString `json:"package_description,omitempty"`
	RepoDescription NullableString `json:"repo_description,omitempty"`
	Origin NullableString `json:"origin,omitempty"`
	StargazersCount NullableInt32 `json:"stargazers_count,omitempty"`
	WatchersCount NullableInt32 `json:"watchers_count,omitempty"`
	HomePage NullableString `json:"home_page,omitempty"`
	HasIssues NullableBool `json:"has_issues,omitempty"`
	HasProjects NullableBool `json:"has_projects,omitempty"`
	HasDownloads NullableBool `json:"has_downloads,omitempty"`
	ForksCount NullableInt32 `json:"forks_count,omitempty"`
	Archived NullableBool `json:"archived,omitempty"`
	IsDeprecated NullableBool `json:"is_deprecated,omitempty"`
	Disabled NullableBool `json:"disabled,omitempty"`
	OpenIssuesCount NullableInt32 `json:"open_issues_count,omitempty"`
	Visibility NullableString `json:"visibility,omitempty"`
	DefaultBranch NullableString `json:"default_branch,omitempty"`
	RepositoryId NullableString `json:"repository_id,omitempty"`
	RepositoryName NullableString `json:"repository_name,omitempty"`
	ContributorCount NullableInt32 `json:"contributor_count,omitempty"`
	PublicRepos NullableInt32 `json:"public_repos,omitempty"`
	PublicGists NullableInt32 `json:"public_gists,omitempty"`
	Followers NullableInt32 `json:"followers,omitempty"`
	Following NullableInt32 `json:"following,omitempty"`
	Owner NullablePackageContributorData `json:"owner,omitempty"`
	Contributors []PackageContributorData `json:"contributors,omitempty"`
	LastUpdate NullableTime `json:"last_update,omitempty"`
	Scores *Scores2 `json:"scores,omitempty"`
	Malicious NullablePackageMaliciousPayload `json:"malicious,omitempty"`
	HasTriggeredReingestion NullableBool `json:"has_triggered_reingestion,omitempty"`
}

type _TrustyPackageData TrustyPackageData

// NewTrustyPackageData instantiates a new TrustyPackageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustyPackageData(id string, status PackageStatus, name string, type_ PackageType) *TrustyPackageData {
	this := TrustyPackageData{}
	this.Id = id
	this.Status = status
	this.Name = name
	this.Type = type_
	var scores Scores2 = {}
	this.Scores = &scores
	return &this
}

// NewTrustyPackageDataWithDefaults instantiates a new TrustyPackageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustyPackageDataWithDefaults() *TrustyPackageData {
	this := TrustyPackageData{}
	var scores Scores2 = {}
	this.Scores = &scores
	return &this
}

// GetId returns the Id field value
func (o *TrustyPackageData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TrustyPackageData) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *TrustyPackageData) GetStatus() PackageStatus {
	if o == nil {
		var ret PackageStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageData) GetStatusOk() (*PackageStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TrustyPackageData) SetStatus(v PackageStatus) {
	o.Status = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetStatusCode() string {
	if o == nil || IsNil(o.StatusCode.Get()) {
		var ret string
		return ret
	}
	return *o.StatusCode.Get()
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetStatusCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusCode.Get(), o.StatusCode.IsSet()
}

// HasStatusCode returns a boolean if a field has been set.
func (o *TrustyPackageData) HasStatusCode() bool {
	if o != nil && o.StatusCode.IsSet() {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given NullableString and assigns it to the StatusCode field.
func (o *TrustyPackageData) SetStatusCode(v string) {
	o.StatusCode.Set(&v)
}
// SetStatusCodeNil sets the value for StatusCode to be an explicit nil
func (o *TrustyPackageData) SetStatusCodeNil() {
	o.StatusCode.Set(nil)
}

// UnsetStatusCode ensures that no value is present for StatusCode, not even an explicit nil
func (o *TrustyPackageData) UnsetStatusCode() {
	o.StatusCode.Unset()
}

// GetName returns the Name field value
func (o *TrustyPackageData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrustyPackageData) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *TrustyPackageData) GetType() PackageType {
	if o == nil {
		var ret PackageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TrustyPackageData) GetTypeOk() (*PackageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TrustyPackageData) SetType(v PackageType) {
	o.Type = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *TrustyPackageData) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *TrustyPackageData) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *TrustyPackageData) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *TrustyPackageData) UnsetVersion() {
	o.Version.Unset()
}

// GetVersionDate returns the VersionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetVersionDate() time.Time {
	if o == nil || IsNil(o.VersionDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.VersionDate.Get()
}

// GetVersionDateOk returns a tuple with the VersionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetVersionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionDate.Get(), o.VersionDate.IsSet()
}

// HasVersionDate returns a boolean if a field has been set.
func (o *TrustyPackageData) HasVersionDate() bool {
	if o != nil && o.VersionDate.IsSet() {
		return true
	}

	return false
}

// SetVersionDate gets a reference to the given NullableTime and assigns it to the VersionDate field.
func (o *TrustyPackageData) SetVersionDate(v time.Time) {
	o.VersionDate.Set(&v)
}
// SetVersionDateNil sets the value for VersionDate to be an explicit nil
func (o *TrustyPackageData) SetVersionDateNil() {
	o.VersionDate.Set(nil)
}

// UnsetVersionDate ensures that no value is present for VersionDate, not even an explicit nil
func (o *TrustyPackageData) UnsetVersionDate() {
	o.VersionDate.Unset()
}

// GetAuthor returns the Author field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetAuthor() string {
	if o == nil || IsNil(o.Author.Get()) {
		var ret string
		return ret
	}
	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// HasAuthor returns a boolean if a field has been set.
func (o *TrustyPackageData) HasAuthor() bool {
	if o != nil && o.Author.IsSet() {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given NullableString and assigns it to the Author field.
func (o *TrustyPackageData) SetAuthor(v string) {
	o.Author.Set(&v)
}
// SetAuthorNil sets the value for Author to be an explicit nil
func (o *TrustyPackageData) SetAuthorNil() {
	o.Author.Set(nil)
}

// UnsetAuthor ensures that no value is present for Author, not even an explicit nil
func (o *TrustyPackageData) UnsetAuthor() {
	o.Author.Unset()
}

// GetAuthorEmail returns the AuthorEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetAuthorEmail() string {
	if o == nil || IsNil(o.AuthorEmail.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorEmail.Get()
}

// GetAuthorEmailOk returns a tuple with the AuthorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetAuthorEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorEmail.Get(), o.AuthorEmail.IsSet()
}

// HasAuthorEmail returns a boolean if a field has been set.
func (o *TrustyPackageData) HasAuthorEmail() bool {
	if o != nil && o.AuthorEmail.IsSet() {
		return true
	}

	return false
}

// SetAuthorEmail gets a reference to the given NullableString and assigns it to the AuthorEmail field.
func (o *TrustyPackageData) SetAuthorEmail(v string) {
	o.AuthorEmail.Set(&v)
}
// SetAuthorEmailNil sets the value for AuthorEmail to be an explicit nil
func (o *TrustyPackageData) SetAuthorEmailNil() {
	o.AuthorEmail.Set(nil)
}

// UnsetAuthorEmail ensures that no value is present for AuthorEmail, not even an explicit nil
func (o *TrustyPackageData) UnsetAuthorEmail() {
	o.AuthorEmail.Unset()
}

// GetPackageDescription returns the PackageDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetPackageDescription() string {
	if o == nil || IsNil(o.PackageDescription.Get()) {
		var ret string
		return ret
	}
	return *o.PackageDescription.Get()
}

// GetPackageDescriptionOk returns a tuple with the PackageDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetPackageDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageDescription.Get(), o.PackageDescription.IsSet()
}

// HasPackageDescription returns a boolean if a field has been set.
func (o *TrustyPackageData) HasPackageDescription() bool {
	if o != nil && o.PackageDescription.IsSet() {
		return true
	}

	return false
}

// SetPackageDescription gets a reference to the given NullableString and assigns it to the PackageDescription field.
func (o *TrustyPackageData) SetPackageDescription(v string) {
	o.PackageDescription.Set(&v)
}
// SetPackageDescriptionNil sets the value for PackageDescription to be an explicit nil
func (o *TrustyPackageData) SetPackageDescriptionNil() {
	o.PackageDescription.Set(nil)
}

// UnsetPackageDescription ensures that no value is present for PackageDescription, not even an explicit nil
func (o *TrustyPackageData) UnsetPackageDescription() {
	o.PackageDescription.Unset()
}

// GetRepoDescription returns the RepoDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetRepoDescription() string {
	if o == nil || IsNil(o.RepoDescription.Get()) {
		var ret string
		return ret
	}
	return *o.RepoDescription.Get()
}

// GetRepoDescriptionOk returns a tuple with the RepoDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetRepoDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepoDescription.Get(), o.RepoDescription.IsSet()
}

// HasRepoDescription returns a boolean if a field has been set.
func (o *TrustyPackageData) HasRepoDescription() bool {
	if o != nil && o.RepoDescription.IsSet() {
		return true
	}

	return false
}

// SetRepoDescription gets a reference to the given NullableString and assigns it to the RepoDescription field.
func (o *TrustyPackageData) SetRepoDescription(v string) {
	o.RepoDescription.Set(&v)
}
// SetRepoDescriptionNil sets the value for RepoDescription to be an explicit nil
func (o *TrustyPackageData) SetRepoDescriptionNil() {
	o.RepoDescription.Set(nil)
}

// UnsetRepoDescription ensures that no value is present for RepoDescription, not even an explicit nil
func (o *TrustyPackageData) UnsetRepoDescription() {
	o.RepoDescription.Unset()
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetOrigin() string {
	if o == nil || IsNil(o.Origin.Get()) {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *TrustyPackageData) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *TrustyPackageData) SetOrigin(v string) {
	o.Origin.Set(&v)
}
// SetOriginNil sets the value for Origin to be an explicit nil
func (o *TrustyPackageData) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *TrustyPackageData) UnsetOrigin() {
	o.Origin.Unset()
}

// GetStargazersCount returns the StargazersCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetStargazersCount() int32 {
	if o == nil || IsNil(o.StargazersCount.Get()) {
		var ret int32
		return ret
	}
	return *o.StargazersCount.Get()
}

// GetStargazersCountOk returns a tuple with the StargazersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetStargazersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StargazersCount.Get(), o.StargazersCount.IsSet()
}

// HasStargazersCount returns a boolean if a field has been set.
func (o *TrustyPackageData) HasStargazersCount() bool {
	if o != nil && o.StargazersCount.IsSet() {
		return true
	}

	return false
}

// SetStargazersCount gets a reference to the given NullableInt32 and assigns it to the StargazersCount field.
func (o *TrustyPackageData) SetStargazersCount(v int32) {
	o.StargazersCount.Set(&v)
}
// SetStargazersCountNil sets the value for StargazersCount to be an explicit nil
func (o *TrustyPackageData) SetStargazersCountNil() {
	o.StargazersCount.Set(nil)
}

// UnsetStargazersCount ensures that no value is present for StargazersCount, not even an explicit nil
func (o *TrustyPackageData) UnsetStargazersCount() {
	o.StargazersCount.Unset()
}

// GetWatchersCount returns the WatchersCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetWatchersCount() int32 {
	if o == nil || IsNil(o.WatchersCount.Get()) {
		var ret int32
		return ret
	}
	return *o.WatchersCount.Get()
}

// GetWatchersCountOk returns a tuple with the WatchersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetWatchersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WatchersCount.Get(), o.WatchersCount.IsSet()
}

// HasWatchersCount returns a boolean if a field has been set.
func (o *TrustyPackageData) HasWatchersCount() bool {
	if o != nil && o.WatchersCount.IsSet() {
		return true
	}

	return false
}

// SetWatchersCount gets a reference to the given NullableInt32 and assigns it to the WatchersCount field.
func (o *TrustyPackageData) SetWatchersCount(v int32) {
	o.WatchersCount.Set(&v)
}
// SetWatchersCountNil sets the value for WatchersCount to be an explicit nil
func (o *TrustyPackageData) SetWatchersCountNil() {
	o.WatchersCount.Set(nil)
}

// UnsetWatchersCount ensures that no value is present for WatchersCount, not even an explicit nil
func (o *TrustyPackageData) UnsetWatchersCount() {
	o.WatchersCount.Unset()
}

// GetHomePage returns the HomePage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetHomePage() string {
	if o == nil || IsNil(o.HomePage.Get()) {
		var ret string
		return ret
	}
	return *o.HomePage.Get()
}

// GetHomePageOk returns a tuple with the HomePage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetHomePageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HomePage.Get(), o.HomePage.IsSet()
}

// HasHomePage returns a boolean if a field has been set.
func (o *TrustyPackageData) HasHomePage() bool {
	if o != nil && o.HomePage.IsSet() {
		return true
	}

	return false
}

// SetHomePage gets a reference to the given NullableString and assigns it to the HomePage field.
func (o *TrustyPackageData) SetHomePage(v string) {
	o.HomePage.Set(&v)
}
// SetHomePageNil sets the value for HomePage to be an explicit nil
func (o *TrustyPackageData) SetHomePageNil() {
	o.HomePage.Set(nil)
}

// UnsetHomePage ensures that no value is present for HomePage, not even an explicit nil
func (o *TrustyPackageData) UnsetHomePage() {
	o.HomePage.Unset()
}

// GetHasIssues returns the HasIssues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetHasIssues() bool {
	if o == nil || IsNil(o.HasIssues.Get()) {
		var ret bool
		return ret
	}
	return *o.HasIssues.Get()
}

// GetHasIssuesOk returns a tuple with the HasIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetHasIssuesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasIssues.Get(), o.HasIssues.IsSet()
}

// HasHasIssues returns a boolean if a field has been set.
func (o *TrustyPackageData) HasHasIssues() bool {
	if o != nil && o.HasIssues.IsSet() {
		return true
	}

	return false
}

// SetHasIssues gets a reference to the given NullableBool and assigns it to the HasIssues field.
func (o *TrustyPackageData) SetHasIssues(v bool) {
	o.HasIssues.Set(&v)
}
// SetHasIssuesNil sets the value for HasIssues to be an explicit nil
func (o *TrustyPackageData) SetHasIssuesNil() {
	o.HasIssues.Set(nil)
}

// UnsetHasIssues ensures that no value is present for HasIssues, not even an explicit nil
func (o *TrustyPackageData) UnsetHasIssues() {
	o.HasIssues.Unset()
}

// GetHasProjects returns the HasProjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetHasProjects() bool {
	if o == nil || IsNil(o.HasProjects.Get()) {
		var ret bool
		return ret
	}
	return *o.HasProjects.Get()
}

// GetHasProjectsOk returns a tuple with the HasProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetHasProjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasProjects.Get(), o.HasProjects.IsSet()
}

// HasHasProjects returns a boolean if a field has been set.
func (o *TrustyPackageData) HasHasProjects() bool {
	if o != nil && o.HasProjects.IsSet() {
		return true
	}

	return false
}

// SetHasProjects gets a reference to the given NullableBool and assigns it to the HasProjects field.
func (o *TrustyPackageData) SetHasProjects(v bool) {
	o.HasProjects.Set(&v)
}
// SetHasProjectsNil sets the value for HasProjects to be an explicit nil
func (o *TrustyPackageData) SetHasProjectsNil() {
	o.HasProjects.Set(nil)
}

// UnsetHasProjects ensures that no value is present for HasProjects, not even an explicit nil
func (o *TrustyPackageData) UnsetHasProjects() {
	o.HasProjects.Unset()
}

// GetHasDownloads returns the HasDownloads field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetHasDownloads() bool {
	if o == nil || IsNil(o.HasDownloads.Get()) {
		var ret bool
		return ret
	}
	return *o.HasDownloads.Get()
}

// GetHasDownloadsOk returns a tuple with the HasDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetHasDownloadsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasDownloads.Get(), o.HasDownloads.IsSet()
}

// HasHasDownloads returns a boolean if a field has been set.
func (o *TrustyPackageData) HasHasDownloads() bool {
	if o != nil && o.HasDownloads.IsSet() {
		return true
	}

	return false
}

// SetHasDownloads gets a reference to the given NullableBool and assigns it to the HasDownloads field.
func (o *TrustyPackageData) SetHasDownloads(v bool) {
	o.HasDownloads.Set(&v)
}
// SetHasDownloadsNil sets the value for HasDownloads to be an explicit nil
func (o *TrustyPackageData) SetHasDownloadsNil() {
	o.HasDownloads.Set(nil)
}

// UnsetHasDownloads ensures that no value is present for HasDownloads, not even an explicit nil
func (o *TrustyPackageData) UnsetHasDownloads() {
	o.HasDownloads.Unset()
}

// GetForksCount returns the ForksCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetForksCount() int32 {
	if o == nil || IsNil(o.ForksCount.Get()) {
		var ret int32
		return ret
	}
	return *o.ForksCount.Get()
}

// GetForksCountOk returns a tuple with the ForksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetForksCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForksCount.Get(), o.ForksCount.IsSet()
}

// HasForksCount returns a boolean if a field has been set.
func (o *TrustyPackageData) HasForksCount() bool {
	if o != nil && o.ForksCount.IsSet() {
		return true
	}

	return false
}

// SetForksCount gets a reference to the given NullableInt32 and assigns it to the ForksCount field.
func (o *TrustyPackageData) SetForksCount(v int32) {
	o.ForksCount.Set(&v)
}
// SetForksCountNil sets the value for ForksCount to be an explicit nil
func (o *TrustyPackageData) SetForksCountNil() {
	o.ForksCount.Set(nil)
}

// UnsetForksCount ensures that no value is present for ForksCount, not even an explicit nil
func (o *TrustyPackageData) UnsetForksCount() {
	o.ForksCount.Unset()
}

// GetArchived returns the Archived field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetArchived() bool {
	if o == nil || IsNil(o.Archived.Get()) {
		var ret bool
		return ret
	}
	return *o.Archived.Get()
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Archived.Get(), o.Archived.IsSet()
}

// HasArchived returns a boolean if a field has been set.
func (o *TrustyPackageData) HasArchived() bool {
	if o != nil && o.Archived.IsSet() {
		return true
	}

	return false
}

// SetArchived gets a reference to the given NullableBool and assigns it to the Archived field.
func (o *TrustyPackageData) SetArchived(v bool) {
	o.Archived.Set(&v)
}
// SetArchivedNil sets the value for Archived to be an explicit nil
func (o *TrustyPackageData) SetArchivedNil() {
	o.Archived.Set(nil)
}

// UnsetArchived ensures that no value is present for Archived, not even an explicit nil
func (o *TrustyPackageData) UnsetArchived() {
	o.Archived.Unset()
}

// GetIsDeprecated returns the IsDeprecated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetIsDeprecated() bool {
	if o == nil || IsNil(o.IsDeprecated.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDeprecated.Get()
}

// GetIsDeprecatedOk returns a tuple with the IsDeprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetIsDeprecatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDeprecated.Get(), o.IsDeprecated.IsSet()
}

// HasIsDeprecated returns a boolean if a field has been set.
func (o *TrustyPackageData) HasIsDeprecated() bool {
	if o != nil && o.IsDeprecated.IsSet() {
		return true
	}

	return false
}

// SetIsDeprecated gets a reference to the given NullableBool and assigns it to the IsDeprecated field.
func (o *TrustyPackageData) SetIsDeprecated(v bool) {
	o.IsDeprecated.Set(&v)
}
// SetIsDeprecatedNil sets the value for IsDeprecated to be an explicit nil
func (o *TrustyPackageData) SetIsDeprecatedNil() {
	o.IsDeprecated.Set(nil)
}

// UnsetIsDeprecated ensures that no value is present for IsDeprecated, not even an explicit nil
func (o *TrustyPackageData) UnsetIsDeprecated() {
	o.IsDeprecated.Unset()
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Disabled.Get()
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disabled.Get(), o.Disabled.IsSet()
}

// HasDisabled returns a boolean if a field has been set.
func (o *TrustyPackageData) HasDisabled() bool {
	if o != nil && o.Disabled.IsSet() {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given NullableBool and assigns it to the Disabled field.
func (o *TrustyPackageData) SetDisabled(v bool) {
	o.Disabled.Set(&v)
}
// SetDisabledNil sets the value for Disabled to be an explicit nil
func (o *TrustyPackageData) SetDisabledNil() {
	o.Disabled.Set(nil)
}

// UnsetDisabled ensures that no value is present for Disabled, not even an explicit nil
func (o *TrustyPackageData) UnsetDisabled() {
	o.Disabled.Unset()
}

// GetOpenIssuesCount returns the OpenIssuesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetOpenIssuesCount() int32 {
	if o == nil || IsNil(o.OpenIssuesCount.Get()) {
		var ret int32
		return ret
	}
	return *o.OpenIssuesCount.Get()
}

// GetOpenIssuesCountOk returns a tuple with the OpenIssuesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetOpenIssuesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenIssuesCount.Get(), o.OpenIssuesCount.IsSet()
}

// HasOpenIssuesCount returns a boolean if a field has been set.
func (o *TrustyPackageData) HasOpenIssuesCount() bool {
	if o != nil && o.OpenIssuesCount.IsSet() {
		return true
	}

	return false
}

// SetOpenIssuesCount gets a reference to the given NullableInt32 and assigns it to the OpenIssuesCount field.
func (o *TrustyPackageData) SetOpenIssuesCount(v int32) {
	o.OpenIssuesCount.Set(&v)
}
// SetOpenIssuesCountNil sets the value for OpenIssuesCount to be an explicit nil
func (o *TrustyPackageData) SetOpenIssuesCountNil() {
	o.OpenIssuesCount.Set(nil)
}

// UnsetOpenIssuesCount ensures that no value is present for OpenIssuesCount, not even an explicit nil
func (o *TrustyPackageData) UnsetOpenIssuesCount() {
	o.OpenIssuesCount.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetVisibility() string {
	if o == nil || IsNil(o.Visibility.Get()) {
		var ret string
		return ret
	}
	return *o.Visibility.Get()
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visibility.Get(), o.Visibility.IsSet()
}

// HasVisibility returns a boolean if a field has been set.
func (o *TrustyPackageData) HasVisibility() bool {
	if o != nil && o.Visibility.IsSet() {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given NullableString and assigns it to the Visibility field.
func (o *TrustyPackageData) SetVisibility(v string) {
	o.Visibility.Set(&v)
}
// SetVisibilityNil sets the value for Visibility to be an explicit nil
func (o *TrustyPackageData) SetVisibilityNil() {
	o.Visibility.Set(nil)
}

// UnsetVisibility ensures that no value is present for Visibility, not even an explicit nil
func (o *TrustyPackageData) UnsetVisibility() {
	o.Visibility.Unset()
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultBranch.Get()
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetDefaultBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultBranch.Get(), o.DefaultBranch.IsSet()
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *TrustyPackageData) HasDefaultBranch() bool {
	if o != nil && o.DefaultBranch.IsSet() {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given NullableString and assigns it to the DefaultBranch field.
func (o *TrustyPackageData) SetDefaultBranch(v string) {
	o.DefaultBranch.Set(&v)
}
// SetDefaultBranchNil sets the value for DefaultBranch to be an explicit nil
func (o *TrustyPackageData) SetDefaultBranchNil() {
	o.DefaultBranch.Set(nil)
}

// UnsetDefaultBranch ensures that no value is present for DefaultBranch, not even an explicit nil
func (o *TrustyPackageData) UnsetDefaultBranch() {
	o.DefaultBranch.Unset()
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId.Get()) {
		var ret string
		return ret
	}
	return *o.RepositoryId.Get()
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetRepositoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepositoryId.Get(), o.RepositoryId.IsSet()
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *TrustyPackageData) HasRepositoryId() bool {
	if o != nil && o.RepositoryId.IsSet() {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given NullableString and assigns it to the RepositoryId field.
func (o *TrustyPackageData) SetRepositoryId(v string) {
	o.RepositoryId.Set(&v)
}
// SetRepositoryIdNil sets the value for RepositoryId to be an explicit nil
func (o *TrustyPackageData) SetRepositoryIdNil() {
	o.RepositoryId.Set(nil)
}

// UnsetRepositoryId ensures that no value is present for RepositoryId, not even an explicit nil
func (o *TrustyPackageData) UnsetRepositoryId() {
	o.RepositoryId.Unset()
}

// GetRepositoryName returns the RepositoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetRepositoryName() string {
	if o == nil || IsNil(o.RepositoryName.Get()) {
		var ret string
		return ret
	}
	return *o.RepositoryName.Get()
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetRepositoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RepositoryName.Get(), o.RepositoryName.IsSet()
}

// HasRepositoryName returns a boolean if a field has been set.
func (o *TrustyPackageData) HasRepositoryName() bool {
	if o != nil && o.RepositoryName.IsSet() {
		return true
	}

	return false
}

// SetRepositoryName gets a reference to the given NullableString and assigns it to the RepositoryName field.
func (o *TrustyPackageData) SetRepositoryName(v string) {
	o.RepositoryName.Set(&v)
}
// SetRepositoryNameNil sets the value for RepositoryName to be an explicit nil
func (o *TrustyPackageData) SetRepositoryNameNil() {
	o.RepositoryName.Set(nil)
}

// UnsetRepositoryName ensures that no value is present for RepositoryName, not even an explicit nil
func (o *TrustyPackageData) UnsetRepositoryName() {
	o.RepositoryName.Unset()
}

// GetContributorCount returns the ContributorCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetContributorCount() int32 {
	if o == nil || IsNil(o.ContributorCount.Get()) {
		var ret int32
		return ret
	}
	return *o.ContributorCount.Get()
}

// GetContributorCountOk returns a tuple with the ContributorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetContributorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContributorCount.Get(), o.ContributorCount.IsSet()
}

// HasContributorCount returns a boolean if a field has been set.
func (o *TrustyPackageData) HasContributorCount() bool {
	if o != nil && o.ContributorCount.IsSet() {
		return true
	}

	return false
}

// SetContributorCount gets a reference to the given NullableInt32 and assigns it to the ContributorCount field.
func (o *TrustyPackageData) SetContributorCount(v int32) {
	o.ContributorCount.Set(&v)
}
// SetContributorCountNil sets the value for ContributorCount to be an explicit nil
func (o *TrustyPackageData) SetContributorCountNil() {
	o.ContributorCount.Set(nil)
}

// UnsetContributorCount ensures that no value is present for ContributorCount, not even an explicit nil
func (o *TrustyPackageData) UnsetContributorCount() {
	o.ContributorCount.Unset()
}

// GetPublicRepos returns the PublicRepos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetPublicRepos() int32 {
	if o == nil || IsNil(o.PublicRepos.Get()) {
		var ret int32
		return ret
	}
	return *o.PublicRepos.Get()
}

// GetPublicReposOk returns a tuple with the PublicRepos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetPublicReposOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicRepos.Get(), o.PublicRepos.IsSet()
}

// HasPublicRepos returns a boolean if a field has been set.
func (o *TrustyPackageData) HasPublicRepos() bool {
	if o != nil && o.PublicRepos.IsSet() {
		return true
	}

	return false
}

// SetPublicRepos gets a reference to the given NullableInt32 and assigns it to the PublicRepos field.
func (o *TrustyPackageData) SetPublicRepos(v int32) {
	o.PublicRepos.Set(&v)
}
// SetPublicReposNil sets the value for PublicRepos to be an explicit nil
func (o *TrustyPackageData) SetPublicReposNil() {
	o.PublicRepos.Set(nil)
}

// UnsetPublicRepos ensures that no value is present for PublicRepos, not even an explicit nil
func (o *TrustyPackageData) UnsetPublicRepos() {
	o.PublicRepos.Unset()
}

// GetPublicGists returns the PublicGists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetPublicGists() int32 {
	if o == nil || IsNil(o.PublicGists.Get()) {
		var ret int32
		return ret
	}
	return *o.PublicGists.Get()
}

// GetPublicGistsOk returns a tuple with the PublicGists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetPublicGistsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicGists.Get(), o.PublicGists.IsSet()
}

// HasPublicGists returns a boolean if a field has been set.
func (o *TrustyPackageData) HasPublicGists() bool {
	if o != nil && o.PublicGists.IsSet() {
		return true
	}

	return false
}

// SetPublicGists gets a reference to the given NullableInt32 and assigns it to the PublicGists field.
func (o *TrustyPackageData) SetPublicGists(v int32) {
	o.PublicGists.Set(&v)
}
// SetPublicGistsNil sets the value for PublicGists to be an explicit nil
func (o *TrustyPackageData) SetPublicGistsNil() {
	o.PublicGists.Set(nil)
}

// UnsetPublicGists ensures that no value is present for PublicGists, not even an explicit nil
func (o *TrustyPackageData) UnsetPublicGists() {
	o.PublicGists.Unset()
}

// GetFollowers returns the Followers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetFollowers() int32 {
	if o == nil || IsNil(o.Followers.Get()) {
		var ret int32
		return ret
	}
	return *o.Followers.Get()
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetFollowersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Followers.Get(), o.Followers.IsSet()
}

// HasFollowers returns a boolean if a field has been set.
func (o *TrustyPackageData) HasFollowers() bool {
	if o != nil && o.Followers.IsSet() {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given NullableInt32 and assigns it to the Followers field.
func (o *TrustyPackageData) SetFollowers(v int32) {
	o.Followers.Set(&v)
}
// SetFollowersNil sets the value for Followers to be an explicit nil
func (o *TrustyPackageData) SetFollowersNil() {
	o.Followers.Set(nil)
}

// UnsetFollowers ensures that no value is present for Followers, not even an explicit nil
func (o *TrustyPackageData) UnsetFollowers() {
	o.Followers.Unset()
}

// GetFollowing returns the Following field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetFollowing() int32 {
	if o == nil || IsNil(o.Following.Get()) {
		var ret int32
		return ret
	}
	return *o.Following.Get()
}

// GetFollowingOk returns a tuple with the Following field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetFollowingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Following.Get(), o.Following.IsSet()
}

// HasFollowing returns a boolean if a field has been set.
func (o *TrustyPackageData) HasFollowing() bool {
	if o != nil && o.Following.IsSet() {
		return true
	}

	return false
}

// SetFollowing gets a reference to the given NullableInt32 and assigns it to the Following field.
func (o *TrustyPackageData) SetFollowing(v int32) {
	o.Following.Set(&v)
}
// SetFollowingNil sets the value for Following to be an explicit nil
func (o *TrustyPackageData) SetFollowingNil() {
	o.Following.Set(nil)
}

// UnsetFollowing ensures that no value is present for Following, not even an explicit nil
func (o *TrustyPackageData) UnsetFollowing() {
	o.Following.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetOwner() PackageContributorData {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret PackageContributorData
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetOwnerOk() (*PackageContributorData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *TrustyPackageData) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullablePackageContributorData and assigns it to the Owner field.
func (o *TrustyPackageData) SetOwner(v PackageContributorData) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *TrustyPackageData) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *TrustyPackageData) UnsetOwner() {
	o.Owner.Unset()
}

// GetContributors returns the Contributors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetContributors() []PackageContributorData {
	if o == nil {
		var ret []PackageContributorData
		return ret
	}
	return o.Contributors
}

// GetContributorsOk returns a tuple with the Contributors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetContributorsOk() ([]PackageContributorData, bool) {
	if o == nil || IsNil(o.Contributors) {
		return nil, false
	}
	return o.Contributors, true
}

// HasContributors returns a boolean if a field has been set.
func (o *TrustyPackageData) HasContributors() bool {
	if o != nil && !IsNil(o.Contributors) {
		return true
	}

	return false
}

// SetContributors gets a reference to the given []PackageContributorData and assigns it to the Contributors field.
func (o *TrustyPackageData) SetContributors(v []PackageContributorData) {
	o.Contributors = v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate.Get()
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdate.Get(), o.LastUpdate.IsSet()
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *TrustyPackageData) HasLastUpdate() bool {
	if o != nil && o.LastUpdate.IsSet() {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given NullableTime and assigns it to the LastUpdate field.
func (o *TrustyPackageData) SetLastUpdate(v time.Time) {
	o.LastUpdate.Set(&v)
}
// SetLastUpdateNil sets the value for LastUpdate to be an explicit nil
func (o *TrustyPackageData) SetLastUpdateNil() {
	o.LastUpdate.Set(nil)
}

// UnsetLastUpdate ensures that no value is present for LastUpdate, not even an explicit nil
func (o *TrustyPackageData) UnsetLastUpdate() {
	o.LastUpdate.Unset()
}

// GetScores returns the Scores field value if set, zero value otherwise.
func (o *TrustyPackageData) GetScores() Scores2 {
	if o == nil || IsNil(o.Scores) {
		var ret Scores2
		return ret
	}
	return *o.Scores
}

// GetScoresOk returns a tuple with the Scores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustyPackageData) GetScoresOk() (*Scores2, bool) {
	if o == nil || IsNil(o.Scores) {
		return nil, false
	}
	return o.Scores, true
}

// HasScores returns a boolean if a field has been set.
func (o *TrustyPackageData) HasScores() bool {
	if o != nil && !IsNil(o.Scores) {
		return true
	}

	return false
}

// SetScores gets a reference to the given Scores2 and assigns it to the Scores field.
func (o *TrustyPackageData) SetScores(v Scores2) {
	o.Scores = &v
}

// GetMalicious returns the Malicious field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetMalicious() PackageMaliciousPayload {
	if o == nil || IsNil(o.Malicious.Get()) {
		var ret PackageMaliciousPayload
		return ret
	}
	return *o.Malicious.Get()
}

// GetMaliciousOk returns a tuple with the Malicious field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetMaliciousOk() (*PackageMaliciousPayload, bool) {
	if o == nil {
		return nil, false
	}
	return o.Malicious.Get(), o.Malicious.IsSet()
}

// HasMalicious returns a boolean if a field has been set.
func (o *TrustyPackageData) HasMalicious() bool {
	if o != nil && o.Malicious.IsSet() {
		return true
	}

	return false
}

// SetMalicious gets a reference to the given NullablePackageMaliciousPayload and assigns it to the Malicious field.
func (o *TrustyPackageData) SetMalicious(v PackageMaliciousPayload) {
	o.Malicious.Set(&v)
}
// SetMaliciousNil sets the value for Malicious to be an explicit nil
func (o *TrustyPackageData) SetMaliciousNil() {
	o.Malicious.Set(nil)
}

// UnsetMalicious ensures that no value is present for Malicious, not even an explicit nil
func (o *TrustyPackageData) UnsetMalicious() {
	o.Malicious.Unset()
}

// GetHasTriggeredReingestion returns the HasTriggeredReingestion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustyPackageData) GetHasTriggeredReingestion() bool {
	if o == nil || IsNil(o.HasTriggeredReingestion.Get()) {
		var ret bool
		return ret
	}
	return *o.HasTriggeredReingestion.Get()
}

// GetHasTriggeredReingestionOk returns a tuple with the HasTriggeredReingestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustyPackageData) GetHasTriggeredReingestionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasTriggeredReingestion.Get(), o.HasTriggeredReingestion.IsSet()
}

// HasHasTriggeredReingestion returns a boolean if a field has been set.
func (o *TrustyPackageData) HasHasTriggeredReingestion() bool {
	if o != nil && o.HasTriggeredReingestion.IsSet() {
		return true
	}

	return false
}

// SetHasTriggeredReingestion gets a reference to the given NullableBool and assigns it to the HasTriggeredReingestion field.
func (o *TrustyPackageData) SetHasTriggeredReingestion(v bool) {
	o.HasTriggeredReingestion.Set(&v)
}
// SetHasTriggeredReingestionNil sets the value for HasTriggeredReingestion to be an explicit nil
func (o *TrustyPackageData) SetHasTriggeredReingestionNil() {
	o.HasTriggeredReingestion.Set(nil)
}

// UnsetHasTriggeredReingestion ensures that no value is present for HasTriggeredReingestion, not even an explicit nil
func (o *TrustyPackageData) UnsetHasTriggeredReingestion() {
	o.HasTriggeredReingestion.Unset()
}

func (o TrustyPackageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustyPackageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	if o.StatusCode.IsSet() {
		toSerialize["status_code"] = o.StatusCode.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.VersionDate.IsSet() {
		toSerialize["version_date"] = o.VersionDate.Get()
	}
	if o.Author.IsSet() {
		toSerialize["author"] = o.Author.Get()
	}
	if o.AuthorEmail.IsSet() {
		toSerialize["author_email"] = o.AuthorEmail.Get()
	}
	if o.PackageDescription.IsSet() {
		toSerialize["package_description"] = o.PackageDescription.Get()
	}
	if o.RepoDescription.IsSet() {
		toSerialize["repo_description"] = o.RepoDescription.Get()
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if o.StargazersCount.IsSet() {
		toSerialize["stargazers_count"] = o.StargazersCount.Get()
	}
	if o.WatchersCount.IsSet() {
		toSerialize["watchers_count"] = o.WatchersCount.Get()
	}
	if o.HomePage.IsSet() {
		toSerialize["home_page"] = o.HomePage.Get()
	}
	if o.HasIssues.IsSet() {
		toSerialize["has_issues"] = o.HasIssues.Get()
	}
	if o.HasProjects.IsSet() {
		toSerialize["has_projects"] = o.HasProjects.Get()
	}
	if o.HasDownloads.IsSet() {
		toSerialize["has_downloads"] = o.HasDownloads.Get()
	}
	if o.ForksCount.IsSet() {
		toSerialize["forks_count"] = o.ForksCount.Get()
	}
	if o.Archived.IsSet() {
		toSerialize["archived"] = o.Archived.Get()
	}
	if o.IsDeprecated.IsSet() {
		toSerialize["is_deprecated"] = o.IsDeprecated.Get()
	}
	if o.Disabled.IsSet() {
		toSerialize["disabled"] = o.Disabled.Get()
	}
	if o.OpenIssuesCount.IsSet() {
		toSerialize["open_issues_count"] = o.OpenIssuesCount.Get()
	}
	if o.Visibility.IsSet() {
		toSerialize["visibility"] = o.Visibility.Get()
	}
	if o.DefaultBranch.IsSet() {
		toSerialize["default_branch"] = o.DefaultBranch.Get()
	}
	if o.RepositoryId.IsSet() {
		toSerialize["repository_id"] = o.RepositoryId.Get()
	}
	if o.RepositoryName.IsSet() {
		toSerialize["repository_name"] = o.RepositoryName.Get()
	}
	if o.ContributorCount.IsSet() {
		toSerialize["contributor_count"] = o.ContributorCount.Get()
	}
	if o.PublicRepos.IsSet() {
		toSerialize["public_repos"] = o.PublicRepos.Get()
	}
	if o.PublicGists.IsSet() {
		toSerialize["public_gists"] = o.PublicGists.Get()
	}
	if o.Followers.IsSet() {
		toSerialize["followers"] = o.Followers.Get()
	}
	if o.Following.IsSet() {
		toSerialize["following"] = o.Following.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.Contributors != nil {
		toSerialize["contributors"] = o.Contributors
	}
	if o.LastUpdate.IsSet() {
		toSerialize["last_update"] = o.LastUpdate.Get()
	}
	if !IsNil(o.Scores) {
		toSerialize["scores"] = o.Scores
	}
	if o.Malicious.IsSet() {
		toSerialize["malicious"] = o.Malicious.Get()
	}
	if o.HasTriggeredReingestion.IsSet() {
		toSerialize["has_triggered_reingestion"] = o.HasTriggeredReingestion.Get()
	}
	return toSerialize, nil
}

func (o *TrustyPackageData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrustyPackageData := _TrustyPackageData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrustyPackageData)

	if err != nil {
		return err
	}

	*o = TrustyPackageData(varTrustyPackageData)

	return err
}

type NullableTrustyPackageData struct {
	value *TrustyPackageData
	isSet bool
}

func (v NullableTrustyPackageData) Get() *TrustyPackageData {
	return v.value
}

func (v *NullableTrustyPackageData) Set(val *TrustyPackageData) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustyPackageData) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustyPackageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustyPackageData(val *TrustyPackageData) *NullableTrustyPackageData {
	return &NullableTrustyPackageData{value: val, isSet: true}
}

func (v NullableTrustyPackageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustyPackageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


