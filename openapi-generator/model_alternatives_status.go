/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AlternativesStatus the model 'AlternativesStatus'
type AlternativesStatus string

// List of AlternativesStatus
const (
	IN_PROGRESS AlternativesStatus = "in_progress"
	COMPLETE AlternativesStatus = "complete"
)

// All allowed values of AlternativesStatus enum
var AllowedAlternativesStatusEnumValues = []AlternativesStatus{
	"in_progress",
	"complete",
}

func (v *AlternativesStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlternativesStatus(value)
	for _, existing := range AllowedAlternativesStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlternativesStatus", value)
}

// NewAlternativesStatusFromValue returns a pointer to a valid AlternativesStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlternativesStatusFromValue(v string) (*AlternativesStatus, error) {
	ev := AlternativesStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlternativesStatus: valid values are %v", v, AllowedAlternativesStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlternativesStatus) IsValid() bool {
	for _, existing := range AllowedAlternativesStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlternativesStatus value
func (v AlternativesStatus) Ptr() *AlternativesStatus {
	return &v
}

type NullableAlternativesStatus struct {
	value *AlternativesStatus
	isSet bool
}

func (v NullableAlternativesStatus) Get() *AlternativesStatus {
	return v.value
}

func (v *NullableAlternativesStatus) Set(val *AlternativesStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAlternativesStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAlternativesStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlternativesStatus(val *AlternativesStatus) *NullableAlternativesStatus {
	return &NullableAlternativesStatus{value: val, isSet: true}
}

func (v NullableAlternativesStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlternativesStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

