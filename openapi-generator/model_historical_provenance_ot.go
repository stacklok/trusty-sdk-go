/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HistoricalProvenanceOT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricalProvenanceOT{}

// HistoricalProvenanceOT struct for HistoricalProvenanceOT
type HistoricalProvenanceOT struct {
	PeriodType *string `json:"period_type,omitempty"`
	PeriodCount *int32 `json:"period_count,omitempty"`
	HpOverTime map[string]PeriodHistoricalProvenance `json:"hp_over_time,omitempty"`
}

// NewHistoricalProvenanceOT instantiates a new HistoricalProvenanceOT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricalProvenanceOT() *HistoricalProvenanceOT {
	this := HistoricalProvenanceOT{}
	var periodType string = "month"
	this.PeriodType = &periodType
	var periodCount int32 = 12
	this.PeriodCount = &periodCount
	return &this
}

// NewHistoricalProvenanceOTWithDefaults instantiates a new HistoricalProvenanceOT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricalProvenanceOTWithDefaults() *HistoricalProvenanceOT {
	this := HistoricalProvenanceOT{}
	var periodType string = "month"
	this.PeriodType = &periodType
	var periodCount int32 = 12
	this.PeriodCount = &periodCount
	return &this
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *HistoricalProvenanceOT) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalProvenanceOT) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *HistoricalProvenanceOT) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *HistoricalProvenanceOT) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetPeriodCount returns the PeriodCount field value if set, zero value otherwise.
func (o *HistoricalProvenanceOT) GetPeriodCount() int32 {
	if o == nil || IsNil(o.PeriodCount) {
		var ret int32
		return ret
	}
	return *o.PeriodCount
}

// GetPeriodCountOk returns a tuple with the PeriodCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalProvenanceOT) GetPeriodCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodCount) {
		return nil, false
	}
	return o.PeriodCount, true
}

// HasPeriodCount returns a boolean if a field has been set.
func (o *HistoricalProvenanceOT) HasPeriodCount() bool {
	if o != nil && !IsNil(o.PeriodCount) {
		return true
	}

	return false
}

// SetPeriodCount gets a reference to the given int32 and assigns it to the PeriodCount field.
func (o *HistoricalProvenanceOT) SetPeriodCount(v int32) {
	o.PeriodCount = &v
}

// GetHpOverTime returns the HpOverTime field value if set, zero value otherwise.
func (o *HistoricalProvenanceOT) GetHpOverTime() map[string]PeriodHistoricalProvenance {
	if o == nil || IsNil(o.HpOverTime) {
		var ret map[string]PeriodHistoricalProvenance
		return ret
	}
	return o.HpOverTime
}

// GetHpOverTimeOk returns a tuple with the HpOverTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalProvenanceOT) GetHpOverTimeOk() (map[string]PeriodHistoricalProvenance, bool) {
	if o == nil || IsNil(o.HpOverTime) {
		return map[string]PeriodHistoricalProvenance{}, false
	}
	return o.HpOverTime, true
}

// HasHpOverTime returns a boolean if a field has been set.
func (o *HistoricalProvenanceOT) HasHpOverTime() bool {
	if o != nil && !IsNil(o.HpOverTime) {
		return true
	}

	return false
}

// SetHpOverTime gets a reference to the given map[string]PeriodHistoricalProvenance and assigns it to the HpOverTime field.
func (o *HistoricalProvenanceOT) SetHpOverTime(v map[string]PeriodHistoricalProvenance) {
	o.HpOverTime = v
}

func (o HistoricalProvenanceOT) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricalProvenanceOT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PeriodType) {
		toSerialize["period_type"] = o.PeriodType
	}
	if !IsNil(o.PeriodCount) {
		toSerialize["period_count"] = o.PeriodCount
	}
	if !IsNil(o.HpOverTime) {
		toSerialize["hp_over_time"] = o.HpOverTime
	}
	return toSerialize, nil
}

type NullableHistoricalProvenanceOT struct {
	value *HistoricalProvenanceOT
	isSet bool
}

func (v NullableHistoricalProvenanceOT) Get() *HistoricalProvenanceOT {
	return v.value
}

func (v *NullableHistoricalProvenanceOT) Set(val *HistoricalProvenanceOT) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricalProvenanceOT) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricalProvenanceOT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricalProvenanceOT(val *HistoricalProvenanceOT) *NullableHistoricalProvenanceOT {
	return &NullableHistoricalProvenanceOT{value: val, isSet: true}
}

func (v NullableHistoricalProvenanceOT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricalProvenanceOT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


