/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProvenanceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvenanceData{}

// ProvenanceData struct for ProvenanceData
type ProvenanceData struct {
	SourceRepo *string `json:"source_repo,omitempty"`
	Workflow *string `json:"workflow,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	TokenIssuer *string `json:"token_issuer,omitempty"`
	Transparency *string `json:"transparency,omitempty"`
}

// NewProvenanceData instantiates a new ProvenanceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceData() *ProvenanceData {
	this := ProvenanceData{}
	var sourceRepo string = ""
	this.SourceRepo = &sourceRepo
	var workflow string = ""
	this.Workflow = &workflow
	var issuer string = ""
	this.Issuer = &issuer
	var tokenIssuer string = ""
	this.TokenIssuer = &tokenIssuer
	var transparency string = ""
	this.Transparency = &transparency
	return &this
}

// NewProvenanceDataWithDefaults instantiates a new ProvenanceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceDataWithDefaults() *ProvenanceData {
	this := ProvenanceData{}
	var sourceRepo string = ""
	this.SourceRepo = &sourceRepo
	var workflow string = ""
	this.Workflow = &workflow
	var issuer string = ""
	this.Issuer = &issuer
	var tokenIssuer string = ""
	this.TokenIssuer = &tokenIssuer
	var transparency string = ""
	this.Transparency = &transparency
	return &this
}

// GetSourceRepo returns the SourceRepo field value if set, zero value otherwise.
func (o *ProvenanceData) GetSourceRepo() string {
	if o == nil || IsNil(o.SourceRepo) {
		var ret string
		return ret
	}
	return *o.SourceRepo
}

// GetSourceRepoOk returns a tuple with the SourceRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceData) GetSourceRepoOk() (*string, bool) {
	if o == nil || IsNil(o.SourceRepo) {
		return nil, false
	}
	return o.SourceRepo, true
}

// HasSourceRepo returns a boolean if a field has been set.
func (o *ProvenanceData) HasSourceRepo() bool {
	if o != nil && !IsNil(o.SourceRepo) {
		return true
	}

	return false
}

// SetSourceRepo gets a reference to the given string and assigns it to the SourceRepo field.
func (o *ProvenanceData) SetSourceRepo(v string) {
	o.SourceRepo = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *ProvenanceData) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow) {
		var ret string
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceData) GetWorkflowOk() (*string, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *ProvenanceData) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given string and assigns it to the Workflow field.
func (o *ProvenanceData) SetWorkflow(v string) {
	o.Workflow = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *ProvenanceData) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceData) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *ProvenanceData) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *ProvenanceData) SetIssuer(v string) {
	o.Issuer = &v
}

// GetTokenIssuer returns the TokenIssuer field value if set, zero value otherwise.
func (o *ProvenanceData) GetTokenIssuer() string {
	if o == nil || IsNil(o.TokenIssuer) {
		var ret string
		return ret
	}
	return *o.TokenIssuer
}

// GetTokenIssuerOk returns a tuple with the TokenIssuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceData) GetTokenIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.TokenIssuer) {
		return nil, false
	}
	return o.TokenIssuer, true
}

// HasTokenIssuer returns a boolean if a field has been set.
func (o *ProvenanceData) HasTokenIssuer() bool {
	if o != nil && !IsNil(o.TokenIssuer) {
		return true
	}

	return false
}

// SetTokenIssuer gets a reference to the given string and assigns it to the TokenIssuer field.
func (o *ProvenanceData) SetTokenIssuer(v string) {
	o.TokenIssuer = &v
}

// GetTransparency returns the Transparency field value if set, zero value otherwise.
func (o *ProvenanceData) GetTransparency() string {
	if o == nil || IsNil(o.Transparency) {
		var ret string
		return ret
	}
	return *o.Transparency
}

// GetTransparencyOk returns a tuple with the Transparency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceData) GetTransparencyOk() (*string, bool) {
	if o == nil || IsNil(o.Transparency) {
		return nil, false
	}
	return o.Transparency, true
}

// HasTransparency returns a boolean if a field has been set.
func (o *ProvenanceData) HasTransparency() bool {
	if o != nil && !IsNil(o.Transparency) {
		return true
	}

	return false
}

// SetTransparency gets a reference to the given string and assigns it to the Transparency field.
func (o *ProvenanceData) SetTransparency(v string) {
	o.Transparency = &v
}

func (o ProvenanceData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvenanceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceRepo) {
		toSerialize["source_repo"] = o.SourceRepo
	}
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.TokenIssuer) {
		toSerialize["token_issuer"] = o.TokenIssuer
	}
	if !IsNil(o.Transparency) {
		toSerialize["transparency"] = o.Transparency
	}
	return toSerialize, nil
}

type NullableProvenanceData struct {
	value *ProvenanceData
	isSet bool
}

func (v NullableProvenanceData) Get() *ProvenanceData {
	return v.value
}

func (v *NullableProvenanceData) Set(val *ProvenanceData) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceData) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceData(val *ProvenanceData) *NullableProvenanceData {
	return &NullableProvenanceData{value: val, isSet: true}
}

func (v NullableProvenanceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


