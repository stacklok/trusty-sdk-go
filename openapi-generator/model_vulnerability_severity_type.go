/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VulnerabilitySeverityType the model 'VulnerabilitySeverityType'
type VulnerabilitySeverityType string

// List of VulnerabilitySeverityType
const (
	V2 VulnerabilitySeverityType = "CVSS_V2"
	V3 VulnerabilitySeverityType = "CVSS_V3"
	V4 VulnerabilitySeverityType = "CVSS_V4"
)

// All allowed values of VulnerabilitySeverityType enum
var AllowedVulnerabilitySeverityTypeEnumValues = []VulnerabilitySeverityType{
	"CVSS_V2",
	"CVSS_V3",
	"CVSS_V4",
}

func (v *VulnerabilitySeverityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VulnerabilitySeverityType(value)
	for _, existing := range AllowedVulnerabilitySeverityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VulnerabilitySeverityType", value)
}

// NewVulnerabilitySeverityTypeFromValue returns a pointer to a valid VulnerabilitySeverityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVulnerabilitySeverityTypeFromValue(v string) (*VulnerabilitySeverityType, error) {
	ev := VulnerabilitySeverityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VulnerabilitySeverityType: valid values are %v", v, AllowedVulnerabilitySeverityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VulnerabilitySeverityType) IsValid() bool {
	for _, existing := range AllowedVulnerabilitySeverityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VulnerabilitySeverityType value
func (v VulnerabilitySeverityType) Ptr() *VulnerabilitySeverityType {
	return &v
}

type NullableVulnerabilitySeverityType struct {
	value *VulnerabilitySeverityType
	isSet bool
}

func (v NullableVulnerabilitySeverityType) Get() *VulnerabilitySeverityType {
	return v.value
}

func (v *NullableVulnerabilitySeverityType) Set(val *VulnerabilitySeverityType) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilitySeverityType) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilitySeverityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilitySeverityType(val *VulnerabilitySeverityType) *NullableVulnerabilitySeverityType {
	return &NullableVulnerabilitySeverityType{value: val, isSet: true}
}

func (v NullableVulnerabilitySeverityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilitySeverityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

