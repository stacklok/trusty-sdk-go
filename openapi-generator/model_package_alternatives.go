/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PackageAlternatives type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageAlternatives{}

// PackageAlternatives struct for PackageAlternatives
type PackageAlternatives struct {
	Status *AlternativesStatus `json:"status,omitempty"`
	Packages []PackageBasicInfo `json:"packages,omitempty"`
}

// NewPackageAlternatives instantiates a new PackageAlternatives object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageAlternatives() *PackageAlternatives {
	this := PackageAlternatives{}
	return &this
}

// NewPackageAlternativesWithDefaults instantiates a new PackageAlternatives object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageAlternativesWithDefaults() *PackageAlternatives {
	this := PackageAlternatives{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PackageAlternatives) GetStatus() AlternativesStatus {
	if o == nil || IsNil(o.Status) {
		var ret AlternativesStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageAlternatives) GetStatusOk() (*AlternativesStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PackageAlternatives) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AlternativesStatus and assigns it to the Status field.
func (o *PackageAlternatives) SetStatus(v AlternativesStatus) {
	o.Status = &v
}

// GetPackages returns the Packages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageAlternatives) GetPackages() []PackageBasicInfo {
	if o == nil {
		var ret []PackageBasicInfo
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageAlternatives) GetPackagesOk() ([]PackageBasicInfo, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *PackageAlternatives) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []PackageBasicInfo and assigns it to the Packages field.
func (o *PackageAlternatives) SetPackages(v []PackageBasicInfo) {
	o.Packages = v
}

func (o PackageAlternatives) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageAlternatives) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Packages != nil {
		toSerialize["packages"] = o.Packages
	}
	return toSerialize, nil
}

type NullablePackageAlternatives struct {
	value *PackageAlternatives
	isSet bool
}

func (v NullablePackageAlternatives) Get() *PackageAlternatives {
	return v.value
}

func (v *NullablePackageAlternatives) Set(val *PackageAlternatives) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageAlternatives) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageAlternatives) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageAlternatives(val *PackageAlternatives) *NullablePackageAlternatives {
	return &NullablePackageAlternatives{value: val, isSet: true}
}

func (v NullablePackageAlternatives) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageAlternatives) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


