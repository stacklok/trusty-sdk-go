/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VulnerabilitySeverity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilitySeverity{}

// VulnerabilitySeverity struct for VulnerabilitySeverity
type VulnerabilitySeverity struct {
	SeverityType VulnerabilitySeverityType `json:"severity_type"`
	SeverityLevel VulnerabilitySeverityLevel `json:"severity_level"`
	Score float32 `json:"score"`
}

type _VulnerabilitySeverity VulnerabilitySeverity

// NewVulnerabilitySeverity instantiates a new VulnerabilitySeverity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilitySeverity(severityType VulnerabilitySeverityType, severityLevel VulnerabilitySeverityLevel, score float32) *VulnerabilitySeverity {
	this := VulnerabilitySeverity{}
	this.SeverityType = severityType
	this.SeverityLevel = severityLevel
	this.Score = score
	return &this
}

// NewVulnerabilitySeverityWithDefaults instantiates a new VulnerabilitySeverity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilitySeverityWithDefaults() *VulnerabilitySeverity {
	this := VulnerabilitySeverity{}
	return &this
}

// GetSeverityType returns the SeverityType field value
func (o *VulnerabilitySeverity) GetSeverityType() VulnerabilitySeverityType {
	if o == nil {
		var ret VulnerabilitySeverityType
		return ret
	}

	return o.SeverityType
}

// GetSeverityTypeOk returns a tuple with the SeverityType field value
// and a boolean to check if the value has been set.
func (o *VulnerabilitySeverity) GetSeverityTypeOk() (*VulnerabilitySeverityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeverityType, true
}

// SetSeverityType sets field value
func (o *VulnerabilitySeverity) SetSeverityType(v VulnerabilitySeverityType) {
	o.SeverityType = v
}

// GetSeverityLevel returns the SeverityLevel field value
func (o *VulnerabilitySeverity) GetSeverityLevel() VulnerabilitySeverityLevel {
	if o == nil {
		var ret VulnerabilitySeverityLevel
		return ret
	}

	return o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value
// and a boolean to check if the value has been set.
func (o *VulnerabilitySeverity) GetSeverityLevelOk() (*VulnerabilitySeverityLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeverityLevel, true
}

// SetSeverityLevel sets field value
func (o *VulnerabilitySeverity) SetSeverityLevel(v VulnerabilitySeverityLevel) {
	o.SeverityLevel = v
}

// GetScore returns the Score field value
func (o *VulnerabilitySeverity) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *VulnerabilitySeverity) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *VulnerabilitySeverity) SetScore(v float32) {
	o.Score = v
}

func (o VulnerabilitySeverity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilitySeverity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["severity_type"] = o.SeverityType
	toSerialize["severity_level"] = o.SeverityLevel
	toSerialize["score"] = o.Score
	return toSerialize, nil
}

func (o *VulnerabilitySeverity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"severity_type",
		"severity_level",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerabilitySeverity := _VulnerabilitySeverity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVulnerabilitySeverity)

	if err != nil {
		return err
	}

	*o = VulnerabilitySeverity(varVulnerabilitySeverity)

	return err
}

type NullableVulnerabilitySeverity struct {
	value *VulnerabilitySeverity
	isSet bool
}

func (v NullableVulnerabilitySeverity) Get() *VulnerabilitySeverity {
	return v.value
}

func (v *NullableVulnerabilitySeverity) Set(val *VulnerabilitySeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilitySeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilitySeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilitySeverity(val *VulnerabilitySeverity) *NullableVulnerabilitySeverity {
	return &NullableVulnerabilitySeverity{value: val, isSet: true}
}

func (v NullableVulnerabilitySeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilitySeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


