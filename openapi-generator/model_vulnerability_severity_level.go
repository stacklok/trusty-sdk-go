/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VulnerabilitySeverityLevel the model 'VulnerabilitySeverityLevel'
type VulnerabilitySeverityLevel string

// List of VulnerabilitySeverityLevel
const (
	NONE VulnerabilitySeverityLevel = "None"
	LOW VulnerabilitySeverityLevel = "Low"
	MEDIUM VulnerabilitySeverityLevel = "Medium"
	HIGH VulnerabilitySeverityLevel = "High"
	CRITICAL VulnerabilitySeverityLevel = "Critical"
)

// All allowed values of VulnerabilitySeverityLevel enum
var AllowedVulnerabilitySeverityLevelEnumValues = []VulnerabilitySeverityLevel{
	"None",
	"Low",
	"Medium",
	"High",
	"Critical",
}

func (v *VulnerabilitySeverityLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VulnerabilitySeverityLevel(value)
	for _, existing := range AllowedVulnerabilitySeverityLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VulnerabilitySeverityLevel", value)
}

// NewVulnerabilitySeverityLevelFromValue returns a pointer to a valid VulnerabilitySeverityLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVulnerabilitySeverityLevelFromValue(v string) (*VulnerabilitySeverityLevel, error) {
	ev := VulnerabilitySeverityLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VulnerabilitySeverityLevel: valid values are %v", v, AllowedVulnerabilitySeverityLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VulnerabilitySeverityLevel) IsValid() bool {
	for _, existing := range AllowedVulnerabilitySeverityLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VulnerabilitySeverityLevel value
func (v VulnerabilitySeverityLevel) Ptr() *VulnerabilitySeverityLevel {
	return &v
}

type NullableVulnerabilitySeverityLevel struct {
	value *VulnerabilitySeverityLevel
	isSet bool
}

func (v NullableVulnerabilitySeverityLevel) Get() *VulnerabilitySeverityLevel {
	return v.value
}

func (v *NullableVulnerabilitySeverityLevel) Set(val *VulnerabilitySeverityLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilitySeverityLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilitySeverityLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilitySeverityLevel(val *VulnerabilitySeverityLevel) *NullableVulnerabilitySeverityLevel {
	return &NullableVulnerabilitySeverityLevel{value: val, isSet: true}
}

func (v NullableVulnerabilitySeverityLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilitySeverityLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

