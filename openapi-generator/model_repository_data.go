/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RepositoryData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryData{}

// RepositoryData struct for RepositoryData
type RepositoryData struct {
	Id string `json:"id"`
	Name NullableString `json:"name,omitempty"`
	Url NullableString `json:"url,omitempty"`
	StargazersCount NullableInt32 `json:"stargazers_count,omitempty"`
	WatchersCount NullableInt32 `json:"watchers_count,omitempty"`
	ForksCount NullableInt32 `json:"forks_count,omitempty"`
	OpenIssuesCount NullableInt32 `json:"open_issues_count,omitempty"`
	ContributorCount NullableInt32 `json:"contributor_count,omitempty"`
	Scores *Scores1 `json:"scores,omitempty"`
	LastUpdate NullableTime `json:"last_update,omitempty"`
}

type _RepositoryData RepositoryData

// NewRepositoryData instantiates a new RepositoryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryData(id string) *RepositoryData {
	this := RepositoryData{}
	this.Id = id
	var scores Scores1 = {}
	this.Scores = &scores
	return &this
}

// NewRepositoryDataWithDefaults instantiates a new RepositoryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryDataWithDefaults() *RepositoryData {
	this := RepositoryData{}
	var scores Scores1 = {}
	this.Scores = &scores
	return &this
}

// GetId returns the Id field value
func (o *RepositoryData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RepositoryData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RepositoryData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RepositoryData) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RepositoryData) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RepositoryData) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RepositoryData) UnsetName() {
	o.Name.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *RepositoryData) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *RepositoryData) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *RepositoryData) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *RepositoryData) UnsetUrl() {
	o.Url.Unset()
}

// GetStargazersCount returns the StargazersCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetStargazersCount() int32 {
	if o == nil || IsNil(o.StargazersCount.Get()) {
		var ret int32
		return ret
	}
	return *o.StargazersCount.Get()
}

// GetStargazersCountOk returns a tuple with the StargazersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetStargazersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StargazersCount.Get(), o.StargazersCount.IsSet()
}

// HasStargazersCount returns a boolean if a field has been set.
func (o *RepositoryData) HasStargazersCount() bool {
	if o != nil && o.StargazersCount.IsSet() {
		return true
	}

	return false
}

// SetStargazersCount gets a reference to the given NullableInt32 and assigns it to the StargazersCount field.
func (o *RepositoryData) SetStargazersCount(v int32) {
	o.StargazersCount.Set(&v)
}
// SetStargazersCountNil sets the value for StargazersCount to be an explicit nil
func (o *RepositoryData) SetStargazersCountNil() {
	o.StargazersCount.Set(nil)
}

// UnsetStargazersCount ensures that no value is present for StargazersCount, not even an explicit nil
func (o *RepositoryData) UnsetStargazersCount() {
	o.StargazersCount.Unset()
}

// GetWatchersCount returns the WatchersCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetWatchersCount() int32 {
	if o == nil || IsNil(o.WatchersCount.Get()) {
		var ret int32
		return ret
	}
	return *o.WatchersCount.Get()
}

// GetWatchersCountOk returns a tuple with the WatchersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetWatchersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WatchersCount.Get(), o.WatchersCount.IsSet()
}

// HasWatchersCount returns a boolean if a field has been set.
func (o *RepositoryData) HasWatchersCount() bool {
	if o != nil && o.WatchersCount.IsSet() {
		return true
	}

	return false
}

// SetWatchersCount gets a reference to the given NullableInt32 and assigns it to the WatchersCount field.
func (o *RepositoryData) SetWatchersCount(v int32) {
	o.WatchersCount.Set(&v)
}
// SetWatchersCountNil sets the value for WatchersCount to be an explicit nil
func (o *RepositoryData) SetWatchersCountNil() {
	o.WatchersCount.Set(nil)
}

// UnsetWatchersCount ensures that no value is present for WatchersCount, not even an explicit nil
func (o *RepositoryData) UnsetWatchersCount() {
	o.WatchersCount.Unset()
}

// GetForksCount returns the ForksCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetForksCount() int32 {
	if o == nil || IsNil(o.ForksCount.Get()) {
		var ret int32
		return ret
	}
	return *o.ForksCount.Get()
}

// GetForksCountOk returns a tuple with the ForksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetForksCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForksCount.Get(), o.ForksCount.IsSet()
}

// HasForksCount returns a boolean if a field has been set.
func (o *RepositoryData) HasForksCount() bool {
	if o != nil && o.ForksCount.IsSet() {
		return true
	}

	return false
}

// SetForksCount gets a reference to the given NullableInt32 and assigns it to the ForksCount field.
func (o *RepositoryData) SetForksCount(v int32) {
	o.ForksCount.Set(&v)
}
// SetForksCountNil sets the value for ForksCount to be an explicit nil
func (o *RepositoryData) SetForksCountNil() {
	o.ForksCount.Set(nil)
}

// UnsetForksCount ensures that no value is present for ForksCount, not even an explicit nil
func (o *RepositoryData) UnsetForksCount() {
	o.ForksCount.Unset()
}

// GetOpenIssuesCount returns the OpenIssuesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetOpenIssuesCount() int32 {
	if o == nil || IsNil(o.OpenIssuesCount.Get()) {
		var ret int32
		return ret
	}
	return *o.OpenIssuesCount.Get()
}

// GetOpenIssuesCountOk returns a tuple with the OpenIssuesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetOpenIssuesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenIssuesCount.Get(), o.OpenIssuesCount.IsSet()
}

// HasOpenIssuesCount returns a boolean if a field has been set.
func (o *RepositoryData) HasOpenIssuesCount() bool {
	if o != nil && o.OpenIssuesCount.IsSet() {
		return true
	}

	return false
}

// SetOpenIssuesCount gets a reference to the given NullableInt32 and assigns it to the OpenIssuesCount field.
func (o *RepositoryData) SetOpenIssuesCount(v int32) {
	o.OpenIssuesCount.Set(&v)
}
// SetOpenIssuesCountNil sets the value for OpenIssuesCount to be an explicit nil
func (o *RepositoryData) SetOpenIssuesCountNil() {
	o.OpenIssuesCount.Set(nil)
}

// UnsetOpenIssuesCount ensures that no value is present for OpenIssuesCount, not even an explicit nil
func (o *RepositoryData) UnsetOpenIssuesCount() {
	o.OpenIssuesCount.Unset()
}

// GetContributorCount returns the ContributorCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetContributorCount() int32 {
	if o == nil || IsNil(o.ContributorCount.Get()) {
		var ret int32
		return ret
	}
	return *o.ContributorCount.Get()
}

// GetContributorCountOk returns a tuple with the ContributorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetContributorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContributorCount.Get(), o.ContributorCount.IsSet()
}

// HasContributorCount returns a boolean if a field has been set.
func (o *RepositoryData) HasContributorCount() bool {
	if o != nil && o.ContributorCount.IsSet() {
		return true
	}

	return false
}

// SetContributorCount gets a reference to the given NullableInt32 and assigns it to the ContributorCount field.
func (o *RepositoryData) SetContributorCount(v int32) {
	o.ContributorCount.Set(&v)
}
// SetContributorCountNil sets the value for ContributorCount to be an explicit nil
func (o *RepositoryData) SetContributorCountNil() {
	o.ContributorCount.Set(nil)
}

// UnsetContributorCount ensures that no value is present for ContributorCount, not even an explicit nil
func (o *RepositoryData) UnsetContributorCount() {
	o.ContributorCount.Unset()
}

// GetScores returns the Scores field value if set, zero value otherwise.
func (o *RepositoryData) GetScores() Scores1 {
	if o == nil || IsNil(o.Scores) {
		var ret Scores1
		return ret
	}
	return *o.Scores
}

// GetScoresOk returns a tuple with the Scores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryData) GetScoresOk() (*Scores1, bool) {
	if o == nil || IsNil(o.Scores) {
		return nil, false
	}
	return o.Scores, true
}

// HasScores returns a boolean if a field has been set.
func (o *RepositoryData) HasScores() bool {
	if o != nil && !IsNil(o.Scores) {
		return true
	}

	return false
}

// SetScores gets a reference to the given Scores1 and assigns it to the Scores field.
func (o *RepositoryData) SetScores(v Scores1) {
	o.Scores = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RepositoryData) GetLastUpdate() time.Time {
	if o == nil || IsNil(o.LastUpdate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate.Get()
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryData) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdate.Get(), o.LastUpdate.IsSet()
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *RepositoryData) HasLastUpdate() bool {
	if o != nil && o.LastUpdate.IsSet() {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given NullableTime and assigns it to the LastUpdate field.
func (o *RepositoryData) SetLastUpdate(v time.Time) {
	o.LastUpdate.Set(&v)
}
// SetLastUpdateNil sets the value for LastUpdate to be an explicit nil
func (o *RepositoryData) SetLastUpdateNil() {
	o.LastUpdate.Set(nil)
}

// UnsetLastUpdate ensures that no value is present for LastUpdate, not even an explicit nil
func (o *RepositoryData) UnsetLastUpdate() {
	o.LastUpdate.Unset()
}

func (o RepositoryData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.StargazersCount.IsSet() {
		toSerialize["stargazers_count"] = o.StargazersCount.Get()
	}
	if o.WatchersCount.IsSet() {
		toSerialize["watchers_count"] = o.WatchersCount.Get()
	}
	if o.ForksCount.IsSet() {
		toSerialize["forks_count"] = o.ForksCount.Get()
	}
	if o.OpenIssuesCount.IsSet() {
		toSerialize["open_issues_count"] = o.OpenIssuesCount.Get()
	}
	if o.ContributorCount.IsSet() {
		toSerialize["contributor_count"] = o.ContributorCount.Get()
	}
	if !IsNil(o.Scores) {
		toSerialize["scores"] = o.Scores
	}
	if o.LastUpdate.IsSet() {
		toSerialize["last_update"] = o.LastUpdate.Get()
	}
	return toSerialize, nil
}

func (o *RepositoryData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryData := _RepositoryData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRepositoryData)

	if err != nil {
		return err
	}

	*o = RepositoryData(varRepositoryData)

	return err
}

type NullableRepositoryData struct {
	value *RepositoryData
	isSet bool
}

func (v NullableRepositoryData) Get() *RepositoryData {
	return v.value
}

func (v *NullableRepositoryData) Set(val *RepositoryData) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryData) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryData(val *RepositoryData) *NullableRepositoryData {
	return &NullableRepositoryData{value: val, isSet: true}
}

func (v NullableRepositoryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


