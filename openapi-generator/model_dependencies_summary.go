/*
Trusty API

Trusty API

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DependenciesSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependenciesSummary{}

// DependenciesSummary struct for DependenciesSummary
type DependenciesSummary struct {
	Total *int32 `json:"total,omitempty"`
	MaxScore *float32 `json:"max_score,omitempty"`
	MinScore *float32 `json:"min_score,omitempty"`
	MeanScore *float32 `json:"mean_score,omitempty"`
	DeclaredLicenses map[string]int32 `json:"declared_licenses,omitempty"`
	Depths map[string]int32 `json:"depths,omitempty"`
	VulnSeverity map[string]int32 `json:"vuln_severity,omitempty"`
}

// NewDependenciesSummary instantiates a new DependenciesSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependenciesSummary() *DependenciesSummary {
	this := DependenciesSummary{}
	var total int32 = 0
	this.Total = &total
	var maxScore float32 = 0.0
	this.MaxScore = &maxScore
	var minScore float32 = 0.0
	this.MinScore = &minScore
	var meanScore float32 = 0.0
	this.MeanScore = &meanScore
	return &this
}

// NewDependenciesSummaryWithDefaults instantiates a new DependenciesSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependenciesSummaryWithDefaults() *DependenciesSummary {
	this := DependenciesSummary{}
	var total int32 = 0
	this.Total = &total
	var maxScore float32 = 0.0
	this.MaxScore = &maxScore
	var minScore float32 = 0.0
	this.MinScore = &minScore
	var meanScore float32 = 0.0
	this.MeanScore = &meanScore
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DependenciesSummary) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DependenciesSummary) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *DependenciesSummary) SetTotal(v int32) {
	o.Total = &v
}

// GetMaxScore returns the MaxScore field value if set, zero value otherwise.
func (o *DependenciesSummary) GetMaxScore() float32 {
	if o == nil || IsNil(o.MaxScore) {
		var ret float32
		return ret
	}
	return *o.MaxScore
}

// GetMaxScoreOk returns a tuple with the MaxScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetMaxScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxScore) {
		return nil, false
	}
	return o.MaxScore, true
}

// HasMaxScore returns a boolean if a field has been set.
func (o *DependenciesSummary) HasMaxScore() bool {
	if o != nil && !IsNil(o.MaxScore) {
		return true
	}

	return false
}

// SetMaxScore gets a reference to the given float32 and assigns it to the MaxScore field.
func (o *DependenciesSummary) SetMaxScore(v float32) {
	o.MaxScore = &v
}

// GetMinScore returns the MinScore field value if set, zero value otherwise.
func (o *DependenciesSummary) GetMinScore() float32 {
	if o == nil || IsNil(o.MinScore) {
		var ret float32
		return ret
	}
	return *o.MinScore
}

// GetMinScoreOk returns a tuple with the MinScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetMinScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.MinScore) {
		return nil, false
	}
	return o.MinScore, true
}

// HasMinScore returns a boolean if a field has been set.
func (o *DependenciesSummary) HasMinScore() bool {
	if o != nil && !IsNil(o.MinScore) {
		return true
	}

	return false
}

// SetMinScore gets a reference to the given float32 and assigns it to the MinScore field.
func (o *DependenciesSummary) SetMinScore(v float32) {
	o.MinScore = &v
}

// GetMeanScore returns the MeanScore field value if set, zero value otherwise.
func (o *DependenciesSummary) GetMeanScore() float32 {
	if o == nil || IsNil(o.MeanScore) {
		var ret float32
		return ret
	}
	return *o.MeanScore
}

// GetMeanScoreOk returns a tuple with the MeanScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetMeanScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.MeanScore) {
		return nil, false
	}
	return o.MeanScore, true
}

// HasMeanScore returns a boolean if a field has been set.
func (o *DependenciesSummary) HasMeanScore() bool {
	if o != nil && !IsNil(o.MeanScore) {
		return true
	}

	return false
}

// SetMeanScore gets a reference to the given float32 and assigns it to the MeanScore field.
func (o *DependenciesSummary) SetMeanScore(v float32) {
	o.MeanScore = &v
}

// GetDeclaredLicenses returns the DeclaredLicenses field value if set, zero value otherwise.
func (o *DependenciesSummary) GetDeclaredLicenses() map[string]int32 {
	if o == nil || IsNil(o.DeclaredLicenses) {
		var ret map[string]int32
		return ret
	}
	return o.DeclaredLicenses
}

// GetDeclaredLicensesOk returns a tuple with the DeclaredLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetDeclaredLicensesOk() (map[string]int32, bool) {
	if o == nil || IsNil(o.DeclaredLicenses) {
		return map[string]int32{}, false
	}
	return o.DeclaredLicenses, true
}

// HasDeclaredLicenses returns a boolean if a field has been set.
func (o *DependenciesSummary) HasDeclaredLicenses() bool {
	if o != nil && !IsNil(o.DeclaredLicenses) {
		return true
	}

	return false
}

// SetDeclaredLicenses gets a reference to the given map[string]int32 and assigns it to the DeclaredLicenses field.
func (o *DependenciesSummary) SetDeclaredLicenses(v map[string]int32) {
	o.DeclaredLicenses = v
}

// GetDepths returns the Depths field value if set, zero value otherwise.
func (o *DependenciesSummary) GetDepths() map[string]int32 {
	if o == nil || IsNil(o.Depths) {
		var ret map[string]int32
		return ret
	}
	return o.Depths
}

// GetDepthsOk returns a tuple with the Depths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetDepthsOk() (map[string]int32, bool) {
	if o == nil || IsNil(o.Depths) {
		return map[string]int32{}, false
	}
	return o.Depths, true
}

// HasDepths returns a boolean if a field has been set.
func (o *DependenciesSummary) HasDepths() bool {
	if o != nil && !IsNil(o.Depths) {
		return true
	}

	return false
}

// SetDepths gets a reference to the given map[string]int32 and assigns it to the Depths field.
func (o *DependenciesSummary) SetDepths(v map[string]int32) {
	o.Depths = v
}

// GetVulnSeverity returns the VulnSeverity field value if set, zero value otherwise.
func (o *DependenciesSummary) GetVulnSeverity() map[string]int32 {
	if o == nil || IsNil(o.VulnSeverity) {
		var ret map[string]int32
		return ret
	}
	return o.VulnSeverity
}

// GetVulnSeverityOk returns a tuple with the VulnSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependenciesSummary) GetVulnSeverityOk() (map[string]int32, bool) {
	if o == nil || IsNil(o.VulnSeverity) {
		return map[string]int32{}, false
	}
	return o.VulnSeverity, true
}

// HasVulnSeverity returns a boolean if a field has been set.
func (o *DependenciesSummary) HasVulnSeverity() bool {
	if o != nil && !IsNil(o.VulnSeverity) {
		return true
	}

	return false
}

// SetVulnSeverity gets a reference to the given map[string]int32 and assigns it to the VulnSeverity field.
func (o *DependenciesSummary) SetVulnSeverity(v map[string]int32) {
	o.VulnSeverity = v
}

func (o DependenciesSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependenciesSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.MaxScore) {
		toSerialize["max_score"] = o.MaxScore
	}
	if !IsNil(o.MinScore) {
		toSerialize["min_score"] = o.MinScore
	}
	if !IsNil(o.MeanScore) {
		toSerialize["mean_score"] = o.MeanScore
	}
	if !IsNil(o.DeclaredLicenses) {
		toSerialize["declared_licenses"] = o.DeclaredLicenses
	}
	if !IsNil(o.Depths) {
		toSerialize["depths"] = o.Depths
	}
	if !IsNil(o.VulnSeverity) {
		toSerialize["vuln_severity"] = o.VulnSeverity
	}
	return toSerialize, nil
}

type NullableDependenciesSummary struct {
	value *DependenciesSummary
	isSet bool
}

func (v NullableDependenciesSummary) Get() *DependenciesSummary {
	return v.value
}

func (v *NullableDependenciesSummary) Set(val *DependenciesSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDependenciesSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDependenciesSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependenciesSummary(val *DependenciesSummary) *NullableDependenciesSummary {
	return &NullableDependenciesSummary{value: val, isSet: true}
}

func (v NullableDependenciesSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependenciesSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


