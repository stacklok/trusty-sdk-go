// Package oapiCodegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapiCodegen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HTTPBearerScopes = "HTTPBearer.Scopes"
)

// Defines values for AlternativesStatus.
const (
	AlternativesStatusComplete   AlternativesStatus = "complete"
	AlternativesStatusInProgress AlternativesStatus = "in_progress"
)

// Defines values for PackageStatus.
const (
	PackageStatusComplete   PackageStatus = "complete"
	PackageStatusDeleted    PackageStatus = "deleted"
	PackageStatusFailed     PackageStatus = "failed"
	PackageStatusInitial    PackageStatus = "initial"
	PackageStatusNeighbours PackageStatus = "neighbours"
	PackageStatusPending    PackageStatus = "pending"
	PackageStatusPropagate  PackageStatus = "propagate"
	PackageStatusScoring    PackageStatus = "scoring"
)

// Defines values for PackageType.
const (
	Crates PackageType = "crates"
	Go     PackageType = "go"
	Maven  PackageType = "maven"
	Npm    PackageType = "npm"
	Pypi   PackageType = "pypi"
)

// Defines values for SummaryAnnotationStatus.
const (
	Complete   SummaryAnnotationStatus = "complete"
	InProgress SummaryAnnotationStatus = "in_progress"
)

// Defines values for VulnerabilitySeverityLevel.
const (
	Critical VulnerabilitySeverityLevel = "Critical"
	High     VulnerabilitySeverityLevel = "High"
	Low      VulnerabilitySeverityLevel = "Low"
	Medium   VulnerabilitySeverityLevel = "Medium"
	None     VulnerabilitySeverityLevel = "None"
)

// Defines values for VulnerabilitySeverityType.
const (
	CVSSV2 VulnerabilitySeverityType = "CVSS_V2"
	CVSSV3 VulnerabilitySeverityType = "CVSS_V3"
	CVSSV4 VulnerabilitySeverityType = "CVSS_V4"
)

// AlternativesStatus defines model for AlternativesStatus.
type AlternativesStatus string

// ContributorResult defines model for ContributorResult.
type ContributorResult struct {
	ContributorData  *PackageContributorData             `json:"contributor_data,omitempty"`
	ContributorRepos *ContributorResult_ContributorRepos `json:"contributor_repos,omitempty"`
}

// ContributorResultContributorRepos0 defines model for .
type ContributorResultContributorRepos0 = []RepositoryData

// ContributorResult_ContributorRepos defines model for ContributorResult.ContributorRepos.
type ContributorResult_ContributorRepos struct {
	union json.RawMessage
}

// DependenciesSummary defines model for DependenciesSummary.
type DependenciesSummary struct {
	DeclaredLicenses *map[string]int `json:"declared_licenses,omitempty"`
	Depths           *map[string]int `json:"depths,omitempty"`
	MaxScore         *float32        `json:"max_score,omitempty"`
	MeanScore        *float32        `json:"mean_score,omitempty"`
	MinScore         *float32        `json:"min_score,omitempty"`
	Total            *int            `json:"total,omitempty"`
	VulnSeverity     *map[string]int `json:"vuln_severity,omitempty"`
}

// Dependency defines model for Dependency.
type Dependency struct {
	ActivityScore   *Dependency_ActivityScore   `json:"activity_score,omitempty"`
	DeclaredLicense *Dependency_DeclaredLicense `json:"declared_license,omitempty"`
	Depths          []int                       `json:"depths"`
	MalOsvId        *Dependency_MalOsvId        `json:"mal_osv_id,omitempty"`
	Name            string                      `json:"name"`
	PackageId       openapi_types.UUID          `json:"package_id"`
	Parents         []openapi_types.UUID        `json:"parents"`
	Paths           *[][]openapi_types.UUID     `json:"paths,omitempty"`
	Type            string                      `json:"type"`
	VersionId       openapi_types.UUID          `json:"version_id"`
	VersionName     string                      `json:"version_name"`
	VulnSeverity    *Dependency_VulnSeverity    `json:"vuln_severity,omitempty"`
}

// DependencyActivityScore0 defines model for .
type DependencyActivityScore0 = float32

// Dependency_ActivityScore defines model for Dependency.ActivityScore.
type Dependency_ActivityScore struct {
	union json.RawMessage
}

// DependencyDeclaredLicense0 defines model for .
type DependencyDeclaredLicense0 = []string

// Dependency_DeclaredLicense defines model for Dependency.DeclaredLicense.
type Dependency_DeclaredLicense struct {
	union json.RawMessage
}

// DependencyMalOsvId0 defines model for .
type DependencyMalOsvId0 = []string

// Dependency_MalOsvId defines model for Dependency.MalOsvId.
type Dependency_MalOsvId struct {
	union json.RawMessage
}

// DependencyVulnSeverity0 defines model for .
type DependencyVulnSeverity0 = []string

// DependencyVulnSeverity1 defines model for .
type DependencyVulnSeverity1 = string

// Dependency_VulnSeverity defines model for Dependency.VulnSeverity.
type Dependency_VulnSeverity struct {
	union json.RawMessage
}

// DependencyResponse defines model for DependencyResponse.
type DependencyResponse struct {
	Context      *DependencyResponse_Context `json:"@context,omitempty"`
	Dependencies []Dependency                `json:"dependencies"`
	Summary      DependenciesSummary         `json:"summary"`
}

// DependencyResponseContext0 defines model for .
type DependencyResponseContext0 map[string]string

// DependencyResponse_Context defines model for DependencyResponse.Context.
type DependencyResponse_Context struct {
	union json.RawMessage
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HistoricalProvenance [Historical provenance](provenance.md#historical-provenance-hp)
// This contains the number of `tags` in the repo, the number of `versions`
// of the package, a count of the `common` tags and the ratio of tags to common
// as `overlap`.
type HistoricalProvenance struct {
	Common   *float32                       `json:"common,omitempty"`
	OverTime *HistoricalProvenance_OverTime `json:"over_time,omitempty"`
	Overlap  *float32                       `json:"overlap,omitempty"`
	Tags     *float32                       `json:"tags,omitempty"`
	Versions *float32                       `json:"versions,omitempty"`
}

// HistoricalProvenanceOverTime1 defines model for .
type HistoricalProvenanceOverTime1 = map[string]interface{}

// HistoricalProvenance_OverTime defines model for HistoricalProvenance.OverTime.
type HistoricalProvenance_OverTime struct {
	union json.RawMessage
}

// HistoricalProvenanceOT defines model for HistoricalProvenanceOT.
type HistoricalProvenanceOT struct {
	HpOverTime  *map[string]PeriodHistoricalProvenance `json:"hp_over_time,omitempty"`
	PeriodCount *int                                   `json:"period_count,omitempty"`
	PeriodType  *string                                `json:"period_type,omitempty"`
}

// License All the licence information about a package.
type License struct {
	Claims  *[]LicenseClaim  `json:"claims,omitempty"`
	License *License_License `json:"license,omitempty"`
}

// LicenseLicense0 defines model for .
type LicenseLicense0 = string

// License_License defines model for License.License.
type License_License struct {
	union json.RawMessage
}

// LicenseClaim A claim about a license.
type LicenseClaim struct {
	Claim       *LicenseClaim_Claim       `json:"claim,omitempty"`
	Content     *LicenseClaim_Content     `json:"content,omitempty"`
	Description *LicenseClaim_Description `json:"description,omitempty"`
	Id          *openapi_types.UUID       `json:"id,omitempty"`
	Licenses    *[]string                 `json:"licenses,omitempty"`
	OwnerId     *openapi_types.UUID       `json:"owner_id,omitempty"`
	Source      *LicenseClaim_Source      `json:"source,omitempty"`
	Url         *LicenseClaim_Url         `json:"url,omitempty"`
}

// LicenseClaimClaim0 defines model for .
type LicenseClaimClaim0 = string

// LicenseClaim_Claim defines model for LicenseClaim.Claim.
type LicenseClaim_Claim struct {
	union json.RawMessage
}

// LicenseClaimContent0 defines model for .
type LicenseClaimContent0 = string

// LicenseClaim_Content defines model for LicenseClaim.Content.
type LicenseClaim_Content struct {
	union json.RawMessage
}

// LicenseClaimDescription0 defines model for .
type LicenseClaimDescription0 = string

// LicenseClaim_Description defines model for LicenseClaim.Description.
type LicenseClaim_Description struct {
	union json.RawMessage
}

// LicenseClaimSource0 defines model for .
type LicenseClaimSource0 = string

// LicenseClaim_Source defines model for LicenseClaim.Source.
type LicenseClaim_Source struct {
	union json.RawMessage
}

// LicenseClaimUrl0 defines model for .
type LicenseClaimUrl0 = string

// LicenseClaim_Url defines model for LicenseClaim.Url.
type LicenseClaim_Url struct {
	union json.RawMessage
}

// PackageAlternatives defines model for PackageAlternatives.
type PackageAlternatives struct {
	Packages *PackageAlternatives_Packages `json:"packages,omitempty"`
	Status   *AlternativesStatus           `json:"status,omitempty"`
}

// PackageAlternativesPackages0 defines model for .
type PackageAlternativesPackages0 = []PackageBasicInfo

// PackageAlternatives_Packages defines model for PackageAlternatives.Packages.
type PackageAlternatives_Packages struct {
	union json.RawMessage
}

// PackageAnnotation This represents a package annotation.
type PackageAnnotation struct {
	Description *interface{}             `json:"description,omitempty"`
	Score       *PackageAnnotation_Score `json:"score,omitempty"`
	UpdatedAt   time.Time                `json:"updated_at"`
}

// PackageAnnotationScore0 defines model for .
type PackageAnnotationScore0 = float32

// PackageAnnotation_Score defines model for PackageAnnotation.Score.
type PackageAnnotation_Score struct {
	union json.RawMessage
}

// PackageBasicInfo This represents the basic information about a package.
type PackageBasicInfo struct {
	Id              openapi_types.UUID                `json:"id"`
	IsMalicious     *bool                             `json:"is_malicious,omitempty"`
	PackageName     string                            `json:"package_name"`
	PackageType     PackageType                       `json:"package_type"`
	PackageVersion  PackageBasicInfo_PackageVersion   `json:"package_version"`
	Provenance      *PackageBasicInfo_Provenance      `json:"provenance,omitempty"`
	RepoDescription *PackageBasicInfo_RepoDescription `json:"repo_description,omitempty"`
	Score           *PackageBasicInfo_Score           `json:"score,omitempty"`
}

// PackageBasicInfoPackageVersion0 defines model for .
type PackageBasicInfoPackageVersion0 = string

// PackageBasicInfo_PackageVersion defines model for PackageBasicInfo.PackageVersion.
type PackageBasicInfo_PackageVersion struct {
	union json.RawMessage
}

// PackageBasicInfoProvenance1 defines model for .
type PackageBasicInfoProvenance1 = map[string]interface{}

// PackageBasicInfo_Provenance defines model for PackageBasicInfo.Provenance.
type PackageBasicInfo_Provenance struct {
	union json.RawMessage
}

// PackageBasicInfoRepoDescription0 defines model for .
type PackageBasicInfoRepoDescription0 = string

// PackageBasicInfo_RepoDescription defines model for PackageBasicInfo.RepoDescription.
type PackageBasicInfo_RepoDescription struct {
	union json.RawMessage
}

// PackageBasicInfoScore0 defines model for .
type PackageBasicInfoScore0 = float32

// PackageBasicInfo_Score defines model for PackageBasicInfo.Score.
type PackageBasicInfo_Score struct {
	union json.RawMessage
}

// PackageContributorData defines model for PackageContributorData.
type PackageContributorData struct {
	Author          *PackageContributorData_Author          `json:"author,omitempty"`
	AuthorEmail     *PackageContributorData_AuthorEmail     `json:"author_email,omitempty"`
	AvatarUrl       *PackageContributorData_AvatarUrl       `json:"avatar_url,omitempty"`
	Blog            *PackageContributorData_Blog            `json:"blog,omitempty"`
	Company         *PackageContributorData_Company         `json:"company,omitempty"`
	Email           *PackageContributorData_Email           `json:"email,omitempty"`
	Followers       *PackageContributorData_Followers       `json:"followers,omitempty"`
	Following       *PackageContributorData_Following       `json:"following,omitempty"`
	GravatarId      *PackageContributorData_GravatarId      `json:"gravatar_id,omitempty"`
	Hireable        *PackageContributorData_Hireable        `json:"hireable,omitempty"`
	HtmlUrl         *PackageContributorData_HtmlUrl         `json:"html_url,omitempty"`
	Id              openapi_types.UUID                      `json:"id"`
	Location        *PackageContributorData_Location        `json:"location,omitempty"`
	Login           *PackageContributorData_Login           `json:"login,omitempty"`
	PublicGists     *PackageContributorData_PublicGists     `json:"public_gists,omitempty"`
	PublicRepos     *PackageContributorData_PublicRepos     `json:"public_repos,omitempty"`
	Scores          *PackageContributorData_Scores          `json:"scores,omitempty"`
	TwitterUsername *PackageContributorData_TwitterUsername `json:"twitter_username,omitempty"`
	Url             *PackageContributorData_Url             `json:"url,omitempty"`
}

// PackageContributorDataAuthor0 defines model for .
type PackageContributorDataAuthor0 = string

// PackageContributorData_Author defines model for PackageContributorData.Author.
type PackageContributorData_Author struct {
	union json.RawMessage
}

// PackageContributorDataAuthorEmail0 defines model for .
type PackageContributorDataAuthorEmail0 = string

// PackageContributorData_AuthorEmail defines model for PackageContributorData.AuthorEmail.
type PackageContributorData_AuthorEmail struct {
	union json.RawMessage
}

// PackageContributorDataAvatarUrl0 defines model for .
type PackageContributorDataAvatarUrl0 = string

// PackageContributorData_AvatarUrl defines model for PackageContributorData.AvatarUrl.
type PackageContributorData_AvatarUrl struct {
	union json.RawMessage
}

// PackageContributorDataBlog0 defines model for .
type PackageContributorDataBlog0 = string

// PackageContributorData_Blog defines model for PackageContributorData.Blog.
type PackageContributorData_Blog struct {
	union json.RawMessage
}

// PackageContributorDataCompany0 defines model for .
type PackageContributorDataCompany0 = string

// PackageContributorData_Company defines model for PackageContributorData.Company.
type PackageContributorData_Company struct {
	union json.RawMessage
}

// PackageContributorDataEmail0 defines model for .
type PackageContributorDataEmail0 = string

// PackageContributorData_Email defines model for PackageContributorData.Email.
type PackageContributorData_Email struct {
	union json.RawMessage
}

// PackageContributorDataFollowers0 defines model for .
type PackageContributorDataFollowers0 = int

// PackageContributorData_Followers defines model for PackageContributorData.Followers.
type PackageContributorData_Followers struct {
	union json.RawMessage
}

// PackageContributorDataFollowing0 defines model for .
type PackageContributorDataFollowing0 = int

// PackageContributorData_Following defines model for PackageContributorData.Following.
type PackageContributorData_Following struct {
	union json.RawMessage
}

// PackageContributorDataGravatarId0 defines model for .
type PackageContributorDataGravatarId0 = string

// PackageContributorData_GravatarId defines model for PackageContributorData.GravatarId.
type PackageContributorData_GravatarId struct {
	union json.RawMessage
}

// PackageContributorDataHireable0 defines model for .
type PackageContributorDataHireable0 = bool

// PackageContributorData_Hireable defines model for PackageContributorData.Hireable.
type PackageContributorData_Hireable struct {
	union json.RawMessage
}

// PackageContributorDataHtmlUrl0 defines model for .
type PackageContributorDataHtmlUrl0 = string

// PackageContributorData_HtmlUrl defines model for PackageContributorData.HtmlUrl.
type PackageContributorData_HtmlUrl struct {
	union json.RawMessage
}

// PackageContributorDataLocation0 defines model for .
type PackageContributorDataLocation0 = string

// PackageContributorData_Location defines model for PackageContributorData.Location.
type PackageContributorData_Location struct {
	union json.RawMessage
}

// PackageContributorDataLogin0 defines model for .
type PackageContributorDataLogin0 = string

// PackageContributorData_Login defines model for PackageContributorData.Login.
type PackageContributorData_Login struct {
	union json.RawMessage
}

// PackageContributorDataPublicGists0 defines model for .
type PackageContributorDataPublicGists0 = int

// PackageContributorData_PublicGists defines model for PackageContributorData.PublicGists.
type PackageContributorData_PublicGists struct {
	union json.RawMessage
}

// PackageContributorDataPublicRepos0 defines model for .
type PackageContributorDataPublicRepos0 = int

// PackageContributorData_PublicRepos defines model for PackageContributorData.PublicRepos.
type PackageContributorData_PublicRepos struct {
	union json.RawMessage
}

// PackageContributorDataScores1 defines model for .
type PackageContributorDataScores1 = map[string]interface{}

// PackageContributorData_Scores defines model for PackageContributorData.Scores.
type PackageContributorData_Scores struct {
	union json.RawMessage
}

// PackageContributorDataTwitterUsername0 defines model for .
type PackageContributorDataTwitterUsername0 = string

// PackageContributorData_TwitterUsername defines model for PackageContributorData.TwitterUsername.
type PackageContributorData_TwitterUsername struct {
	union json.RawMessage
}

// PackageContributorDataUrl0 defines model for .
type PackageContributorDataUrl0 = string

// PackageContributorData_Url defines model for PackageContributorData.Url.
type PackageContributorData_Url struct {
	union json.RawMessage
}

// PackageMaliciousPayload This represents the payload details for a malicious package.
type PackageMaliciousPayload struct {
	Details   *PackageMaliciousPayload_Details   `json:"details,omitempty"`
	Modified  *PackageMaliciousPayload_Modified  `json:"modified,omitempty"`
	Published *PackageMaliciousPayload_Published `json:"published,omitempty"`
	Source    *PackageMaliciousPayload_Source    `json:"source,omitempty"`
	Summary   string                             `json:"summary"`
}

// PackageMaliciousPayloadDetails0 defines model for .
type PackageMaliciousPayloadDetails0 = string

// PackageMaliciousPayload_Details defines model for PackageMaliciousPayload.Details.
type PackageMaliciousPayload_Details struct {
	union json.RawMessage
}

// PackageMaliciousPayloadModified0 defines model for .
type PackageMaliciousPayloadModified0 = time.Time

// PackageMaliciousPayload_Modified defines model for PackageMaliciousPayload.Modified.
type PackageMaliciousPayload_Modified struct {
	union json.RawMessage
}

// PackageMaliciousPayloadPublished0 defines model for .
type PackageMaliciousPayloadPublished0 = time.Time

// PackageMaliciousPayload_Published defines model for PackageMaliciousPayload.Published.
type PackageMaliciousPayload_Published struct {
	union json.RawMessage
}

// PackageMaliciousPayloadSource0 defines model for .
type PackageMaliciousPayloadSource0 = string

// PackageMaliciousPayload_Source defines model for PackageMaliciousPayload.Source.
type PackageMaliciousPayload_Source struct {
	union json.RawMessage
}

// PackageSimilarResult defines model for PackageSimilarResult.
type PackageSimilarResult struct {
	SimilarPackageNames PackageSimilarResult_SimilarPackageNames `json:"similar_package_names"`
}

// PackageSimilarResultSimilarPackageNames0 defines model for .
type PackageSimilarResultSimilarPackageNames0 = []PackageBasicInfo

// PackageSimilarResult_SimilarPackageNames defines model for PackageSimilarResult.SimilarPackageNames.
type PackageSimilarResult_SimilarPackageNames struct {
	union json.RawMessage
}

// PackageStatus defines model for PackageStatus.
type PackageStatus string

// PackageSummaryAnnotation This represents a package annotation.
type PackageSummaryAnnotation struct {
	Description *interface{}                    `json:"description,omitempty"`
	Score       *PackageSummaryAnnotation_Score `json:"score,omitempty"`
	Status      *SummaryAnnotationStatus        `json:"status,omitempty"`
	UpdatedAt   time.Time                       `json:"updated_at"`
}

// PackageSummaryAnnotationScore0 defines model for .
type PackageSummaryAnnotationScore0 = float32

// PackageSummaryAnnotation_Score defines model for PackageSummaryAnnotation.Score.
type PackageSummaryAnnotation_Score struct {
	union json.RawMessage
}

// PackageType defines model for PackageType.
type PackageType string

// PeriodHistoricalProvenance defines model for PeriodHistoricalProvenance.
type PeriodHistoricalProvenance struct {
	Matches *int `json:"matches,omitempty"`
	Tags    *int `json:"tags,omitempty"`
	Vers    *int `json:"vers,omitempty"`
}

// PersonAnnotation This represents a package annotation.
type PersonAnnotation struct {
	Description *interface{}            `json:"description,omitempty"`
	Score       *PersonAnnotation_Score `json:"score,omitempty"`
	UpdatedAt   time.Time               `json:"updated_at"`
}

// PersonAnnotationScore0 defines model for .
type PersonAnnotationScore0 = float32

// PersonAnnotation_Score defines model for PersonAnnotation.Score.
type PersonAnnotation_Score struct {
	union json.RawMessage
}

// ProvenanceData defines model for ProvenanceData.
type ProvenanceData struct {
	Issuer       *string `json:"issuer,omitempty"`
	SourceRepo   *string `json:"source_repo,omitempty"`
	TokenIssuer  *string `json:"token_issuer,omitempty"`
	Transparency *string `json:"transparency,omitempty"`
	Workflow     *string `json:"workflow,omitempty"`
}

// ProvenanceResponse defines model for ProvenanceResponse.
type ProvenanceResponse struct {
	// Hp [Historical provenance](provenance.md#historical-provenance-hp)
	// This contains the number of `tags` in the repo, the number of `versions`
	// of the package, a count of the `common` tags and the ratio of tags to common
	// as `overlap`.
	Hp       *HistoricalProvenance        `json:"hp,omitempty"`
	Score    *float32                     `json:"score,omitempty"`
	Sigstore *ProvenanceResponse_Sigstore `json:"sigstore,omitempty"`
	Status   *string                      `json:"status,omitempty"`
}

// ProvenanceResponseSigstore1 defines model for .
type ProvenanceResponseSigstore1 = map[string]interface{}

// ProvenanceResponse_Sigstore defines model for ProvenanceResponse.Sigstore.
type ProvenanceResponse_Sigstore struct {
	union json.RawMessage
}

// RepositoryAnnotation This represents a package annotation.
type RepositoryAnnotation struct {
	Description *interface{}                `json:"description,omitempty"`
	Score       *RepositoryAnnotation_Score `json:"score,omitempty"`
	UpdatedAt   time.Time                   `json:"updated_at"`
}

// RepositoryAnnotationScore0 defines model for .
type RepositoryAnnotationScore0 = float32

// RepositoryAnnotation_Score defines model for RepositoryAnnotation.Score.
type RepositoryAnnotation_Score struct {
	union json.RawMessage
}

// RepositoryData defines model for RepositoryData.
type RepositoryData struct {
	ContributorCount *RepositoryData_ContributorCount `json:"contributor_count,omitempty"`
	ForksCount       *RepositoryData_ForksCount       `json:"forks_count,omitempty"`
	Id               openapi_types.UUID               `json:"id"`
	LastUpdate       *RepositoryData_LastUpdate       `json:"last_update,omitempty"`
	Name             *RepositoryData_Name             `json:"name,omitempty"`
	OpenIssuesCount  *RepositoryData_OpenIssuesCount  `json:"open_issues_count,omitempty"`
	Scores           *RepositoryData_Scores           `json:"scores,omitempty"`
	StargazersCount  *RepositoryData_StargazersCount  `json:"stargazers_count,omitempty"`
	Url              *RepositoryData_Url              `json:"url,omitempty"`
	WatchersCount    *RepositoryData_WatchersCount    `json:"watchers_count,omitempty"`
}

// RepositoryDataContributorCount0 defines model for .
type RepositoryDataContributorCount0 = int

// RepositoryData_ContributorCount defines model for RepositoryData.ContributorCount.
type RepositoryData_ContributorCount struct {
	union json.RawMessage
}

// RepositoryDataForksCount0 defines model for .
type RepositoryDataForksCount0 = int

// RepositoryData_ForksCount defines model for RepositoryData.ForksCount.
type RepositoryData_ForksCount struct {
	union json.RawMessage
}

// RepositoryDataLastUpdate0 defines model for .
type RepositoryDataLastUpdate0 = time.Time

// RepositoryData_LastUpdate defines model for RepositoryData.LastUpdate.
type RepositoryData_LastUpdate struct {
	union json.RawMessage
}

// RepositoryDataName0 defines model for .
type RepositoryDataName0 = string

// RepositoryData_Name defines model for RepositoryData.Name.
type RepositoryData_Name struct {
	union json.RawMessage
}

// RepositoryDataOpenIssuesCount0 defines model for .
type RepositoryDataOpenIssuesCount0 = int

// RepositoryData_OpenIssuesCount defines model for RepositoryData.OpenIssuesCount.
type RepositoryData_OpenIssuesCount struct {
	union json.RawMessage
}

// RepositoryDataScores1 defines model for .
type RepositoryDataScores1 = map[string]interface{}

// RepositoryData_Scores defines model for RepositoryData.Scores.
type RepositoryData_Scores struct {
	union json.RawMessage
}

// RepositoryDataStargazersCount0 defines model for .
type RepositoryDataStargazersCount0 = int

// RepositoryData_StargazersCount defines model for RepositoryData.StargazersCount.
type RepositoryData_StargazersCount struct {
	union json.RawMessage
}

// RepositoryDataUrl0 defines model for .
type RepositoryDataUrl0 = string

// RepositoryData_Url defines model for RepositoryData.Url.
type RepositoryData_Url struct {
	union json.RawMessage
}

// RepositoryDataWatchersCount0 defines model for .
type RepositoryDataWatchersCount0 = int

// RepositoryData_WatchersCount defines model for RepositoryData.WatchersCount.
type RepositoryData_WatchersCount struct {
	union json.RawMessage
}

// RepositoryResult defines model for RepositoryResult.
type RepositoryResult struct {
	Contributors *RepositoryResult_Contributors `json:"contributors,omitempty"`
	Packages     *RepositoryResult_Packages     `json:"packages,omitempty"`
	Repository   *RepositoryData                `json:"repository,omitempty"`
}

// RepositoryResultContributors0 defines model for .
type RepositoryResultContributors0 = []PackageContributorData

// RepositoryResult_Contributors defines model for RepositoryResult.Contributors.
type RepositoryResult_Contributors struct {
	union json.RawMessage
}

// RepositoryResultPackages0 defines model for .
type RepositoryResultPackages0 = []TrustyPackageData

// RepositoryResult_Packages defines model for RepositoryResult.Packages.
type RepositoryResult_Packages struct {
	union json.RawMessage
}

// SameOriginPackagesResult defines model for SameOriginPackagesResult.
type SameOriginPackagesResult struct {
	NextToken          string                                       `json:"next_token"`
	SameOriginPackages *SameOriginPackagesResult_SameOriginPackages `json:"same_origin_packages,omitempty"`
}

// SameOriginPackagesResultSameOriginPackages0 defines model for .
type SameOriginPackagesResultSameOriginPackages0 = []PackageBasicInfo

// SameOriginPackagesResult_SameOriginPackages defines model for SameOriginPackagesResult.SameOriginPackages.
type SameOriginPackagesResult_SameOriginPackages struct {
	union json.RawMessage
}

// SummaryAnnotationStatus defines model for SummaryAnnotationStatus.
type SummaryAnnotationStatus string

// TrustyPackageData defines model for TrustyPackageData.
type TrustyPackageData struct {
	Archived                *TrustyPackageData_Archived                `json:"archived,omitempty"`
	Author                  *TrustyPackageData_Author                  `json:"author,omitempty"`
	AuthorEmail             *TrustyPackageData_AuthorEmail             `json:"author_email,omitempty"`
	ContributorCount        *TrustyPackageData_ContributorCount        `json:"contributor_count,omitempty"`
	Contributors            *TrustyPackageData_Contributors            `json:"contributors,omitempty"`
	DefaultBranch           *TrustyPackageData_DefaultBranch           `json:"default_branch,omitempty"`
	Disabled                *TrustyPackageData_Disabled                `json:"disabled,omitempty"`
	Followers               *TrustyPackageData_Followers               `json:"followers,omitempty"`
	Following               *TrustyPackageData_Following               `json:"following,omitempty"`
	ForksCount              *TrustyPackageData_ForksCount              `json:"forks_count,omitempty"`
	HasDownloads            *TrustyPackageData_HasDownloads            `json:"has_downloads,omitempty"`
	HasIssues               *TrustyPackageData_HasIssues               `json:"has_issues,omitempty"`
	HasProjects             *TrustyPackageData_HasProjects             `json:"has_projects,omitempty"`
	HasTriggeredReingestion *TrustyPackageData_HasTriggeredReingestion `json:"has_triggered_reingestion,omitempty"`
	HomePage                *TrustyPackageData_HomePage                `json:"home_page,omitempty"`
	Id                      openapi_types.UUID                         `json:"id"`
	IsDeprecated            *TrustyPackageData_IsDeprecated            `json:"is_deprecated,omitempty"`
	LastUpdate              *TrustyPackageData_LastUpdate              `json:"last_update,omitempty"`
	Malicious               *TrustyPackageData_Malicious               `json:"malicious,omitempty"`
	Name                    string                                     `json:"name"`
	OpenIssuesCount         *TrustyPackageData_OpenIssuesCount         `json:"open_issues_count,omitempty"`
	Origin                  *TrustyPackageData_Origin                  `json:"origin,omitempty"`
	Owner                   *TrustyPackageData_Owner                   `json:"owner,omitempty"`
	PackageDescription      *TrustyPackageData_PackageDescription      `json:"package_description,omitempty"`
	PublicGists             *TrustyPackageData_PublicGists             `json:"public_gists,omitempty"`
	PublicRepos             *TrustyPackageData_PublicRepos             `json:"public_repos,omitempty"`
	RepoDescription         *TrustyPackageData_RepoDescription         `json:"repo_description,omitempty"`
	RepositoryId            *TrustyPackageData_RepositoryId            `json:"repository_id,omitempty"`
	RepositoryName          *TrustyPackageData_RepositoryName          `json:"repository_name,omitempty"`
	Scores                  *TrustyPackageData_Scores                  `json:"scores,omitempty"`
	StargazersCount         *TrustyPackageData_StargazersCount         `json:"stargazers_count,omitempty"`
	Status                  PackageStatus                              `json:"status"`
	StatusCode              *TrustyPackageData_StatusCode              `json:"status_code,omitempty"`
	Type                    PackageType                                `json:"type"`
	Version                 *TrustyPackageData_Version                 `json:"version,omitempty"`
	VersionDate             *TrustyPackageData_VersionDate             `json:"version_date,omitempty"`
	Visibility              *TrustyPackageData_Visibility              `json:"visibility,omitempty"`
	WatchersCount           *TrustyPackageData_WatchersCount           `json:"watchers_count,omitempty"`
}

// TrustyPackageDataArchived0 defines model for .
type TrustyPackageDataArchived0 = bool

// TrustyPackageData_Archived defines model for TrustyPackageData.Archived.
type TrustyPackageData_Archived struct {
	union json.RawMessage
}

// TrustyPackageDataAuthor0 defines model for .
type TrustyPackageDataAuthor0 = string

// TrustyPackageData_Author defines model for TrustyPackageData.Author.
type TrustyPackageData_Author struct {
	union json.RawMessage
}

// TrustyPackageDataAuthorEmail0 defines model for .
type TrustyPackageDataAuthorEmail0 = string

// TrustyPackageData_AuthorEmail defines model for TrustyPackageData.AuthorEmail.
type TrustyPackageData_AuthorEmail struct {
	union json.RawMessage
}

// TrustyPackageDataContributorCount0 defines model for .
type TrustyPackageDataContributorCount0 = int

// TrustyPackageData_ContributorCount defines model for TrustyPackageData.ContributorCount.
type TrustyPackageData_ContributorCount struct {
	union json.RawMessage
}

// TrustyPackageDataContributors0 defines model for .
type TrustyPackageDataContributors0 = []PackageContributorData

// TrustyPackageData_Contributors defines model for TrustyPackageData.Contributors.
type TrustyPackageData_Contributors struct {
	union json.RawMessage
}

// TrustyPackageDataDefaultBranch0 defines model for .
type TrustyPackageDataDefaultBranch0 = string

// TrustyPackageData_DefaultBranch defines model for TrustyPackageData.DefaultBranch.
type TrustyPackageData_DefaultBranch struct {
	union json.RawMessage
}

// TrustyPackageDataDisabled0 defines model for .
type TrustyPackageDataDisabled0 = bool

// TrustyPackageData_Disabled defines model for TrustyPackageData.Disabled.
type TrustyPackageData_Disabled struct {
	union json.RawMessage
}

// TrustyPackageDataFollowers0 defines model for .
type TrustyPackageDataFollowers0 = int

// TrustyPackageData_Followers defines model for TrustyPackageData.Followers.
type TrustyPackageData_Followers struct {
	union json.RawMessage
}

// TrustyPackageDataFollowing0 defines model for .
type TrustyPackageDataFollowing0 = int

// TrustyPackageData_Following defines model for TrustyPackageData.Following.
type TrustyPackageData_Following struct {
	union json.RawMessage
}

// TrustyPackageDataForksCount0 defines model for .
type TrustyPackageDataForksCount0 = int

// TrustyPackageData_ForksCount defines model for TrustyPackageData.ForksCount.
type TrustyPackageData_ForksCount struct {
	union json.RawMessage
}

// TrustyPackageDataHasDownloads0 defines model for .
type TrustyPackageDataHasDownloads0 = bool

// TrustyPackageData_HasDownloads defines model for TrustyPackageData.HasDownloads.
type TrustyPackageData_HasDownloads struct {
	union json.RawMessage
}

// TrustyPackageDataHasIssues0 defines model for .
type TrustyPackageDataHasIssues0 = bool

// TrustyPackageData_HasIssues defines model for TrustyPackageData.HasIssues.
type TrustyPackageData_HasIssues struct {
	union json.RawMessage
}

// TrustyPackageDataHasProjects0 defines model for .
type TrustyPackageDataHasProjects0 = bool

// TrustyPackageData_HasProjects defines model for TrustyPackageData.HasProjects.
type TrustyPackageData_HasProjects struct {
	union json.RawMessage
}

// TrustyPackageDataHasTriggeredReingestion0 defines model for .
type TrustyPackageDataHasTriggeredReingestion0 = bool

// TrustyPackageData_HasTriggeredReingestion defines model for TrustyPackageData.HasTriggeredReingestion.
type TrustyPackageData_HasTriggeredReingestion struct {
	union json.RawMessage
}

// TrustyPackageDataHomePage0 defines model for .
type TrustyPackageDataHomePage0 = string

// TrustyPackageData_HomePage defines model for TrustyPackageData.HomePage.
type TrustyPackageData_HomePage struct {
	union json.RawMessage
}

// TrustyPackageDataIsDeprecated0 defines model for .
type TrustyPackageDataIsDeprecated0 = bool

// TrustyPackageData_IsDeprecated defines model for TrustyPackageData.IsDeprecated.
type TrustyPackageData_IsDeprecated struct {
	union json.RawMessage
}

// TrustyPackageDataLastUpdate0 defines model for .
type TrustyPackageDataLastUpdate0 = time.Time

// TrustyPackageData_LastUpdate defines model for TrustyPackageData.LastUpdate.
type TrustyPackageData_LastUpdate struct {
	union json.RawMessage
}

// TrustyPackageData_Malicious defines model for TrustyPackageData.Malicious.
type TrustyPackageData_Malicious struct {
	union json.RawMessage
}

// TrustyPackageDataOpenIssuesCount0 defines model for .
type TrustyPackageDataOpenIssuesCount0 = int

// TrustyPackageData_OpenIssuesCount defines model for TrustyPackageData.OpenIssuesCount.
type TrustyPackageData_OpenIssuesCount struct {
	union json.RawMessage
}

// TrustyPackageDataOrigin0 defines model for .
type TrustyPackageDataOrigin0 = string

// TrustyPackageData_Origin defines model for TrustyPackageData.Origin.
type TrustyPackageData_Origin struct {
	union json.RawMessage
}

// TrustyPackageData_Owner defines model for TrustyPackageData.Owner.
type TrustyPackageData_Owner struct {
	union json.RawMessage
}

// TrustyPackageDataPackageDescription0 defines model for .
type TrustyPackageDataPackageDescription0 = string

// TrustyPackageData_PackageDescription defines model for TrustyPackageData.PackageDescription.
type TrustyPackageData_PackageDescription struct {
	union json.RawMessage
}

// TrustyPackageDataPublicGists0 defines model for .
type TrustyPackageDataPublicGists0 = int

// TrustyPackageData_PublicGists defines model for TrustyPackageData.PublicGists.
type TrustyPackageData_PublicGists struct {
	union json.RawMessage
}

// TrustyPackageDataPublicRepos0 defines model for .
type TrustyPackageDataPublicRepos0 = int

// TrustyPackageData_PublicRepos defines model for TrustyPackageData.PublicRepos.
type TrustyPackageData_PublicRepos struct {
	union json.RawMessage
}

// TrustyPackageDataRepoDescription0 defines model for .
type TrustyPackageDataRepoDescription0 = string

// TrustyPackageData_RepoDescription defines model for TrustyPackageData.RepoDescription.
type TrustyPackageData_RepoDescription struct {
	union json.RawMessage
}

// TrustyPackageDataRepositoryId0 defines model for .
type TrustyPackageDataRepositoryId0 = openapi_types.UUID

// TrustyPackageData_RepositoryId defines model for TrustyPackageData.RepositoryId.
type TrustyPackageData_RepositoryId struct {
	union json.RawMessage
}

// TrustyPackageDataRepositoryName0 defines model for .
type TrustyPackageDataRepositoryName0 = string

// TrustyPackageData_RepositoryName defines model for TrustyPackageData.RepositoryName.
type TrustyPackageData_RepositoryName struct {
	union json.RawMessage
}

// TrustyPackageDataScores1 defines model for .
type TrustyPackageDataScores1 = map[string]interface{}

// TrustyPackageData_Scores defines model for TrustyPackageData.Scores.
type TrustyPackageData_Scores struct {
	union json.RawMessage
}

// TrustyPackageDataStargazersCount0 defines model for .
type TrustyPackageDataStargazersCount0 = int

// TrustyPackageData_StargazersCount defines model for TrustyPackageData.StargazersCount.
type TrustyPackageData_StargazersCount struct {
	union json.RawMessage
}

// TrustyPackageDataStatusCode0 defines model for .
type TrustyPackageDataStatusCode0 = string

// TrustyPackageData_StatusCode defines model for TrustyPackageData.StatusCode.
type TrustyPackageData_StatusCode struct {
	union json.RawMessage
}

// TrustyPackageDataVersion0 defines model for .
type TrustyPackageDataVersion0 = string

// TrustyPackageData_Version defines model for TrustyPackageData.Version.
type TrustyPackageData_Version struct {
	union json.RawMessage
}

// TrustyPackageDataVersionDate0 defines model for .
type TrustyPackageDataVersionDate0 = time.Time

// TrustyPackageData_VersionDate defines model for TrustyPackageData.VersionDate.
type TrustyPackageData_VersionDate struct {
	union json.RawMessage
}

// TrustyPackageDataVisibility0 defines model for .
type TrustyPackageDataVisibility0 = string

// TrustyPackageData_Visibility defines model for TrustyPackageData.Visibility.
type TrustyPackageData_Visibility struct {
	union json.RawMessage
}

// TrustyPackageDataWatchersCount0 defines model for .
type TrustyPackageDataWatchersCount0 = int

// TrustyPackageData_WatchersCount defines model for TrustyPackageData.WatchersCount.
type TrustyPackageData_WatchersCount struct {
	union json.RawMessage
}

// TrustyPackageResult This result repesents all the intelligence about a package.
//
// It includes component scores, typosquatting, activity, and provenance
// and also a summary.
//
// See [scoring](https://github.com/stacklok/trusty/blob/main/docs/scoring.md) for more information.
type TrustyPackageResult struct {
	// Activity This represents a package annotation.
	Activity                *PackageAnnotation                           `json:"activity,omitempty"`
	Alternatives            *PackageAlternatives                         `json:"alternatives,omitempty"`
	HasTriggeredReingestion *TrustyPackageResult_HasTriggeredReingestion `json:"has_triggered_reingestion,omitempty"`
	PackageData             TrustyPackageData                            `json:"package_data"`
	PackageName             string                                       `json:"package_name"`
	PackageType             PackageType                                  `json:"package_type"`
	PackageVersion          *TrustyPackageResult_PackageVersion          `json:"package_version,omitempty"`

	// Provenance This represents a package annotation.
	Provenance              *PackageAnnotation                           `json:"provenance,omitempty"`
	SameOriginPackagesCount *TrustyPackageResult_SameOriginPackagesCount `json:"same_origin_packages_count,omitempty"`
	SimilarPackageNames     *TrustyPackageResult_SimilarPackageNames     `json:"similar_package_names,omitempty"`
	Status                  *PackageStatus                               `json:"status,omitempty"`

	// Summary This represents a package annotation.
	Summary *PackageAnnotation `json:"summary,omitempty"`

	// Typosquatting This represents a package annotation.
	Typosquatting *PackageAnnotation `json:"typosquatting,omitempty"`
}

// TrustyPackageResultHasTriggeredReingestion0 defines model for .
type TrustyPackageResultHasTriggeredReingestion0 = bool

// TrustyPackageResult_HasTriggeredReingestion defines model for TrustyPackageResult.HasTriggeredReingestion.
type TrustyPackageResult_HasTriggeredReingestion struct {
	union json.RawMessage
}

// TrustyPackageResultPackageVersion0 defines model for .
type TrustyPackageResultPackageVersion0 = string

// TrustyPackageResult_PackageVersion defines model for TrustyPackageResult.PackageVersion.
type TrustyPackageResult_PackageVersion struct {
	union json.RawMessage
}

// TrustyPackageResultSameOriginPackagesCount0 defines model for .
type TrustyPackageResultSameOriginPackagesCount0 = int

// TrustyPackageResult_SameOriginPackagesCount defines model for TrustyPackageResult.SameOriginPackagesCount.
type TrustyPackageResult_SameOriginPackagesCount struct {
	union json.RawMessage
}

// TrustyPackageResultSimilarPackageNames0 defines model for .
type TrustyPackageResultSimilarPackageNames0 = []PackageBasicInfo

// TrustyPackageResult_SimilarPackageNames defines model for TrustyPackageResult.SimilarPackageNames.
type TrustyPackageResult_SimilarPackageNames struct {
	union json.RawMessage
}

// TrustySummarizedPackageVersion defines model for TrustySummarizedPackageVersion.
type TrustySummarizedPackageVersion struct {
	Id           *TrustySummarizedPackageVersion_Id         `json:"id,omitempty"`
	IsDeprecated *bool                                      `json:"is_deprecated,omitempty"`
	Score        TrustySummarizedPackageVersion_Score       `json:"score"`
	Version      string                                     `json:"version"`
	VersionDate  TrustySummarizedPackageVersion_VersionDate `json:"version_date"`
}

// TrustySummarizedPackageVersionId0 defines model for .
type TrustySummarizedPackageVersionId0 = openapi_types.UUID

// TrustySummarizedPackageVersion_Id defines model for TrustySummarizedPackageVersion.Id.
type TrustySummarizedPackageVersion_Id struct {
	union json.RawMessage
}

// TrustySummarizedPackageVersionScore0 defines model for .
type TrustySummarizedPackageVersionScore0 = float32

// TrustySummarizedPackageVersion_Score defines model for TrustySummarizedPackageVersion.Score.
type TrustySummarizedPackageVersion_Score struct {
	union json.RawMessage
}

// TrustySummarizedPackageVersionVersionDate0 defines model for .
type TrustySummarizedPackageVersionVersionDate0 = time.Time

// TrustySummarizedPackageVersion_VersionDate defines model for TrustySummarizedPackageVersion.VersionDate.
type TrustySummarizedPackageVersion_VersionDate struct {
	union json.RawMessage
}

// TrustySummarizedPackageVersionResults defines model for TrustySummarizedPackageVersionResults.
type TrustySummarizedPackageVersionResults struct {
	Latest    *TrustySummarizedPackageVersionResults_Latest    `json:"latest,omitempty"`
	NextToken *TrustySummarizedPackageVersionResults_NextToken `json:"next_token,omitempty"`
	Results   []TrustySummarizedPackageVersion                 `json:"results"`
}

// TrustySummarizedPackageVersionResults_Latest defines model for TrustySummarizedPackageVersionResults.Latest.
type TrustySummarizedPackageVersionResults_Latest struct {
	union json.RawMessage
}

// TrustySummarizedPackageVersionResultsNextToken0 defines model for .
type TrustySummarizedPackageVersionResultsNextToken0 = time.Time

// TrustySummarizedPackageVersionResults_NextToken defines model for TrustySummarizedPackageVersionResults.NextToken.
type TrustySummarizedPackageVersionResults_NextToken struct {
	union json.RawMessage
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// VulnerabilityListResponse defines model for VulnerabilityListResponse.
type VulnerabilityListResponse struct {
	NextToken       *VulnerabilityListResponse_NextToken `json:"next_token,omitempty"`
	Vulnerabilities []VulnerabilityScores                `json:"vulnerabilities"`
}

// VulnerabilityListResponseNextToken0 defines model for .
type VulnerabilityListResponseNextToken0 = string

// VulnerabilityListResponse_NextToken defines model for VulnerabilityListResponse.NextToken.
type VulnerabilityListResponse_NextToken struct {
	union json.RawMessage
}

// VulnerabilityResponse defines model for VulnerabilityResponse.
type VulnerabilityResponse struct {
	CreatedAt time.Time              `json:"created_at"`
	Data      map[string]interface{} `json:"data"`
	Id        openapi_types.UUID     `json:"id"`
	OsvId     string                 `json:"osv_id"`
	UpdatedAt time.Time              `json:"updated_at"`
}

// VulnerabilityScores defines model for VulnerabilityScores.
type VulnerabilityScores struct {
	OsvIdentifier string                  `json:"osv_identifier"`
	Severity      []VulnerabilitySeverity `json:"severity"`
	Summary       string                  `json:"summary"`
}

// VulnerabilitySeverity defines model for VulnerabilitySeverity.
type VulnerabilitySeverity struct {
	Score         float32                    `json:"score"`
	SeverityLevel VulnerabilitySeverityLevel `json:"severity_level"`
	SeverityType  VulnerabilitySeverityType  `json:"severity_type"`
}

// VulnerabilitySeverityLevel defines model for VulnerabilitySeverityLevel.
type VulnerabilitySeverityLevel string

// VulnerabilitySeverityType defines model for VulnerabilitySeverityType.
type VulnerabilitySeverityType string

// V2GetAlternativesParams defines parameters for V2GetAlternatives.
type V2GetAlternativesParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
}

// V2GetAlternativesParamsPackageVersion0 defines parameters for V2GetAlternatives.
type V2GetAlternativesParamsPackageVersion0 = string

// V2GetContributorReportParams defines parameters for V2GetContributorReport.
type V2GetContributorReportParams struct {
	Login string `form:"login" json:"login"`
}

// V2GetDependenciesParams defines parameters for V2GetDependencies.
type V2GetDependenciesParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
	Filter *struct {
		union json.RawMessage
	} `form:"filter,omitempty" json:"filter,omitempty"`
	SortBy *struct {
		union json.RawMessage
	} `form:"sort_by,omitempty" json:"sort_by,omitempty"`
	SortOrder *struct {
		union json.RawMessage
	} `form:"sort_order,omitempty" json:"sort_order,omitempty"`
	RecurseLimit *int `form:"recurse_limit,omitempty" json:"recurse_limit,omitempty"`
	PageFrom     *int `form:"page_from,omitempty" json:"page_from,omitempty"`
	PageTo       *int `form:"page_to,omitempty" json:"page_to,omitempty"`
}

// V2GetDependenciesParamsPackageVersion0 defines parameters for V2GetDependencies.
type V2GetDependenciesParamsPackageVersion0 = string

// V2GetDependenciesParamsFilter0 defines parameters for V2GetDependencies.
type V2GetDependenciesParamsFilter0 = string

// V2GetDependenciesParamsSortBy0 defines parameters for V2GetDependencies.
type V2GetDependenciesParamsSortBy0 = []string

// V2GetDependenciesParamsSortOrder0 defines parameters for V2GetDependencies.
type V2GetDependenciesParamsSortOrder0 = []string

// V2GetDependenciesIdParams defines parameters for V2GetDependenciesId.
type V2GetDependenciesIdParams struct {
	Filter *struct {
		union json.RawMessage
	} `form:"filter,omitempty" json:"filter,omitempty"`
	SortBy *struct {
		union json.RawMessage
	} `form:"sort_by,omitempty" json:"sort_by,omitempty"`
	SortOrder *struct {
		union json.RawMessage
	} `form:"sort_order,omitempty" json:"sort_order,omitempty"`
	RecurseLimit *int `form:"recurse_limit,omitempty" json:"recurse_limit,omitempty"`
	PageFrom     *int `form:"page_from,omitempty" json:"page_from,omitempty"`
	PageTo       *int `form:"page_to,omitempty" json:"page_to,omitempty"`
}

// V2GetDependenciesIdParamsFilter0 defines parameters for V2GetDependenciesId.
type V2GetDependenciesIdParamsFilter0 = string

// V2GetDependenciesIdParamsSortBy0 defines parameters for V2GetDependenciesId.
type V2GetDependenciesIdParamsSortBy0 = []string

// V2GetDependenciesIdParamsSortOrder0 defines parameters for V2GetDependenciesId.
type V2GetDependenciesIdParamsSortOrder0 = []string

// V2GetLicenceParams defines parameters for V2GetLicence.
type V2GetLicenceParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
}

// V2GetLicenceParamsPackageVersion0 defines parameters for V2GetLicence.
type V2GetLicenceParamsPackageVersion0 = string

// V2GetMaliciousParams defines parameters for V2GetMalicious.
type V2GetMaliciousParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
}

// V2GetMaliciousParamsPackageVersion0 defines parameters for V2GetMalicious.
type V2GetMaliciousParamsPackageVersion0 = string

// V2PostPackageJSONBody defines parameters for V2PostPackage.
type V2PostPackageJSONBody = []openapi_types.UUID

// V2GetPkgParams defines parameters for V2GetPkg.
type V2GetPkgParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
}

// V2GetPkgParamsPackageVersion0 defines parameters for V2GetPkg.
type V2GetPkgParamsPackageVersion0 = string

// V2GetPackageProvenanceParams defines parameters for V2GetPackageProvenance.
type V2GetPackageProvenanceParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
	PeriodType  *string `form:"period_type,omitempty" json:"period_type,omitempty"`
	PeriodCount *int    `form:"period_count,omitempty" json:"period_count,omitempty"`
}

// V2GetPackageProvenanceParamsPackageVersion0 defines parameters for V2GetPackageProvenance.
type V2GetPackageProvenanceParamsPackageVersion0 = string

// V2GetRepositoryReportParams defines parameters for V2GetRepositoryReport.
type V2GetRepositoryReportParams struct {
	Name string `form:"name" json:"name"`
}

// V2GetSameOriginParams defines parameters for V2GetSameOrigin.
type V2GetSameOriginParams struct {
	PackageName string       `form:"package_name" json:"package_name"`
	PackageType *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	Token       *string      `form:"token,omitempty" json:"token,omitempty"`
}

// V2GetSimilarParams defines parameters for V2GetSimilar.
type V2GetSimilarParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
}

// V2GetSimilarParamsPackageVersion0 defines parameters for V2GetSimilar.
type V2GetSimilarParamsPackageVersion0 = string

// V2GetSummaryParams defines parameters for V2GetSummary.
type V2GetSummaryParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
}

// V2GetSummaryParamsPackageVersion0 defines parameters for V2GetSummary.
type V2GetSummaryParamsPackageVersion0 = string

// GetVersionsV2VersionsGetParams defines parameters for GetVersionsV2VersionsGet.
type GetVersionsV2VersionsGetParams struct {
	PackageName   string       `form:"package_name" json:"package_name"`
	PackageType   *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	VersionPrefix *struct {
		union json.RawMessage
	} `form:"version_prefix,omitempty" json:"version_prefix,omitempty"`
	VersionFragment *struct {
		union json.RawMessage
	} `form:"version_fragment,omitempty" json:"version_fragment,omitempty"`
	Token *struct {
		union json.RawMessage
	} `form:"token,omitempty" json:"token,omitempty"`
}

// GetVersionsV2VersionsGetParamsVersionPrefix0 defines parameters for GetVersionsV2VersionsGet.
type GetVersionsV2VersionsGetParamsVersionPrefix0 = string

// GetVersionsV2VersionsGetParamsVersionFragment0 defines parameters for GetVersionsV2VersionsGet.
type GetVersionsV2VersionsGetParamsVersionFragment0 = string

// GetVersionsV2VersionsGetParamsToken0 defines parameters for GetVersionsV2VersionsGet.
type GetVersionsV2VersionsGetParamsToken0 = time.Time

// GetVulnerabilitiesV2VulnerabilitiesGetParams defines parameters for GetVulnerabilitiesV2VulnerabilitiesGet.
type GetVulnerabilitiesV2VulnerabilitiesGetParams struct {
	PackageName    string       `form:"package_name" json:"package_name"`
	PackageType    *PackageType `form:"package_type,omitempty" json:"package_type,omitempty"`
	PackageVersion *struct {
		union json.RawMessage
	} `form:"package_version,omitempty" json:"package_version,omitempty"`
	Token *struct {
		union json.RawMessage
	} `form:"token,omitempty" json:"token,omitempty"`
	NumVulnerabilities *struct {
		union json.RawMessage
	} `form:"num_vulnerabilities,omitempty" json:"num_vulnerabilities,omitempty"`
}

// GetVulnerabilitiesV2VulnerabilitiesGetParamsPackageVersion0 defines parameters for GetVulnerabilitiesV2VulnerabilitiesGet.
type GetVulnerabilitiesV2VulnerabilitiesGetParamsPackageVersion0 = string

// GetVulnerabilitiesV2VulnerabilitiesGetParamsToken0 defines parameters for GetVulnerabilitiesV2VulnerabilitiesGet.
type GetVulnerabilitiesV2VulnerabilitiesGetParamsToken0 = string

// GetVulnerabilitiesV2VulnerabilitiesGetParamsNumVulnerabilities0 defines parameters for GetVulnerabilitiesV2VulnerabilitiesGet.
type GetVulnerabilitiesV2VulnerabilitiesGetParamsNumVulnerabilities0 = int

// GetVulnerabilityV2VulnerabilityGetParams defines parameters for GetVulnerabilityV2VulnerabilityGet.
type GetVulnerabilityV2VulnerabilityGetParams struct {
	OsvId string `form:"osv_id" json:"osv_id"`
}

// V2PostPackageJSONRequestBody defines body for V2PostPackage for application/json ContentType.
type V2PostPackageJSONRequestBody = V2PostPackageJSONBody

// AsContributorResultContributorRepos0 returns the union data inside the ContributorResult_ContributorRepos as a ContributorResultContributorRepos0
func (t ContributorResult_ContributorRepos) AsContributorResultContributorRepos0() (ContributorResultContributorRepos0, error) {
	var body ContributorResultContributorRepos0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromContributorResultContributorRepos0 overwrites any union data inside the ContributorResult_ContributorRepos as the provided ContributorResultContributorRepos0
func (t *ContributorResult_ContributorRepos) FromContributorResultContributorRepos0(v ContributorResultContributorRepos0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeContributorResultContributorRepos0 performs a merge with any union data inside the ContributorResult_ContributorRepos, using the provided ContributorResultContributorRepos0
func (t *ContributorResult_ContributorRepos) MergeContributorResultContributorRepos0(v ContributorResultContributorRepos0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ContributorResult_ContributorRepos) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ContributorResult_ContributorRepos) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDependencyActivityScore0 returns the union data inside the Dependency_ActivityScore as a DependencyActivityScore0
func (t Dependency_ActivityScore) AsDependencyActivityScore0() (DependencyActivityScore0, error) {
	var body DependencyActivityScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDependencyActivityScore0 overwrites any union data inside the Dependency_ActivityScore as the provided DependencyActivityScore0
func (t *Dependency_ActivityScore) FromDependencyActivityScore0(v DependencyActivityScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDependencyActivityScore0 performs a merge with any union data inside the Dependency_ActivityScore, using the provided DependencyActivityScore0
func (t *Dependency_ActivityScore) MergeDependencyActivityScore0(v DependencyActivityScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Dependency_ActivityScore) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Dependency_ActivityScore) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDependencyDeclaredLicense0 returns the union data inside the Dependency_DeclaredLicense as a DependencyDeclaredLicense0
func (t Dependency_DeclaredLicense) AsDependencyDeclaredLicense0() (DependencyDeclaredLicense0, error) {
	var body DependencyDeclaredLicense0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDependencyDeclaredLicense0 overwrites any union data inside the Dependency_DeclaredLicense as the provided DependencyDeclaredLicense0
func (t *Dependency_DeclaredLicense) FromDependencyDeclaredLicense0(v DependencyDeclaredLicense0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDependencyDeclaredLicense0 performs a merge with any union data inside the Dependency_DeclaredLicense, using the provided DependencyDeclaredLicense0
func (t *Dependency_DeclaredLicense) MergeDependencyDeclaredLicense0(v DependencyDeclaredLicense0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Dependency_DeclaredLicense) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Dependency_DeclaredLicense) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDependencyMalOsvId0 returns the union data inside the Dependency_MalOsvId as a DependencyMalOsvId0
func (t Dependency_MalOsvId) AsDependencyMalOsvId0() (DependencyMalOsvId0, error) {
	var body DependencyMalOsvId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDependencyMalOsvId0 overwrites any union data inside the Dependency_MalOsvId as the provided DependencyMalOsvId0
func (t *Dependency_MalOsvId) FromDependencyMalOsvId0(v DependencyMalOsvId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDependencyMalOsvId0 performs a merge with any union data inside the Dependency_MalOsvId, using the provided DependencyMalOsvId0
func (t *Dependency_MalOsvId) MergeDependencyMalOsvId0(v DependencyMalOsvId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Dependency_MalOsvId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Dependency_MalOsvId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDependencyVulnSeverity0 returns the union data inside the Dependency_VulnSeverity as a DependencyVulnSeverity0
func (t Dependency_VulnSeverity) AsDependencyVulnSeverity0() (DependencyVulnSeverity0, error) {
	var body DependencyVulnSeverity0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDependencyVulnSeverity0 overwrites any union data inside the Dependency_VulnSeverity as the provided DependencyVulnSeverity0
func (t *Dependency_VulnSeverity) FromDependencyVulnSeverity0(v DependencyVulnSeverity0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDependencyVulnSeverity0 performs a merge with any union data inside the Dependency_VulnSeverity, using the provided DependencyVulnSeverity0
func (t *Dependency_VulnSeverity) MergeDependencyVulnSeverity0(v DependencyVulnSeverity0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDependencyVulnSeverity1 returns the union data inside the Dependency_VulnSeverity as a DependencyVulnSeverity1
func (t Dependency_VulnSeverity) AsDependencyVulnSeverity1() (DependencyVulnSeverity1, error) {
	var body DependencyVulnSeverity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDependencyVulnSeverity1 overwrites any union data inside the Dependency_VulnSeverity as the provided DependencyVulnSeverity1
func (t *Dependency_VulnSeverity) FromDependencyVulnSeverity1(v DependencyVulnSeverity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDependencyVulnSeverity1 performs a merge with any union data inside the Dependency_VulnSeverity, using the provided DependencyVulnSeverity1
func (t *Dependency_VulnSeverity) MergeDependencyVulnSeverity1(v DependencyVulnSeverity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Dependency_VulnSeverity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Dependency_VulnSeverity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDependencyResponseContext0 returns the union data inside the DependencyResponse_Context as a DependencyResponseContext0
func (t DependencyResponse_Context) AsDependencyResponseContext0() (DependencyResponseContext0, error) {
	var body DependencyResponseContext0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDependencyResponseContext0 overwrites any union data inside the DependencyResponse_Context as the provided DependencyResponseContext0
func (t *DependencyResponse_Context) FromDependencyResponseContext0(v DependencyResponseContext0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDependencyResponseContext0 performs a merge with any union data inside the DependencyResponse_Context, using the provided DependencyResponseContext0
func (t *DependencyResponse_Context) MergeDependencyResponseContext0(v DependencyResponseContext0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DependencyResponse_Context) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DependencyResponse_Context) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHistoricalProvenanceOT returns the union data inside the HistoricalProvenance_OverTime as a HistoricalProvenanceOT
func (t HistoricalProvenance_OverTime) AsHistoricalProvenanceOT() (HistoricalProvenanceOT, error) {
	var body HistoricalProvenanceOT
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHistoricalProvenanceOT overwrites any union data inside the HistoricalProvenance_OverTime as the provided HistoricalProvenanceOT
func (t *HistoricalProvenance_OverTime) FromHistoricalProvenanceOT(v HistoricalProvenanceOT) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHistoricalProvenanceOT performs a merge with any union data inside the HistoricalProvenance_OverTime, using the provided HistoricalProvenanceOT
func (t *HistoricalProvenance_OverTime) MergeHistoricalProvenanceOT(v HistoricalProvenanceOT) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHistoricalProvenanceOverTime1 returns the union data inside the HistoricalProvenance_OverTime as a HistoricalProvenanceOverTime1
func (t HistoricalProvenance_OverTime) AsHistoricalProvenanceOverTime1() (HistoricalProvenanceOverTime1, error) {
	var body HistoricalProvenanceOverTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHistoricalProvenanceOverTime1 overwrites any union data inside the HistoricalProvenance_OverTime as the provided HistoricalProvenanceOverTime1
func (t *HistoricalProvenance_OverTime) FromHistoricalProvenanceOverTime1(v HistoricalProvenanceOverTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHistoricalProvenanceOverTime1 performs a merge with any union data inside the HistoricalProvenance_OverTime, using the provided HistoricalProvenanceOverTime1
func (t *HistoricalProvenance_OverTime) MergeHistoricalProvenanceOverTime1(v HistoricalProvenanceOverTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HistoricalProvenance_OverTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HistoricalProvenance_OverTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLicenseLicense0 returns the union data inside the License_License as a LicenseLicense0
func (t License_License) AsLicenseLicense0() (LicenseLicense0, error) {
	var body LicenseLicense0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLicenseLicense0 overwrites any union data inside the License_License as the provided LicenseLicense0
func (t *License_License) FromLicenseLicense0(v LicenseLicense0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLicenseLicense0 performs a merge with any union data inside the License_License, using the provided LicenseLicense0
func (t *License_License) MergeLicenseLicense0(v LicenseLicense0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t License_License) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *License_License) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLicenseClaimClaim0 returns the union data inside the LicenseClaim_Claim as a LicenseClaimClaim0
func (t LicenseClaim_Claim) AsLicenseClaimClaim0() (LicenseClaimClaim0, error) {
	var body LicenseClaimClaim0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLicenseClaimClaim0 overwrites any union data inside the LicenseClaim_Claim as the provided LicenseClaimClaim0
func (t *LicenseClaim_Claim) FromLicenseClaimClaim0(v LicenseClaimClaim0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLicenseClaimClaim0 performs a merge with any union data inside the LicenseClaim_Claim, using the provided LicenseClaimClaim0
func (t *LicenseClaim_Claim) MergeLicenseClaimClaim0(v LicenseClaimClaim0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LicenseClaim_Claim) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LicenseClaim_Claim) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLicenseClaimContent0 returns the union data inside the LicenseClaim_Content as a LicenseClaimContent0
func (t LicenseClaim_Content) AsLicenseClaimContent0() (LicenseClaimContent0, error) {
	var body LicenseClaimContent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLicenseClaimContent0 overwrites any union data inside the LicenseClaim_Content as the provided LicenseClaimContent0
func (t *LicenseClaim_Content) FromLicenseClaimContent0(v LicenseClaimContent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLicenseClaimContent0 performs a merge with any union data inside the LicenseClaim_Content, using the provided LicenseClaimContent0
func (t *LicenseClaim_Content) MergeLicenseClaimContent0(v LicenseClaimContent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LicenseClaim_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LicenseClaim_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLicenseClaimDescription0 returns the union data inside the LicenseClaim_Description as a LicenseClaimDescription0
func (t LicenseClaim_Description) AsLicenseClaimDescription0() (LicenseClaimDescription0, error) {
	var body LicenseClaimDescription0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLicenseClaimDescription0 overwrites any union data inside the LicenseClaim_Description as the provided LicenseClaimDescription0
func (t *LicenseClaim_Description) FromLicenseClaimDescription0(v LicenseClaimDescription0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLicenseClaimDescription0 performs a merge with any union data inside the LicenseClaim_Description, using the provided LicenseClaimDescription0
func (t *LicenseClaim_Description) MergeLicenseClaimDescription0(v LicenseClaimDescription0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LicenseClaim_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LicenseClaim_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLicenseClaimSource0 returns the union data inside the LicenseClaim_Source as a LicenseClaimSource0
func (t LicenseClaim_Source) AsLicenseClaimSource0() (LicenseClaimSource0, error) {
	var body LicenseClaimSource0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLicenseClaimSource0 overwrites any union data inside the LicenseClaim_Source as the provided LicenseClaimSource0
func (t *LicenseClaim_Source) FromLicenseClaimSource0(v LicenseClaimSource0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLicenseClaimSource0 performs a merge with any union data inside the LicenseClaim_Source, using the provided LicenseClaimSource0
func (t *LicenseClaim_Source) MergeLicenseClaimSource0(v LicenseClaimSource0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LicenseClaim_Source) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LicenseClaim_Source) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLicenseClaimUrl0 returns the union data inside the LicenseClaim_Url as a LicenseClaimUrl0
func (t LicenseClaim_Url) AsLicenseClaimUrl0() (LicenseClaimUrl0, error) {
	var body LicenseClaimUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLicenseClaimUrl0 overwrites any union data inside the LicenseClaim_Url as the provided LicenseClaimUrl0
func (t *LicenseClaim_Url) FromLicenseClaimUrl0(v LicenseClaimUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLicenseClaimUrl0 performs a merge with any union data inside the LicenseClaim_Url, using the provided LicenseClaimUrl0
func (t *LicenseClaim_Url) MergeLicenseClaimUrl0(v LicenseClaimUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LicenseClaim_Url) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LicenseClaim_Url) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageAlternativesPackages0 returns the union data inside the PackageAlternatives_Packages as a PackageAlternativesPackages0
func (t PackageAlternatives_Packages) AsPackageAlternativesPackages0() (PackageAlternativesPackages0, error) {
	var body PackageAlternativesPackages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAlternativesPackages0 overwrites any union data inside the PackageAlternatives_Packages as the provided PackageAlternativesPackages0
func (t *PackageAlternatives_Packages) FromPackageAlternativesPackages0(v PackageAlternativesPackages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAlternativesPackages0 performs a merge with any union data inside the PackageAlternatives_Packages, using the provided PackageAlternativesPackages0
func (t *PackageAlternatives_Packages) MergePackageAlternativesPackages0(v PackageAlternativesPackages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageAlternatives_Packages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageAlternatives_Packages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageAnnotationScore0 returns the union data inside the PackageAnnotation_Score as a PackageAnnotationScore0
func (t PackageAnnotation_Score) AsPackageAnnotationScore0() (PackageAnnotationScore0, error) {
	var body PackageAnnotationScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAnnotationScore0 overwrites any union data inside the PackageAnnotation_Score as the provided PackageAnnotationScore0
func (t *PackageAnnotation_Score) FromPackageAnnotationScore0(v PackageAnnotationScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAnnotationScore0 performs a merge with any union data inside the PackageAnnotation_Score, using the provided PackageAnnotationScore0
func (t *PackageAnnotation_Score) MergePackageAnnotationScore0(v PackageAnnotationScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageAnnotation_Score) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageAnnotation_Score) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageBasicInfoPackageVersion0 returns the union data inside the PackageBasicInfo_PackageVersion as a PackageBasicInfoPackageVersion0
func (t PackageBasicInfo_PackageVersion) AsPackageBasicInfoPackageVersion0() (PackageBasicInfoPackageVersion0, error) {
	var body PackageBasicInfoPackageVersion0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageBasicInfoPackageVersion0 overwrites any union data inside the PackageBasicInfo_PackageVersion as the provided PackageBasicInfoPackageVersion0
func (t *PackageBasicInfo_PackageVersion) FromPackageBasicInfoPackageVersion0(v PackageBasicInfoPackageVersion0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageBasicInfoPackageVersion0 performs a merge with any union data inside the PackageBasicInfo_PackageVersion, using the provided PackageBasicInfoPackageVersion0
func (t *PackageBasicInfo_PackageVersion) MergePackageBasicInfoPackageVersion0(v PackageBasicInfoPackageVersion0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageBasicInfo_PackageVersion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageBasicInfo_PackageVersion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageAnnotation returns the union data inside the PackageBasicInfo_Provenance as a PackageAnnotation
func (t PackageBasicInfo_Provenance) AsPackageAnnotation() (PackageAnnotation, error) {
	var body PackageAnnotation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAnnotation overwrites any union data inside the PackageBasicInfo_Provenance as the provided PackageAnnotation
func (t *PackageBasicInfo_Provenance) FromPackageAnnotation(v PackageAnnotation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAnnotation performs a merge with any union data inside the PackageBasicInfo_Provenance, using the provided PackageAnnotation
func (t *PackageBasicInfo_Provenance) MergePackageAnnotation(v PackageAnnotation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageBasicInfoProvenance1 returns the union data inside the PackageBasicInfo_Provenance as a PackageBasicInfoProvenance1
func (t PackageBasicInfo_Provenance) AsPackageBasicInfoProvenance1() (PackageBasicInfoProvenance1, error) {
	var body PackageBasicInfoProvenance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageBasicInfoProvenance1 overwrites any union data inside the PackageBasicInfo_Provenance as the provided PackageBasicInfoProvenance1
func (t *PackageBasicInfo_Provenance) FromPackageBasicInfoProvenance1(v PackageBasicInfoProvenance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageBasicInfoProvenance1 performs a merge with any union data inside the PackageBasicInfo_Provenance, using the provided PackageBasicInfoProvenance1
func (t *PackageBasicInfo_Provenance) MergePackageBasicInfoProvenance1(v PackageBasicInfoProvenance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageBasicInfo_Provenance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageBasicInfo_Provenance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageBasicInfoRepoDescription0 returns the union data inside the PackageBasicInfo_RepoDescription as a PackageBasicInfoRepoDescription0
func (t PackageBasicInfo_RepoDescription) AsPackageBasicInfoRepoDescription0() (PackageBasicInfoRepoDescription0, error) {
	var body PackageBasicInfoRepoDescription0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageBasicInfoRepoDescription0 overwrites any union data inside the PackageBasicInfo_RepoDescription as the provided PackageBasicInfoRepoDescription0
func (t *PackageBasicInfo_RepoDescription) FromPackageBasicInfoRepoDescription0(v PackageBasicInfoRepoDescription0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageBasicInfoRepoDescription0 performs a merge with any union data inside the PackageBasicInfo_RepoDescription, using the provided PackageBasicInfoRepoDescription0
func (t *PackageBasicInfo_RepoDescription) MergePackageBasicInfoRepoDescription0(v PackageBasicInfoRepoDescription0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageBasicInfo_RepoDescription) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageBasicInfo_RepoDescription) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageBasicInfoScore0 returns the union data inside the PackageBasicInfo_Score as a PackageBasicInfoScore0
func (t PackageBasicInfo_Score) AsPackageBasicInfoScore0() (PackageBasicInfoScore0, error) {
	var body PackageBasicInfoScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageBasicInfoScore0 overwrites any union data inside the PackageBasicInfo_Score as the provided PackageBasicInfoScore0
func (t *PackageBasicInfo_Score) FromPackageBasicInfoScore0(v PackageBasicInfoScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageBasicInfoScore0 performs a merge with any union data inside the PackageBasicInfo_Score, using the provided PackageBasicInfoScore0
func (t *PackageBasicInfo_Score) MergePackageBasicInfoScore0(v PackageBasicInfoScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageBasicInfo_Score) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageBasicInfo_Score) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataAuthor0 returns the union data inside the PackageContributorData_Author as a PackageContributorDataAuthor0
func (t PackageContributorData_Author) AsPackageContributorDataAuthor0() (PackageContributorDataAuthor0, error) {
	var body PackageContributorDataAuthor0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataAuthor0 overwrites any union data inside the PackageContributorData_Author as the provided PackageContributorDataAuthor0
func (t *PackageContributorData_Author) FromPackageContributorDataAuthor0(v PackageContributorDataAuthor0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataAuthor0 performs a merge with any union data inside the PackageContributorData_Author, using the provided PackageContributorDataAuthor0
func (t *PackageContributorData_Author) MergePackageContributorDataAuthor0(v PackageContributorDataAuthor0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Author) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Author) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataAuthorEmail0 returns the union data inside the PackageContributorData_AuthorEmail as a PackageContributorDataAuthorEmail0
func (t PackageContributorData_AuthorEmail) AsPackageContributorDataAuthorEmail0() (PackageContributorDataAuthorEmail0, error) {
	var body PackageContributorDataAuthorEmail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataAuthorEmail0 overwrites any union data inside the PackageContributorData_AuthorEmail as the provided PackageContributorDataAuthorEmail0
func (t *PackageContributorData_AuthorEmail) FromPackageContributorDataAuthorEmail0(v PackageContributorDataAuthorEmail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataAuthorEmail0 performs a merge with any union data inside the PackageContributorData_AuthorEmail, using the provided PackageContributorDataAuthorEmail0
func (t *PackageContributorData_AuthorEmail) MergePackageContributorDataAuthorEmail0(v PackageContributorDataAuthorEmail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_AuthorEmail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_AuthorEmail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataAvatarUrl0 returns the union data inside the PackageContributorData_AvatarUrl as a PackageContributorDataAvatarUrl0
func (t PackageContributorData_AvatarUrl) AsPackageContributorDataAvatarUrl0() (PackageContributorDataAvatarUrl0, error) {
	var body PackageContributorDataAvatarUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataAvatarUrl0 overwrites any union data inside the PackageContributorData_AvatarUrl as the provided PackageContributorDataAvatarUrl0
func (t *PackageContributorData_AvatarUrl) FromPackageContributorDataAvatarUrl0(v PackageContributorDataAvatarUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataAvatarUrl0 performs a merge with any union data inside the PackageContributorData_AvatarUrl, using the provided PackageContributorDataAvatarUrl0
func (t *PackageContributorData_AvatarUrl) MergePackageContributorDataAvatarUrl0(v PackageContributorDataAvatarUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_AvatarUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_AvatarUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataBlog0 returns the union data inside the PackageContributorData_Blog as a PackageContributorDataBlog0
func (t PackageContributorData_Blog) AsPackageContributorDataBlog0() (PackageContributorDataBlog0, error) {
	var body PackageContributorDataBlog0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataBlog0 overwrites any union data inside the PackageContributorData_Blog as the provided PackageContributorDataBlog0
func (t *PackageContributorData_Blog) FromPackageContributorDataBlog0(v PackageContributorDataBlog0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataBlog0 performs a merge with any union data inside the PackageContributorData_Blog, using the provided PackageContributorDataBlog0
func (t *PackageContributorData_Blog) MergePackageContributorDataBlog0(v PackageContributorDataBlog0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Blog) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Blog) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataCompany0 returns the union data inside the PackageContributorData_Company as a PackageContributorDataCompany0
func (t PackageContributorData_Company) AsPackageContributorDataCompany0() (PackageContributorDataCompany0, error) {
	var body PackageContributorDataCompany0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataCompany0 overwrites any union data inside the PackageContributorData_Company as the provided PackageContributorDataCompany0
func (t *PackageContributorData_Company) FromPackageContributorDataCompany0(v PackageContributorDataCompany0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataCompany0 performs a merge with any union data inside the PackageContributorData_Company, using the provided PackageContributorDataCompany0
func (t *PackageContributorData_Company) MergePackageContributorDataCompany0(v PackageContributorDataCompany0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Company) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Company) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataEmail0 returns the union data inside the PackageContributorData_Email as a PackageContributorDataEmail0
func (t PackageContributorData_Email) AsPackageContributorDataEmail0() (PackageContributorDataEmail0, error) {
	var body PackageContributorDataEmail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataEmail0 overwrites any union data inside the PackageContributorData_Email as the provided PackageContributorDataEmail0
func (t *PackageContributorData_Email) FromPackageContributorDataEmail0(v PackageContributorDataEmail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataEmail0 performs a merge with any union data inside the PackageContributorData_Email, using the provided PackageContributorDataEmail0
func (t *PackageContributorData_Email) MergePackageContributorDataEmail0(v PackageContributorDataEmail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Email) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Email) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataFollowers0 returns the union data inside the PackageContributorData_Followers as a PackageContributorDataFollowers0
func (t PackageContributorData_Followers) AsPackageContributorDataFollowers0() (PackageContributorDataFollowers0, error) {
	var body PackageContributorDataFollowers0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataFollowers0 overwrites any union data inside the PackageContributorData_Followers as the provided PackageContributorDataFollowers0
func (t *PackageContributorData_Followers) FromPackageContributorDataFollowers0(v PackageContributorDataFollowers0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataFollowers0 performs a merge with any union data inside the PackageContributorData_Followers, using the provided PackageContributorDataFollowers0
func (t *PackageContributorData_Followers) MergePackageContributorDataFollowers0(v PackageContributorDataFollowers0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Followers) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Followers) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataFollowing0 returns the union data inside the PackageContributorData_Following as a PackageContributorDataFollowing0
func (t PackageContributorData_Following) AsPackageContributorDataFollowing0() (PackageContributorDataFollowing0, error) {
	var body PackageContributorDataFollowing0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataFollowing0 overwrites any union data inside the PackageContributorData_Following as the provided PackageContributorDataFollowing0
func (t *PackageContributorData_Following) FromPackageContributorDataFollowing0(v PackageContributorDataFollowing0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataFollowing0 performs a merge with any union data inside the PackageContributorData_Following, using the provided PackageContributorDataFollowing0
func (t *PackageContributorData_Following) MergePackageContributorDataFollowing0(v PackageContributorDataFollowing0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Following) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Following) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataGravatarId0 returns the union data inside the PackageContributorData_GravatarId as a PackageContributorDataGravatarId0
func (t PackageContributorData_GravatarId) AsPackageContributorDataGravatarId0() (PackageContributorDataGravatarId0, error) {
	var body PackageContributorDataGravatarId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataGravatarId0 overwrites any union data inside the PackageContributorData_GravatarId as the provided PackageContributorDataGravatarId0
func (t *PackageContributorData_GravatarId) FromPackageContributorDataGravatarId0(v PackageContributorDataGravatarId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataGravatarId0 performs a merge with any union data inside the PackageContributorData_GravatarId, using the provided PackageContributorDataGravatarId0
func (t *PackageContributorData_GravatarId) MergePackageContributorDataGravatarId0(v PackageContributorDataGravatarId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_GravatarId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_GravatarId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataHireable0 returns the union data inside the PackageContributorData_Hireable as a PackageContributorDataHireable0
func (t PackageContributorData_Hireable) AsPackageContributorDataHireable0() (PackageContributorDataHireable0, error) {
	var body PackageContributorDataHireable0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataHireable0 overwrites any union data inside the PackageContributorData_Hireable as the provided PackageContributorDataHireable0
func (t *PackageContributorData_Hireable) FromPackageContributorDataHireable0(v PackageContributorDataHireable0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataHireable0 performs a merge with any union data inside the PackageContributorData_Hireable, using the provided PackageContributorDataHireable0
func (t *PackageContributorData_Hireable) MergePackageContributorDataHireable0(v PackageContributorDataHireable0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Hireable) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Hireable) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataHtmlUrl0 returns the union data inside the PackageContributorData_HtmlUrl as a PackageContributorDataHtmlUrl0
func (t PackageContributorData_HtmlUrl) AsPackageContributorDataHtmlUrl0() (PackageContributorDataHtmlUrl0, error) {
	var body PackageContributorDataHtmlUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataHtmlUrl0 overwrites any union data inside the PackageContributorData_HtmlUrl as the provided PackageContributorDataHtmlUrl0
func (t *PackageContributorData_HtmlUrl) FromPackageContributorDataHtmlUrl0(v PackageContributorDataHtmlUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataHtmlUrl0 performs a merge with any union data inside the PackageContributorData_HtmlUrl, using the provided PackageContributorDataHtmlUrl0
func (t *PackageContributorData_HtmlUrl) MergePackageContributorDataHtmlUrl0(v PackageContributorDataHtmlUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_HtmlUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_HtmlUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataLocation0 returns the union data inside the PackageContributorData_Location as a PackageContributorDataLocation0
func (t PackageContributorData_Location) AsPackageContributorDataLocation0() (PackageContributorDataLocation0, error) {
	var body PackageContributorDataLocation0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataLocation0 overwrites any union data inside the PackageContributorData_Location as the provided PackageContributorDataLocation0
func (t *PackageContributorData_Location) FromPackageContributorDataLocation0(v PackageContributorDataLocation0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataLocation0 performs a merge with any union data inside the PackageContributorData_Location, using the provided PackageContributorDataLocation0
func (t *PackageContributorData_Location) MergePackageContributorDataLocation0(v PackageContributorDataLocation0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataLogin0 returns the union data inside the PackageContributorData_Login as a PackageContributorDataLogin0
func (t PackageContributorData_Login) AsPackageContributorDataLogin0() (PackageContributorDataLogin0, error) {
	var body PackageContributorDataLogin0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataLogin0 overwrites any union data inside the PackageContributorData_Login as the provided PackageContributorDataLogin0
func (t *PackageContributorData_Login) FromPackageContributorDataLogin0(v PackageContributorDataLogin0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataLogin0 performs a merge with any union data inside the PackageContributorData_Login, using the provided PackageContributorDataLogin0
func (t *PackageContributorData_Login) MergePackageContributorDataLogin0(v PackageContributorDataLogin0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Login) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Login) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataPublicGists0 returns the union data inside the PackageContributorData_PublicGists as a PackageContributorDataPublicGists0
func (t PackageContributorData_PublicGists) AsPackageContributorDataPublicGists0() (PackageContributorDataPublicGists0, error) {
	var body PackageContributorDataPublicGists0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataPublicGists0 overwrites any union data inside the PackageContributorData_PublicGists as the provided PackageContributorDataPublicGists0
func (t *PackageContributorData_PublicGists) FromPackageContributorDataPublicGists0(v PackageContributorDataPublicGists0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataPublicGists0 performs a merge with any union data inside the PackageContributorData_PublicGists, using the provided PackageContributorDataPublicGists0
func (t *PackageContributorData_PublicGists) MergePackageContributorDataPublicGists0(v PackageContributorDataPublicGists0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_PublicGists) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_PublicGists) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataPublicRepos0 returns the union data inside the PackageContributorData_PublicRepos as a PackageContributorDataPublicRepos0
func (t PackageContributorData_PublicRepos) AsPackageContributorDataPublicRepos0() (PackageContributorDataPublicRepos0, error) {
	var body PackageContributorDataPublicRepos0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataPublicRepos0 overwrites any union data inside the PackageContributorData_PublicRepos as the provided PackageContributorDataPublicRepos0
func (t *PackageContributorData_PublicRepos) FromPackageContributorDataPublicRepos0(v PackageContributorDataPublicRepos0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataPublicRepos0 performs a merge with any union data inside the PackageContributorData_PublicRepos, using the provided PackageContributorDataPublicRepos0
func (t *PackageContributorData_PublicRepos) MergePackageContributorDataPublicRepos0(v PackageContributorDataPublicRepos0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_PublicRepos) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_PublicRepos) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPersonAnnotation returns the union data inside the PackageContributorData_Scores as a PersonAnnotation
func (t PackageContributorData_Scores) AsPersonAnnotation() (PersonAnnotation, error) {
	var body PersonAnnotation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPersonAnnotation overwrites any union data inside the PackageContributorData_Scores as the provided PersonAnnotation
func (t *PackageContributorData_Scores) FromPersonAnnotation(v PersonAnnotation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePersonAnnotation performs a merge with any union data inside the PackageContributorData_Scores, using the provided PersonAnnotation
func (t *PackageContributorData_Scores) MergePersonAnnotation(v PersonAnnotation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageContributorDataScores1 returns the union data inside the PackageContributorData_Scores as a PackageContributorDataScores1
func (t PackageContributorData_Scores) AsPackageContributorDataScores1() (PackageContributorDataScores1, error) {
	var body PackageContributorDataScores1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataScores1 overwrites any union data inside the PackageContributorData_Scores as the provided PackageContributorDataScores1
func (t *PackageContributorData_Scores) FromPackageContributorDataScores1(v PackageContributorDataScores1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataScores1 performs a merge with any union data inside the PackageContributorData_Scores, using the provided PackageContributorDataScores1
func (t *PackageContributorData_Scores) MergePackageContributorDataScores1(v PackageContributorDataScores1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Scores) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Scores) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataTwitterUsername0 returns the union data inside the PackageContributorData_TwitterUsername as a PackageContributorDataTwitterUsername0
func (t PackageContributorData_TwitterUsername) AsPackageContributorDataTwitterUsername0() (PackageContributorDataTwitterUsername0, error) {
	var body PackageContributorDataTwitterUsername0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataTwitterUsername0 overwrites any union data inside the PackageContributorData_TwitterUsername as the provided PackageContributorDataTwitterUsername0
func (t *PackageContributorData_TwitterUsername) FromPackageContributorDataTwitterUsername0(v PackageContributorDataTwitterUsername0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataTwitterUsername0 performs a merge with any union data inside the PackageContributorData_TwitterUsername, using the provided PackageContributorDataTwitterUsername0
func (t *PackageContributorData_TwitterUsername) MergePackageContributorDataTwitterUsername0(v PackageContributorDataTwitterUsername0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_TwitterUsername) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_TwitterUsername) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorDataUrl0 returns the union data inside the PackageContributorData_Url as a PackageContributorDataUrl0
func (t PackageContributorData_Url) AsPackageContributorDataUrl0() (PackageContributorDataUrl0, error) {
	var body PackageContributorDataUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorDataUrl0 overwrites any union data inside the PackageContributorData_Url as the provided PackageContributorDataUrl0
func (t *PackageContributorData_Url) FromPackageContributorDataUrl0(v PackageContributorDataUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorDataUrl0 performs a merge with any union data inside the PackageContributorData_Url, using the provided PackageContributorDataUrl0
func (t *PackageContributorData_Url) MergePackageContributorDataUrl0(v PackageContributorDataUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageContributorData_Url) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageContributorData_Url) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageMaliciousPayloadDetails0 returns the union data inside the PackageMaliciousPayload_Details as a PackageMaliciousPayloadDetails0
func (t PackageMaliciousPayload_Details) AsPackageMaliciousPayloadDetails0() (PackageMaliciousPayloadDetails0, error) {
	var body PackageMaliciousPayloadDetails0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageMaliciousPayloadDetails0 overwrites any union data inside the PackageMaliciousPayload_Details as the provided PackageMaliciousPayloadDetails0
func (t *PackageMaliciousPayload_Details) FromPackageMaliciousPayloadDetails0(v PackageMaliciousPayloadDetails0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageMaliciousPayloadDetails0 performs a merge with any union data inside the PackageMaliciousPayload_Details, using the provided PackageMaliciousPayloadDetails0
func (t *PackageMaliciousPayload_Details) MergePackageMaliciousPayloadDetails0(v PackageMaliciousPayloadDetails0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageMaliciousPayload_Details) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageMaliciousPayload_Details) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageMaliciousPayloadModified0 returns the union data inside the PackageMaliciousPayload_Modified as a PackageMaliciousPayloadModified0
func (t PackageMaliciousPayload_Modified) AsPackageMaliciousPayloadModified0() (PackageMaliciousPayloadModified0, error) {
	var body PackageMaliciousPayloadModified0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageMaliciousPayloadModified0 overwrites any union data inside the PackageMaliciousPayload_Modified as the provided PackageMaliciousPayloadModified0
func (t *PackageMaliciousPayload_Modified) FromPackageMaliciousPayloadModified0(v PackageMaliciousPayloadModified0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageMaliciousPayloadModified0 performs a merge with any union data inside the PackageMaliciousPayload_Modified, using the provided PackageMaliciousPayloadModified0
func (t *PackageMaliciousPayload_Modified) MergePackageMaliciousPayloadModified0(v PackageMaliciousPayloadModified0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageMaliciousPayload_Modified) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageMaliciousPayload_Modified) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageMaliciousPayloadPublished0 returns the union data inside the PackageMaliciousPayload_Published as a PackageMaliciousPayloadPublished0
func (t PackageMaliciousPayload_Published) AsPackageMaliciousPayloadPublished0() (PackageMaliciousPayloadPublished0, error) {
	var body PackageMaliciousPayloadPublished0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageMaliciousPayloadPublished0 overwrites any union data inside the PackageMaliciousPayload_Published as the provided PackageMaliciousPayloadPublished0
func (t *PackageMaliciousPayload_Published) FromPackageMaliciousPayloadPublished0(v PackageMaliciousPayloadPublished0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageMaliciousPayloadPublished0 performs a merge with any union data inside the PackageMaliciousPayload_Published, using the provided PackageMaliciousPayloadPublished0
func (t *PackageMaliciousPayload_Published) MergePackageMaliciousPayloadPublished0(v PackageMaliciousPayloadPublished0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageMaliciousPayload_Published) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageMaliciousPayload_Published) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageMaliciousPayloadSource0 returns the union data inside the PackageMaliciousPayload_Source as a PackageMaliciousPayloadSource0
func (t PackageMaliciousPayload_Source) AsPackageMaliciousPayloadSource0() (PackageMaliciousPayloadSource0, error) {
	var body PackageMaliciousPayloadSource0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageMaliciousPayloadSource0 overwrites any union data inside the PackageMaliciousPayload_Source as the provided PackageMaliciousPayloadSource0
func (t *PackageMaliciousPayload_Source) FromPackageMaliciousPayloadSource0(v PackageMaliciousPayloadSource0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageMaliciousPayloadSource0 performs a merge with any union data inside the PackageMaliciousPayload_Source, using the provided PackageMaliciousPayloadSource0
func (t *PackageMaliciousPayload_Source) MergePackageMaliciousPayloadSource0(v PackageMaliciousPayloadSource0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageMaliciousPayload_Source) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageMaliciousPayload_Source) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageSimilarResultSimilarPackageNames0 returns the union data inside the PackageSimilarResult_SimilarPackageNames as a PackageSimilarResultSimilarPackageNames0
func (t PackageSimilarResult_SimilarPackageNames) AsPackageSimilarResultSimilarPackageNames0() (PackageSimilarResultSimilarPackageNames0, error) {
	var body PackageSimilarResultSimilarPackageNames0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageSimilarResultSimilarPackageNames0 overwrites any union data inside the PackageSimilarResult_SimilarPackageNames as the provided PackageSimilarResultSimilarPackageNames0
func (t *PackageSimilarResult_SimilarPackageNames) FromPackageSimilarResultSimilarPackageNames0(v PackageSimilarResultSimilarPackageNames0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageSimilarResultSimilarPackageNames0 performs a merge with any union data inside the PackageSimilarResult_SimilarPackageNames, using the provided PackageSimilarResultSimilarPackageNames0
func (t *PackageSimilarResult_SimilarPackageNames) MergePackageSimilarResultSimilarPackageNames0(v PackageSimilarResultSimilarPackageNames0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageSimilarResult_SimilarPackageNames) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageSimilarResult_SimilarPackageNames) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageSummaryAnnotationScore0 returns the union data inside the PackageSummaryAnnotation_Score as a PackageSummaryAnnotationScore0
func (t PackageSummaryAnnotation_Score) AsPackageSummaryAnnotationScore0() (PackageSummaryAnnotationScore0, error) {
	var body PackageSummaryAnnotationScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageSummaryAnnotationScore0 overwrites any union data inside the PackageSummaryAnnotation_Score as the provided PackageSummaryAnnotationScore0
func (t *PackageSummaryAnnotation_Score) FromPackageSummaryAnnotationScore0(v PackageSummaryAnnotationScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageSummaryAnnotationScore0 performs a merge with any union data inside the PackageSummaryAnnotation_Score, using the provided PackageSummaryAnnotationScore0
func (t *PackageSummaryAnnotation_Score) MergePackageSummaryAnnotationScore0(v PackageSummaryAnnotationScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PackageSummaryAnnotation_Score) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PackageSummaryAnnotation_Score) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPersonAnnotationScore0 returns the union data inside the PersonAnnotation_Score as a PersonAnnotationScore0
func (t PersonAnnotation_Score) AsPersonAnnotationScore0() (PersonAnnotationScore0, error) {
	var body PersonAnnotationScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPersonAnnotationScore0 overwrites any union data inside the PersonAnnotation_Score as the provided PersonAnnotationScore0
func (t *PersonAnnotation_Score) FromPersonAnnotationScore0(v PersonAnnotationScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePersonAnnotationScore0 performs a merge with any union data inside the PersonAnnotation_Score, using the provided PersonAnnotationScore0
func (t *PersonAnnotation_Score) MergePersonAnnotationScore0(v PersonAnnotationScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PersonAnnotation_Score) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PersonAnnotation_Score) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProvenanceData returns the union data inside the ProvenanceResponse_Sigstore as a ProvenanceData
func (t ProvenanceResponse_Sigstore) AsProvenanceData() (ProvenanceData, error) {
	var body ProvenanceData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvenanceData overwrites any union data inside the ProvenanceResponse_Sigstore as the provided ProvenanceData
func (t *ProvenanceResponse_Sigstore) FromProvenanceData(v ProvenanceData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvenanceData performs a merge with any union data inside the ProvenanceResponse_Sigstore, using the provided ProvenanceData
func (t *ProvenanceResponse_Sigstore) MergeProvenanceData(v ProvenanceData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProvenanceResponseSigstore1 returns the union data inside the ProvenanceResponse_Sigstore as a ProvenanceResponseSigstore1
func (t ProvenanceResponse_Sigstore) AsProvenanceResponseSigstore1() (ProvenanceResponseSigstore1, error) {
	var body ProvenanceResponseSigstore1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProvenanceResponseSigstore1 overwrites any union data inside the ProvenanceResponse_Sigstore as the provided ProvenanceResponseSigstore1
func (t *ProvenanceResponse_Sigstore) FromProvenanceResponseSigstore1(v ProvenanceResponseSigstore1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProvenanceResponseSigstore1 performs a merge with any union data inside the ProvenanceResponse_Sigstore, using the provided ProvenanceResponseSigstore1
func (t *ProvenanceResponse_Sigstore) MergeProvenanceResponseSigstore1(v ProvenanceResponseSigstore1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProvenanceResponse_Sigstore) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProvenanceResponse_Sigstore) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryAnnotationScore0 returns the union data inside the RepositoryAnnotation_Score as a RepositoryAnnotationScore0
func (t RepositoryAnnotation_Score) AsRepositoryAnnotationScore0() (RepositoryAnnotationScore0, error) {
	var body RepositoryAnnotationScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryAnnotationScore0 overwrites any union data inside the RepositoryAnnotation_Score as the provided RepositoryAnnotationScore0
func (t *RepositoryAnnotation_Score) FromRepositoryAnnotationScore0(v RepositoryAnnotationScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryAnnotationScore0 performs a merge with any union data inside the RepositoryAnnotation_Score, using the provided RepositoryAnnotationScore0
func (t *RepositoryAnnotation_Score) MergeRepositoryAnnotationScore0(v RepositoryAnnotationScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryAnnotation_Score) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryAnnotation_Score) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataContributorCount0 returns the union data inside the RepositoryData_ContributorCount as a RepositoryDataContributorCount0
func (t RepositoryData_ContributorCount) AsRepositoryDataContributorCount0() (RepositoryDataContributorCount0, error) {
	var body RepositoryDataContributorCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataContributorCount0 overwrites any union data inside the RepositoryData_ContributorCount as the provided RepositoryDataContributorCount0
func (t *RepositoryData_ContributorCount) FromRepositoryDataContributorCount0(v RepositoryDataContributorCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataContributorCount0 performs a merge with any union data inside the RepositoryData_ContributorCount, using the provided RepositoryDataContributorCount0
func (t *RepositoryData_ContributorCount) MergeRepositoryDataContributorCount0(v RepositoryDataContributorCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_ContributorCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_ContributorCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataForksCount0 returns the union data inside the RepositoryData_ForksCount as a RepositoryDataForksCount0
func (t RepositoryData_ForksCount) AsRepositoryDataForksCount0() (RepositoryDataForksCount0, error) {
	var body RepositoryDataForksCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataForksCount0 overwrites any union data inside the RepositoryData_ForksCount as the provided RepositoryDataForksCount0
func (t *RepositoryData_ForksCount) FromRepositoryDataForksCount0(v RepositoryDataForksCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataForksCount0 performs a merge with any union data inside the RepositoryData_ForksCount, using the provided RepositoryDataForksCount0
func (t *RepositoryData_ForksCount) MergeRepositoryDataForksCount0(v RepositoryDataForksCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_ForksCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_ForksCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataLastUpdate0 returns the union data inside the RepositoryData_LastUpdate as a RepositoryDataLastUpdate0
func (t RepositoryData_LastUpdate) AsRepositoryDataLastUpdate0() (RepositoryDataLastUpdate0, error) {
	var body RepositoryDataLastUpdate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataLastUpdate0 overwrites any union data inside the RepositoryData_LastUpdate as the provided RepositoryDataLastUpdate0
func (t *RepositoryData_LastUpdate) FromRepositoryDataLastUpdate0(v RepositoryDataLastUpdate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataLastUpdate0 performs a merge with any union data inside the RepositoryData_LastUpdate, using the provided RepositoryDataLastUpdate0
func (t *RepositoryData_LastUpdate) MergeRepositoryDataLastUpdate0(v RepositoryDataLastUpdate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_LastUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_LastUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataName0 returns the union data inside the RepositoryData_Name as a RepositoryDataName0
func (t RepositoryData_Name) AsRepositoryDataName0() (RepositoryDataName0, error) {
	var body RepositoryDataName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataName0 overwrites any union data inside the RepositoryData_Name as the provided RepositoryDataName0
func (t *RepositoryData_Name) FromRepositoryDataName0(v RepositoryDataName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataName0 performs a merge with any union data inside the RepositoryData_Name, using the provided RepositoryDataName0
func (t *RepositoryData_Name) MergeRepositoryDataName0(v RepositoryDataName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_Name) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_Name) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataOpenIssuesCount0 returns the union data inside the RepositoryData_OpenIssuesCount as a RepositoryDataOpenIssuesCount0
func (t RepositoryData_OpenIssuesCount) AsRepositoryDataOpenIssuesCount0() (RepositoryDataOpenIssuesCount0, error) {
	var body RepositoryDataOpenIssuesCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataOpenIssuesCount0 overwrites any union data inside the RepositoryData_OpenIssuesCount as the provided RepositoryDataOpenIssuesCount0
func (t *RepositoryData_OpenIssuesCount) FromRepositoryDataOpenIssuesCount0(v RepositoryDataOpenIssuesCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataOpenIssuesCount0 performs a merge with any union data inside the RepositoryData_OpenIssuesCount, using the provided RepositoryDataOpenIssuesCount0
func (t *RepositoryData_OpenIssuesCount) MergeRepositoryDataOpenIssuesCount0(v RepositoryDataOpenIssuesCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_OpenIssuesCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_OpenIssuesCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryAnnotation returns the union data inside the RepositoryData_Scores as a RepositoryAnnotation
func (t RepositoryData_Scores) AsRepositoryAnnotation() (RepositoryAnnotation, error) {
	var body RepositoryAnnotation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryAnnotation overwrites any union data inside the RepositoryData_Scores as the provided RepositoryAnnotation
func (t *RepositoryData_Scores) FromRepositoryAnnotation(v RepositoryAnnotation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryAnnotation performs a merge with any union data inside the RepositoryData_Scores, using the provided RepositoryAnnotation
func (t *RepositoryData_Scores) MergeRepositoryAnnotation(v RepositoryAnnotation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepositoryDataScores1 returns the union data inside the RepositoryData_Scores as a RepositoryDataScores1
func (t RepositoryData_Scores) AsRepositoryDataScores1() (RepositoryDataScores1, error) {
	var body RepositoryDataScores1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataScores1 overwrites any union data inside the RepositoryData_Scores as the provided RepositoryDataScores1
func (t *RepositoryData_Scores) FromRepositoryDataScores1(v RepositoryDataScores1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataScores1 performs a merge with any union data inside the RepositoryData_Scores, using the provided RepositoryDataScores1
func (t *RepositoryData_Scores) MergeRepositoryDataScores1(v RepositoryDataScores1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_Scores) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_Scores) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataStargazersCount0 returns the union data inside the RepositoryData_StargazersCount as a RepositoryDataStargazersCount0
func (t RepositoryData_StargazersCount) AsRepositoryDataStargazersCount0() (RepositoryDataStargazersCount0, error) {
	var body RepositoryDataStargazersCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataStargazersCount0 overwrites any union data inside the RepositoryData_StargazersCount as the provided RepositoryDataStargazersCount0
func (t *RepositoryData_StargazersCount) FromRepositoryDataStargazersCount0(v RepositoryDataStargazersCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataStargazersCount0 performs a merge with any union data inside the RepositoryData_StargazersCount, using the provided RepositoryDataStargazersCount0
func (t *RepositoryData_StargazersCount) MergeRepositoryDataStargazersCount0(v RepositoryDataStargazersCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_StargazersCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_StargazersCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataUrl0 returns the union data inside the RepositoryData_Url as a RepositoryDataUrl0
func (t RepositoryData_Url) AsRepositoryDataUrl0() (RepositoryDataUrl0, error) {
	var body RepositoryDataUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataUrl0 overwrites any union data inside the RepositoryData_Url as the provided RepositoryDataUrl0
func (t *RepositoryData_Url) FromRepositoryDataUrl0(v RepositoryDataUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataUrl0 performs a merge with any union data inside the RepositoryData_Url, using the provided RepositoryDataUrl0
func (t *RepositoryData_Url) MergeRepositoryDataUrl0(v RepositoryDataUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_Url) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_Url) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryDataWatchersCount0 returns the union data inside the RepositoryData_WatchersCount as a RepositoryDataWatchersCount0
func (t RepositoryData_WatchersCount) AsRepositoryDataWatchersCount0() (RepositoryDataWatchersCount0, error) {
	var body RepositoryDataWatchersCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryDataWatchersCount0 overwrites any union data inside the RepositoryData_WatchersCount as the provided RepositoryDataWatchersCount0
func (t *RepositoryData_WatchersCount) FromRepositoryDataWatchersCount0(v RepositoryDataWatchersCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryDataWatchersCount0 performs a merge with any union data inside the RepositoryData_WatchersCount, using the provided RepositoryDataWatchersCount0
func (t *RepositoryData_WatchersCount) MergeRepositoryDataWatchersCount0(v RepositoryDataWatchersCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryData_WatchersCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryData_WatchersCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryResultContributors0 returns the union data inside the RepositoryResult_Contributors as a RepositoryResultContributors0
func (t RepositoryResult_Contributors) AsRepositoryResultContributors0() (RepositoryResultContributors0, error) {
	var body RepositoryResultContributors0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryResultContributors0 overwrites any union data inside the RepositoryResult_Contributors as the provided RepositoryResultContributors0
func (t *RepositoryResult_Contributors) FromRepositoryResultContributors0(v RepositoryResultContributors0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryResultContributors0 performs a merge with any union data inside the RepositoryResult_Contributors, using the provided RepositoryResultContributors0
func (t *RepositoryResult_Contributors) MergeRepositoryResultContributors0(v RepositoryResultContributors0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryResult_Contributors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryResult_Contributors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRepositoryResultPackages0 returns the union data inside the RepositoryResult_Packages as a RepositoryResultPackages0
func (t RepositoryResult_Packages) AsRepositoryResultPackages0() (RepositoryResultPackages0, error) {
	var body RepositoryResultPackages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepositoryResultPackages0 overwrites any union data inside the RepositoryResult_Packages as the provided RepositoryResultPackages0
func (t *RepositoryResult_Packages) FromRepositoryResultPackages0(v RepositoryResultPackages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepositoryResultPackages0 performs a merge with any union data inside the RepositoryResult_Packages, using the provided RepositoryResultPackages0
func (t *RepositoryResult_Packages) MergeRepositoryResultPackages0(v RepositoryResultPackages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryResult_Packages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositoryResult_Packages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSameOriginPackagesResultSameOriginPackages0 returns the union data inside the SameOriginPackagesResult_SameOriginPackages as a SameOriginPackagesResultSameOriginPackages0
func (t SameOriginPackagesResult_SameOriginPackages) AsSameOriginPackagesResultSameOriginPackages0() (SameOriginPackagesResultSameOriginPackages0, error) {
	var body SameOriginPackagesResultSameOriginPackages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSameOriginPackagesResultSameOriginPackages0 overwrites any union data inside the SameOriginPackagesResult_SameOriginPackages as the provided SameOriginPackagesResultSameOriginPackages0
func (t *SameOriginPackagesResult_SameOriginPackages) FromSameOriginPackagesResultSameOriginPackages0(v SameOriginPackagesResultSameOriginPackages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSameOriginPackagesResultSameOriginPackages0 performs a merge with any union data inside the SameOriginPackagesResult_SameOriginPackages, using the provided SameOriginPackagesResultSameOriginPackages0
func (t *SameOriginPackagesResult_SameOriginPackages) MergeSameOriginPackagesResultSameOriginPackages0(v SameOriginPackagesResultSameOriginPackages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SameOriginPackagesResult_SameOriginPackages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SameOriginPackagesResult_SameOriginPackages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataArchived0 returns the union data inside the TrustyPackageData_Archived as a TrustyPackageDataArchived0
func (t TrustyPackageData_Archived) AsTrustyPackageDataArchived0() (TrustyPackageDataArchived0, error) {
	var body TrustyPackageDataArchived0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataArchived0 overwrites any union data inside the TrustyPackageData_Archived as the provided TrustyPackageDataArchived0
func (t *TrustyPackageData_Archived) FromTrustyPackageDataArchived0(v TrustyPackageDataArchived0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataArchived0 performs a merge with any union data inside the TrustyPackageData_Archived, using the provided TrustyPackageDataArchived0
func (t *TrustyPackageData_Archived) MergeTrustyPackageDataArchived0(v TrustyPackageDataArchived0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Archived) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Archived) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataAuthor0 returns the union data inside the TrustyPackageData_Author as a TrustyPackageDataAuthor0
func (t TrustyPackageData_Author) AsTrustyPackageDataAuthor0() (TrustyPackageDataAuthor0, error) {
	var body TrustyPackageDataAuthor0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataAuthor0 overwrites any union data inside the TrustyPackageData_Author as the provided TrustyPackageDataAuthor0
func (t *TrustyPackageData_Author) FromTrustyPackageDataAuthor0(v TrustyPackageDataAuthor0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataAuthor0 performs a merge with any union data inside the TrustyPackageData_Author, using the provided TrustyPackageDataAuthor0
func (t *TrustyPackageData_Author) MergeTrustyPackageDataAuthor0(v TrustyPackageDataAuthor0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Author) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Author) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataAuthorEmail0 returns the union data inside the TrustyPackageData_AuthorEmail as a TrustyPackageDataAuthorEmail0
func (t TrustyPackageData_AuthorEmail) AsTrustyPackageDataAuthorEmail0() (TrustyPackageDataAuthorEmail0, error) {
	var body TrustyPackageDataAuthorEmail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataAuthorEmail0 overwrites any union data inside the TrustyPackageData_AuthorEmail as the provided TrustyPackageDataAuthorEmail0
func (t *TrustyPackageData_AuthorEmail) FromTrustyPackageDataAuthorEmail0(v TrustyPackageDataAuthorEmail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataAuthorEmail0 performs a merge with any union data inside the TrustyPackageData_AuthorEmail, using the provided TrustyPackageDataAuthorEmail0
func (t *TrustyPackageData_AuthorEmail) MergeTrustyPackageDataAuthorEmail0(v TrustyPackageDataAuthorEmail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_AuthorEmail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_AuthorEmail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataContributorCount0 returns the union data inside the TrustyPackageData_ContributorCount as a TrustyPackageDataContributorCount0
func (t TrustyPackageData_ContributorCount) AsTrustyPackageDataContributorCount0() (TrustyPackageDataContributorCount0, error) {
	var body TrustyPackageDataContributorCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataContributorCount0 overwrites any union data inside the TrustyPackageData_ContributorCount as the provided TrustyPackageDataContributorCount0
func (t *TrustyPackageData_ContributorCount) FromTrustyPackageDataContributorCount0(v TrustyPackageDataContributorCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataContributorCount0 performs a merge with any union data inside the TrustyPackageData_ContributorCount, using the provided TrustyPackageDataContributorCount0
func (t *TrustyPackageData_ContributorCount) MergeTrustyPackageDataContributorCount0(v TrustyPackageDataContributorCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_ContributorCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_ContributorCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataContributors0 returns the union data inside the TrustyPackageData_Contributors as a TrustyPackageDataContributors0
func (t TrustyPackageData_Contributors) AsTrustyPackageDataContributors0() (TrustyPackageDataContributors0, error) {
	var body TrustyPackageDataContributors0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataContributors0 overwrites any union data inside the TrustyPackageData_Contributors as the provided TrustyPackageDataContributors0
func (t *TrustyPackageData_Contributors) FromTrustyPackageDataContributors0(v TrustyPackageDataContributors0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataContributors0 performs a merge with any union data inside the TrustyPackageData_Contributors, using the provided TrustyPackageDataContributors0
func (t *TrustyPackageData_Contributors) MergeTrustyPackageDataContributors0(v TrustyPackageDataContributors0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Contributors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Contributors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataDefaultBranch0 returns the union data inside the TrustyPackageData_DefaultBranch as a TrustyPackageDataDefaultBranch0
func (t TrustyPackageData_DefaultBranch) AsTrustyPackageDataDefaultBranch0() (TrustyPackageDataDefaultBranch0, error) {
	var body TrustyPackageDataDefaultBranch0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataDefaultBranch0 overwrites any union data inside the TrustyPackageData_DefaultBranch as the provided TrustyPackageDataDefaultBranch0
func (t *TrustyPackageData_DefaultBranch) FromTrustyPackageDataDefaultBranch0(v TrustyPackageDataDefaultBranch0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataDefaultBranch0 performs a merge with any union data inside the TrustyPackageData_DefaultBranch, using the provided TrustyPackageDataDefaultBranch0
func (t *TrustyPackageData_DefaultBranch) MergeTrustyPackageDataDefaultBranch0(v TrustyPackageDataDefaultBranch0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_DefaultBranch) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_DefaultBranch) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataDisabled0 returns the union data inside the TrustyPackageData_Disabled as a TrustyPackageDataDisabled0
func (t TrustyPackageData_Disabled) AsTrustyPackageDataDisabled0() (TrustyPackageDataDisabled0, error) {
	var body TrustyPackageDataDisabled0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataDisabled0 overwrites any union data inside the TrustyPackageData_Disabled as the provided TrustyPackageDataDisabled0
func (t *TrustyPackageData_Disabled) FromTrustyPackageDataDisabled0(v TrustyPackageDataDisabled0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataDisabled0 performs a merge with any union data inside the TrustyPackageData_Disabled, using the provided TrustyPackageDataDisabled0
func (t *TrustyPackageData_Disabled) MergeTrustyPackageDataDisabled0(v TrustyPackageDataDisabled0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Disabled) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Disabled) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataFollowers0 returns the union data inside the TrustyPackageData_Followers as a TrustyPackageDataFollowers0
func (t TrustyPackageData_Followers) AsTrustyPackageDataFollowers0() (TrustyPackageDataFollowers0, error) {
	var body TrustyPackageDataFollowers0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataFollowers0 overwrites any union data inside the TrustyPackageData_Followers as the provided TrustyPackageDataFollowers0
func (t *TrustyPackageData_Followers) FromTrustyPackageDataFollowers0(v TrustyPackageDataFollowers0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataFollowers0 performs a merge with any union data inside the TrustyPackageData_Followers, using the provided TrustyPackageDataFollowers0
func (t *TrustyPackageData_Followers) MergeTrustyPackageDataFollowers0(v TrustyPackageDataFollowers0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Followers) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Followers) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataFollowing0 returns the union data inside the TrustyPackageData_Following as a TrustyPackageDataFollowing0
func (t TrustyPackageData_Following) AsTrustyPackageDataFollowing0() (TrustyPackageDataFollowing0, error) {
	var body TrustyPackageDataFollowing0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataFollowing0 overwrites any union data inside the TrustyPackageData_Following as the provided TrustyPackageDataFollowing0
func (t *TrustyPackageData_Following) FromTrustyPackageDataFollowing0(v TrustyPackageDataFollowing0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataFollowing0 performs a merge with any union data inside the TrustyPackageData_Following, using the provided TrustyPackageDataFollowing0
func (t *TrustyPackageData_Following) MergeTrustyPackageDataFollowing0(v TrustyPackageDataFollowing0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Following) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Following) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataForksCount0 returns the union data inside the TrustyPackageData_ForksCount as a TrustyPackageDataForksCount0
func (t TrustyPackageData_ForksCount) AsTrustyPackageDataForksCount0() (TrustyPackageDataForksCount0, error) {
	var body TrustyPackageDataForksCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataForksCount0 overwrites any union data inside the TrustyPackageData_ForksCount as the provided TrustyPackageDataForksCount0
func (t *TrustyPackageData_ForksCount) FromTrustyPackageDataForksCount0(v TrustyPackageDataForksCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataForksCount0 performs a merge with any union data inside the TrustyPackageData_ForksCount, using the provided TrustyPackageDataForksCount0
func (t *TrustyPackageData_ForksCount) MergeTrustyPackageDataForksCount0(v TrustyPackageDataForksCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_ForksCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_ForksCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataHasDownloads0 returns the union data inside the TrustyPackageData_HasDownloads as a TrustyPackageDataHasDownloads0
func (t TrustyPackageData_HasDownloads) AsTrustyPackageDataHasDownloads0() (TrustyPackageDataHasDownloads0, error) {
	var body TrustyPackageDataHasDownloads0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataHasDownloads0 overwrites any union data inside the TrustyPackageData_HasDownloads as the provided TrustyPackageDataHasDownloads0
func (t *TrustyPackageData_HasDownloads) FromTrustyPackageDataHasDownloads0(v TrustyPackageDataHasDownloads0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataHasDownloads0 performs a merge with any union data inside the TrustyPackageData_HasDownloads, using the provided TrustyPackageDataHasDownloads0
func (t *TrustyPackageData_HasDownloads) MergeTrustyPackageDataHasDownloads0(v TrustyPackageDataHasDownloads0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_HasDownloads) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_HasDownloads) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataHasIssues0 returns the union data inside the TrustyPackageData_HasIssues as a TrustyPackageDataHasIssues0
func (t TrustyPackageData_HasIssues) AsTrustyPackageDataHasIssues0() (TrustyPackageDataHasIssues0, error) {
	var body TrustyPackageDataHasIssues0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataHasIssues0 overwrites any union data inside the TrustyPackageData_HasIssues as the provided TrustyPackageDataHasIssues0
func (t *TrustyPackageData_HasIssues) FromTrustyPackageDataHasIssues0(v TrustyPackageDataHasIssues0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataHasIssues0 performs a merge with any union data inside the TrustyPackageData_HasIssues, using the provided TrustyPackageDataHasIssues0
func (t *TrustyPackageData_HasIssues) MergeTrustyPackageDataHasIssues0(v TrustyPackageDataHasIssues0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_HasIssues) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_HasIssues) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataHasProjects0 returns the union data inside the TrustyPackageData_HasProjects as a TrustyPackageDataHasProjects0
func (t TrustyPackageData_HasProjects) AsTrustyPackageDataHasProjects0() (TrustyPackageDataHasProjects0, error) {
	var body TrustyPackageDataHasProjects0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataHasProjects0 overwrites any union data inside the TrustyPackageData_HasProjects as the provided TrustyPackageDataHasProjects0
func (t *TrustyPackageData_HasProjects) FromTrustyPackageDataHasProjects0(v TrustyPackageDataHasProjects0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataHasProjects0 performs a merge with any union data inside the TrustyPackageData_HasProjects, using the provided TrustyPackageDataHasProjects0
func (t *TrustyPackageData_HasProjects) MergeTrustyPackageDataHasProjects0(v TrustyPackageDataHasProjects0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_HasProjects) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_HasProjects) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataHasTriggeredReingestion0 returns the union data inside the TrustyPackageData_HasTriggeredReingestion as a TrustyPackageDataHasTriggeredReingestion0
func (t TrustyPackageData_HasTriggeredReingestion) AsTrustyPackageDataHasTriggeredReingestion0() (TrustyPackageDataHasTriggeredReingestion0, error) {
	var body TrustyPackageDataHasTriggeredReingestion0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataHasTriggeredReingestion0 overwrites any union data inside the TrustyPackageData_HasTriggeredReingestion as the provided TrustyPackageDataHasTriggeredReingestion0
func (t *TrustyPackageData_HasTriggeredReingestion) FromTrustyPackageDataHasTriggeredReingestion0(v TrustyPackageDataHasTriggeredReingestion0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataHasTriggeredReingestion0 performs a merge with any union data inside the TrustyPackageData_HasTriggeredReingestion, using the provided TrustyPackageDataHasTriggeredReingestion0
func (t *TrustyPackageData_HasTriggeredReingestion) MergeTrustyPackageDataHasTriggeredReingestion0(v TrustyPackageDataHasTriggeredReingestion0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_HasTriggeredReingestion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_HasTriggeredReingestion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataHomePage0 returns the union data inside the TrustyPackageData_HomePage as a TrustyPackageDataHomePage0
func (t TrustyPackageData_HomePage) AsTrustyPackageDataHomePage0() (TrustyPackageDataHomePage0, error) {
	var body TrustyPackageDataHomePage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataHomePage0 overwrites any union data inside the TrustyPackageData_HomePage as the provided TrustyPackageDataHomePage0
func (t *TrustyPackageData_HomePage) FromTrustyPackageDataHomePage0(v TrustyPackageDataHomePage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataHomePage0 performs a merge with any union data inside the TrustyPackageData_HomePage, using the provided TrustyPackageDataHomePage0
func (t *TrustyPackageData_HomePage) MergeTrustyPackageDataHomePage0(v TrustyPackageDataHomePage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_HomePage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_HomePage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataIsDeprecated0 returns the union data inside the TrustyPackageData_IsDeprecated as a TrustyPackageDataIsDeprecated0
func (t TrustyPackageData_IsDeprecated) AsTrustyPackageDataIsDeprecated0() (TrustyPackageDataIsDeprecated0, error) {
	var body TrustyPackageDataIsDeprecated0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataIsDeprecated0 overwrites any union data inside the TrustyPackageData_IsDeprecated as the provided TrustyPackageDataIsDeprecated0
func (t *TrustyPackageData_IsDeprecated) FromTrustyPackageDataIsDeprecated0(v TrustyPackageDataIsDeprecated0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataIsDeprecated0 performs a merge with any union data inside the TrustyPackageData_IsDeprecated, using the provided TrustyPackageDataIsDeprecated0
func (t *TrustyPackageData_IsDeprecated) MergeTrustyPackageDataIsDeprecated0(v TrustyPackageDataIsDeprecated0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_IsDeprecated) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_IsDeprecated) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataLastUpdate0 returns the union data inside the TrustyPackageData_LastUpdate as a TrustyPackageDataLastUpdate0
func (t TrustyPackageData_LastUpdate) AsTrustyPackageDataLastUpdate0() (TrustyPackageDataLastUpdate0, error) {
	var body TrustyPackageDataLastUpdate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataLastUpdate0 overwrites any union data inside the TrustyPackageData_LastUpdate as the provided TrustyPackageDataLastUpdate0
func (t *TrustyPackageData_LastUpdate) FromTrustyPackageDataLastUpdate0(v TrustyPackageDataLastUpdate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataLastUpdate0 performs a merge with any union data inside the TrustyPackageData_LastUpdate, using the provided TrustyPackageDataLastUpdate0
func (t *TrustyPackageData_LastUpdate) MergeTrustyPackageDataLastUpdate0(v TrustyPackageDataLastUpdate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_LastUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_LastUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageMaliciousPayload returns the union data inside the TrustyPackageData_Malicious as a PackageMaliciousPayload
func (t TrustyPackageData_Malicious) AsPackageMaliciousPayload() (PackageMaliciousPayload, error) {
	var body PackageMaliciousPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageMaliciousPayload overwrites any union data inside the TrustyPackageData_Malicious as the provided PackageMaliciousPayload
func (t *TrustyPackageData_Malicious) FromPackageMaliciousPayload(v PackageMaliciousPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageMaliciousPayload performs a merge with any union data inside the TrustyPackageData_Malicious, using the provided PackageMaliciousPayload
func (t *TrustyPackageData_Malicious) MergePackageMaliciousPayload(v PackageMaliciousPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Malicious) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Malicious) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataOpenIssuesCount0 returns the union data inside the TrustyPackageData_OpenIssuesCount as a TrustyPackageDataOpenIssuesCount0
func (t TrustyPackageData_OpenIssuesCount) AsTrustyPackageDataOpenIssuesCount0() (TrustyPackageDataOpenIssuesCount0, error) {
	var body TrustyPackageDataOpenIssuesCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataOpenIssuesCount0 overwrites any union data inside the TrustyPackageData_OpenIssuesCount as the provided TrustyPackageDataOpenIssuesCount0
func (t *TrustyPackageData_OpenIssuesCount) FromTrustyPackageDataOpenIssuesCount0(v TrustyPackageDataOpenIssuesCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataOpenIssuesCount0 performs a merge with any union data inside the TrustyPackageData_OpenIssuesCount, using the provided TrustyPackageDataOpenIssuesCount0
func (t *TrustyPackageData_OpenIssuesCount) MergeTrustyPackageDataOpenIssuesCount0(v TrustyPackageDataOpenIssuesCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_OpenIssuesCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_OpenIssuesCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataOrigin0 returns the union data inside the TrustyPackageData_Origin as a TrustyPackageDataOrigin0
func (t TrustyPackageData_Origin) AsTrustyPackageDataOrigin0() (TrustyPackageDataOrigin0, error) {
	var body TrustyPackageDataOrigin0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataOrigin0 overwrites any union data inside the TrustyPackageData_Origin as the provided TrustyPackageDataOrigin0
func (t *TrustyPackageData_Origin) FromTrustyPackageDataOrigin0(v TrustyPackageDataOrigin0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataOrigin0 performs a merge with any union data inside the TrustyPackageData_Origin, using the provided TrustyPackageDataOrigin0
func (t *TrustyPackageData_Origin) MergeTrustyPackageDataOrigin0(v TrustyPackageDataOrigin0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Origin) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Origin) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageContributorData returns the union data inside the TrustyPackageData_Owner as a PackageContributorData
func (t TrustyPackageData_Owner) AsPackageContributorData() (PackageContributorData, error) {
	var body PackageContributorData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageContributorData overwrites any union data inside the TrustyPackageData_Owner as the provided PackageContributorData
func (t *TrustyPackageData_Owner) FromPackageContributorData(v PackageContributorData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageContributorData performs a merge with any union data inside the TrustyPackageData_Owner, using the provided PackageContributorData
func (t *TrustyPackageData_Owner) MergePackageContributorData(v PackageContributorData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Owner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Owner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataPackageDescription0 returns the union data inside the TrustyPackageData_PackageDescription as a TrustyPackageDataPackageDescription0
func (t TrustyPackageData_PackageDescription) AsTrustyPackageDataPackageDescription0() (TrustyPackageDataPackageDescription0, error) {
	var body TrustyPackageDataPackageDescription0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataPackageDescription0 overwrites any union data inside the TrustyPackageData_PackageDescription as the provided TrustyPackageDataPackageDescription0
func (t *TrustyPackageData_PackageDescription) FromTrustyPackageDataPackageDescription0(v TrustyPackageDataPackageDescription0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataPackageDescription0 performs a merge with any union data inside the TrustyPackageData_PackageDescription, using the provided TrustyPackageDataPackageDescription0
func (t *TrustyPackageData_PackageDescription) MergeTrustyPackageDataPackageDescription0(v TrustyPackageDataPackageDescription0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_PackageDescription) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_PackageDescription) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataPublicGists0 returns the union data inside the TrustyPackageData_PublicGists as a TrustyPackageDataPublicGists0
func (t TrustyPackageData_PublicGists) AsTrustyPackageDataPublicGists0() (TrustyPackageDataPublicGists0, error) {
	var body TrustyPackageDataPublicGists0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataPublicGists0 overwrites any union data inside the TrustyPackageData_PublicGists as the provided TrustyPackageDataPublicGists0
func (t *TrustyPackageData_PublicGists) FromTrustyPackageDataPublicGists0(v TrustyPackageDataPublicGists0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataPublicGists0 performs a merge with any union data inside the TrustyPackageData_PublicGists, using the provided TrustyPackageDataPublicGists0
func (t *TrustyPackageData_PublicGists) MergeTrustyPackageDataPublicGists0(v TrustyPackageDataPublicGists0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_PublicGists) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_PublicGists) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataPublicRepos0 returns the union data inside the TrustyPackageData_PublicRepos as a TrustyPackageDataPublicRepos0
func (t TrustyPackageData_PublicRepos) AsTrustyPackageDataPublicRepos0() (TrustyPackageDataPublicRepos0, error) {
	var body TrustyPackageDataPublicRepos0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataPublicRepos0 overwrites any union data inside the TrustyPackageData_PublicRepos as the provided TrustyPackageDataPublicRepos0
func (t *TrustyPackageData_PublicRepos) FromTrustyPackageDataPublicRepos0(v TrustyPackageDataPublicRepos0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataPublicRepos0 performs a merge with any union data inside the TrustyPackageData_PublicRepos, using the provided TrustyPackageDataPublicRepos0
func (t *TrustyPackageData_PublicRepos) MergeTrustyPackageDataPublicRepos0(v TrustyPackageDataPublicRepos0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_PublicRepos) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_PublicRepos) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataRepoDescription0 returns the union data inside the TrustyPackageData_RepoDescription as a TrustyPackageDataRepoDescription0
func (t TrustyPackageData_RepoDescription) AsTrustyPackageDataRepoDescription0() (TrustyPackageDataRepoDescription0, error) {
	var body TrustyPackageDataRepoDescription0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataRepoDescription0 overwrites any union data inside the TrustyPackageData_RepoDescription as the provided TrustyPackageDataRepoDescription0
func (t *TrustyPackageData_RepoDescription) FromTrustyPackageDataRepoDescription0(v TrustyPackageDataRepoDescription0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataRepoDescription0 performs a merge with any union data inside the TrustyPackageData_RepoDescription, using the provided TrustyPackageDataRepoDescription0
func (t *TrustyPackageData_RepoDescription) MergeTrustyPackageDataRepoDescription0(v TrustyPackageDataRepoDescription0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_RepoDescription) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_RepoDescription) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataRepositoryId0 returns the union data inside the TrustyPackageData_RepositoryId as a TrustyPackageDataRepositoryId0
func (t TrustyPackageData_RepositoryId) AsTrustyPackageDataRepositoryId0() (TrustyPackageDataRepositoryId0, error) {
	var body TrustyPackageDataRepositoryId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataRepositoryId0 overwrites any union data inside the TrustyPackageData_RepositoryId as the provided TrustyPackageDataRepositoryId0
func (t *TrustyPackageData_RepositoryId) FromTrustyPackageDataRepositoryId0(v TrustyPackageDataRepositoryId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataRepositoryId0 performs a merge with any union data inside the TrustyPackageData_RepositoryId, using the provided TrustyPackageDataRepositoryId0
func (t *TrustyPackageData_RepositoryId) MergeTrustyPackageDataRepositoryId0(v TrustyPackageDataRepositoryId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_RepositoryId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_RepositoryId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataRepositoryName0 returns the union data inside the TrustyPackageData_RepositoryName as a TrustyPackageDataRepositoryName0
func (t TrustyPackageData_RepositoryName) AsTrustyPackageDataRepositoryName0() (TrustyPackageDataRepositoryName0, error) {
	var body TrustyPackageDataRepositoryName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataRepositoryName0 overwrites any union data inside the TrustyPackageData_RepositoryName as the provided TrustyPackageDataRepositoryName0
func (t *TrustyPackageData_RepositoryName) FromTrustyPackageDataRepositoryName0(v TrustyPackageDataRepositoryName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataRepositoryName0 performs a merge with any union data inside the TrustyPackageData_RepositoryName, using the provided TrustyPackageDataRepositoryName0
func (t *TrustyPackageData_RepositoryName) MergeTrustyPackageDataRepositoryName0(v TrustyPackageDataRepositoryName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_RepositoryName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_RepositoryName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageAnnotation returns the union data inside the TrustyPackageData_Scores as a PackageAnnotation
func (t TrustyPackageData_Scores) AsPackageAnnotation() (PackageAnnotation, error) {
	var body PackageAnnotation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageAnnotation overwrites any union data inside the TrustyPackageData_Scores as the provided PackageAnnotation
func (t *TrustyPackageData_Scores) FromPackageAnnotation(v PackageAnnotation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageAnnotation performs a merge with any union data inside the TrustyPackageData_Scores, using the provided PackageAnnotation
func (t *TrustyPackageData_Scores) MergePackageAnnotation(v PackageAnnotation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrustyPackageDataScores1 returns the union data inside the TrustyPackageData_Scores as a TrustyPackageDataScores1
func (t TrustyPackageData_Scores) AsTrustyPackageDataScores1() (TrustyPackageDataScores1, error) {
	var body TrustyPackageDataScores1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataScores1 overwrites any union data inside the TrustyPackageData_Scores as the provided TrustyPackageDataScores1
func (t *TrustyPackageData_Scores) FromTrustyPackageDataScores1(v TrustyPackageDataScores1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataScores1 performs a merge with any union data inside the TrustyPackageData_Scores, using the provided TrustyPackageDataScores1
func (t *TrustyPackageData_Scores) MergeTrustyPackageDataScores1(v TrustyPackageDataScores1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Scores) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Scores) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataStargazersCount0 returns the union data inside the TrustyPackageData_StargazersCount as a TrustyPackageDataStargazersCount0
func (t TrustyPackageData_StargazersCount) AsTrustyPackageDataStargazersCount0() (TrustyPackageDataStargazersCount0, error) {
	var body TrustyPackageDataStargazersCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataStargazersCount0 overwrites any union data inside the TrustyPackageData_StargazersCount as the provided TrustyPackageDataStargazersCount0
func (t *TrustyPackageData_StargazersCount) FromTrustyPackageDataStargazersCount0(v TrustyPackageDataStargazersCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataStargazersCount0 performs a merge with any union data inside the TrustyPackageData_StargazersCount, using the provided TrustyPackageDataStargazersCount0
func (t *TrustyPackageData_StargazersCount) MergeTrustyPackageDataStargazersCount0(v TrustyPackageDataStargazersCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_StargazersCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_StargazersCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataStatusCode0 returns the union data inside the TrustyPackageData_StatusCode as a TrustyPackageDataStatusCode0
func (t TrustyPackageData_StatusCode) AsTrustyPackageDataStatusCode0() (TrustyPackageDataStatusCode0, error) {
	var body TrustyPackageDataStatusCode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataStatusCode0 overwrites any union data inside the TrustyPackageData_StatusCode as the provided TrustyPackageDataStatusCode0
func (t *TrustyPackageData_StatusCode) FromTrustyPackageDataStatusCode0(v TrustyPackageDataStatusCode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataStatusCode0 performs a merge with any union data inside the TrustyPackageData_StatusCode, using the provided TrustyPackageDataStatusCode0
func (t *TrustyPackageData_StatusCode) MergeTrustyPackageDataStatusCode0(v TrustyPackageDataStatusCode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_StatusCode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_StatusCode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataVersion0 returns the union data inside the TrustyPackageData_Version as a TrustyPackageDataVersion0
func (t TrustyPackageData_Version) AsTrustyPackageDataVersion0() (TrustyPackageDataVersion0, error) {
	var body TrustyPackageDataVersion0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataVersion0 overwrites any union data inside the TrustyPackageData_Version as the provided TrustyPackageDataVersion0
func (t *TrustyPackageData_Version) FromTrustyPackageDataVersion0(v TrustyPackageDataVersion0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataVersion0 performs a merge with any union data inside the TrustyPackageData_Version, using the provided TrustyPackageDataVersion0
func (t *TrustyPackageData_Version) MergeTrustyPackageDataVersion0(v TrustyPackageDataVersion0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Version) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Version) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataVersionDate0 returns the union data inside the TrustyPackageData_VersionDate as a TrustyPackageDataVersionDate0
func (t TrustyPackageData_VersionDate) AsTrustyPackageDataVersionDate0() (TrustyPackageDataVersionDate0, error) {
	var body TrustyPackageDataVersionDate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataVersionDate0 overwrites any union data inside the TrustyPackageData_VersionDate as the provided TrustyPackageDataVersionDate0
func (t *TrustyPackageData_VersionDate) FromTrustyPackageDataVersionDate0(v TrustyPackageDataVersionDate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataVersionDate0 performs a merge with any union data inside the TrustyPackageData_VersionDate, using the provided TrustyPackageDataVersionDate0
func (t *TrustyPackageData_VersionDate) MergeTrustyPackageDataVersionDate0(v TrustyPackageDataVersionDate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_VersionDate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_VersionDate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataVisibility0 returns the union data inside the TrustyPackageData_Visibility as a TrustyPackageDataVisibility0
func (t TrustyPackageData_Visibility) AsTrustyPackageDataVisibility0() (TrustyPackageDataVisibility0, error) {
	var body TrustyPackageDataVisibility0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataVisibility0 overwrites any union data inside the TrustyPackageData_Visibility as the provided TrustyPackageDataVisibility0
func (t *TrustyPackageData_Visibility) FromTrustyPackageDataVisibility0(v TrustyPackageDataVisibility0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataVisibility0 performs a merge with any union data inside the TrustyPackageData_Visibility, using the provided TrustyPackageDataVisibility0
func (t *TrustyPackageData_Visibility) MergeTrustyPackageDataVisibility0(v TrustyPackageDataVisibility0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_Visibility) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_Visibility) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageDataWatchersCount0 returns the union data inside the TrustyPackageData_WatchersCount as a TrustyPackageDataWatchersCount0
func (t TrustyPackageData_WatchersCount) AsTrustyPackageDataWatchersCount0() (TrustyPackageDataWatchersCount0, error) {
	var body TrustyPackageDataWatchersCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageDataWatchersCount0 overwrites any union data inside the TrustyPackageData_WatchersCount as the provided TrustyPackageDataWatchersCount0
func (t *TrustyPackageData_WatchersCount) FromTrustyPackageDataWatchersCount0(v TrustyPackageDataWatchersCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageDataWatchersCount0 performs a merge with any union data inside the TrustyPackageData_WatchersCount, using the provided TrustyPackageDataWatchersCount0
func (t *TrustyPackageData_WatchersCount) MergeTrustyPackageDataWatchersCount0(v TrustyPackageDataWatchersCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageData_WatchersCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageData_WatchersCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageResultHasTriggeredReingestion0 returns the union data inside the TrustyPackageResult_HasTriggeredReingestion as a TrustyPackageResultHasTriggeredReingestion0
func (t TrustyPackageResult_HasTriggeredReingestion) AsTrustyPackageResultHasTriggeredReingestion0() (TrustyPackageResultHasTriggeredReingestion0, error) {
	var body TrustyPackageResultHasTriggeredReingestion0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageResultHasTriggeredReingestion0 overwrites any union data inside the TrustyPackageResult_HasTriggeredReingestion as the provided TrustyPackageResultHasTriggeredReingestion0
func (t *TrustyPackageResult_HasTriggeredReingestion) FromTrustyPackageResultHasTriggeredReingestion0(v TrustyPackageResultHasTriggeredReingestion0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageResultHasTriggeredReingestion0 performs a merge with any union data inside the TrustyPackageResult_HasTriggeredReingestion, using the provided TrustyPackageResultHasTriggeredReingestion0
func (t *TrustyPackageResult_HasTriggeredReingestion) MergeTrustyPackageResultHasTriggeredReingestion0(v TrustyPackageResultHasTriggeredReingestion0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageResult_HasTriggeredReingestion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageResult_HasTriggeredReingestion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageResultPackageVersion0 returns the union data inside the TrustyPackageResult_PackageVersion as a TrustyPackageResultPackageVersion0
func (t TrustyPackageResult_PackageVersion) AsTrustyPackageResultPackageVersion0() (TrustyPackageResultPackageVersion0, error) {
	var body TrustyPackageResultPackageVersion0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageResultPackageVersion0 overwrites any union data inside the TrustyPackageResult_PackageVersion as the provided TrustyPackageResultPackageVersion0
func (t *TrustyPackageResult_PackageVersion) FromTrustyPackageResultPackageVersion0(v TrustyPackageResultPackageVersion0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageResultPackageVersion0 performs a merge with any union data inside the TrustyPackageResult_PackageVersion, using the provided TrustyPackageResultPackageVersion0
func (t *TrustyPackageResult_PackageVersion) MergeTrustyPackageResultPackageVersion0(v TrustyPackageResultPackageVersion0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageResult_PackageVersion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageResult_PackageVersion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageResultSameOriginPackagesCount0 returns the union data inside the TrustyPackageResult_SameOriginPackagesCount as a TrustyPackageResultSameOriginPackagesCount0
func (t TrustyPackageResult_SameOriginPackagesCount) AsTrustyPackageResultSameOriginPackagesCount0() (TrustyPackageResultSameOriginPackagesCount0, error) {
	var body TrustyPackageResultSameOriginPackagesCount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageResultSameOriginPackagesCount0 overwrites any union data inside the TrustyPackageResult_SameOriginPackagesCount as the provided TrustyPackageResultSameOriginPackagesCount0
func (t *TrustyPackageResult_SameOriginPackagesCount) FromTrustyPackageResultSameOriginPackagesCount0(v TrustyPackageResultSameOriginPackagesCount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageResultSameOriginPackagesCount0 performs a merge with any union data inside the TrustyPackageResult_SameOriginPackagesCount, using the provided TrustyPackageResultSameOriginPackagesCount0
func (t *TrustyPackageResult_SameOriginPackagesCount) MergeTrustyPackageResultSameOriginPackagesCount0(v TrustyPackageResultSameOriginPackagesCount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageResult_SameOriginPackagesCount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageResult_SameOriginPackagesCount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustyPackageResultSimilarPackageNames0 returns the union data inside the TrustyPackageResult_SimilarPackageNames as a TrustyPackageResultSimilarPackageNames0
func (t TrustyPackageResult_SimilarPackageNames) AsTrustyPackageResultSimilarPackageNames0() (TrustyPackageResultSimilarPackageNames0, error) {
	var body TrustyPackageResultSimilarPackageNames0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustyPackageResultSimilarPackageNames0 overwrites any union data inside the TrustyPackageResult_SimilarPackageNames as the provided TrustyPackageResultSimilarPackageNames0
func (t *TrustyPackageResult_SimilarPackageNames) FromTrustyPackageResultSimilarPackageNames0(v TrustyPackageResultSimilarPackageNames0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustyPackageResultSimilarPackageNames0 performs a merge with any union data inside the TrustyPackageResult_SimilarPackageNames, using the provided TrustyPackageResultSimilarPackageNames0
func (t *TrustyPackageResult_SimilarPackageNames) MergeTrustyPackageResultSimilarPackageNames0(v TrustyPackageResultSimilarPackageNames0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustyPackageResult_SimilarPackageNames) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustyPackageResult_SimilarPackageNames) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustySummarizedPackageVersionId0 returns the union data inside the TrustySummarizedPackageVersion_Id as a TrustySummarizedPackageVersionId0
func (t TrustySummarizedPackageVersion_Id) AsTrustySummarizedPackageVersionId0() (TrustySummarizedPackageVersionId0, error) {
	var body TrustySummarizedPackageVersionId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustySummarizedPackageVersionId0 overwrites any union data inside the TrustySummarizedPackageVersion_Id as the provided TrustySummarizedPackageVersionId0
func (t *TrustySummarizedPackageVersion_Id) FromTrustySummarizedPackageVersionId0(v TrustySummarizedPackageVersionId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustySummarizedPackageVersionId0 performs a merge with any union data inside the TrustySummarizedPackageVersion_Id, using the provided TrustySummarizedPackageVersionId0
func (t *TrustySummarizedPackageVersion_Id) MergeTrustySummarizedPackageVersionId0(v TrustySummarizedPackageVersionId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustySummarizedPackageVersion_Id) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustySummarizedPackageVersion_Id) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustySummarizedPackageVersionScore0 returns the union data inside the TrustySummarizedPackageVersion_Score as a TrustySummarizedPackageVersionScore0
func (t TrustySummarizedPackageVersion_Score) AsTrustySummarizedPackageVersionScore0() (TrustySummarizedPackageVersionScore0, error) {
	var body TrustySummarizedPackageVersionScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustySummarizedPackageVersionScore0 overwrites any union data inside the TrustySummarizedPackageVersion_Score as the provided TrustySummarizedPackageVersionScore0
func (t *TrustySummarizedPackageVersion_Score) FromTrustySummarizedPackageVersionScore0(v TrustySummarizedPackageVersionScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustySummarizedPackageVersionScore0 performs a merge with any union data inside the TrustySummarizedPackageVersion_Score, using the provided TrustySummarizedPackageVersionScore0
func (t *TrustySummarizedPackageVersion_Score) MergeTrustySummarizedPackageVersionScore0(v TrustySummarizedPackageVersionScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustySummarizedPackageVersion_Score) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustySummarizedPackageVersion_Score) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustySummarizedPackageVersionVersionDate0 returns the union data inside the TrustySummarizedPackageVersion_VersionDate as a TrustySummarizedPackageVersionVersionDate0
func (t TrustySummarizedPackageVersion_VersionDate) AsTrustySummarizedPackageVersionVersionDate0() (TrustySummarizedPackageVersionVersionDate0, error) {
	var body TrustySummarizedPackageVersionVersionDate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustySummarizedPackageVersionVersionDate0 overwrites any union data inside the TrustySummarizedPackageVersion_VersionDate as the provided TrustySummarizedPackageVersionVersionDate0
func (t *TrustySummarizedPackageVersion_VersionDate) FromTrustySummarizedPackageVersionVersionDate0(v TrustySummarizedPackageVersionVersionDate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustySummarizedPackageVersionVersionDate0 performs a merge with any union data inside the TrustySummarizedPackageVersion_VersionDate, using the provided TrustySummarizedPackageVersionVersionDate0
func (t *TrustySummarizedPackageVersion_VersionDate) MergeTrustySummarizedPackageVersionVersionDate0(v TrustySummarizedPackageVersionVersionDate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustySummarizedPackageVersion_VersionDate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustySummarizedPackageVersion_VersionDate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustySummarizedPackageVersion returns the union data inside the TrustySummarizedPackageVersionResults_Latest as a TrustySummarizedPackageVersion
func (t TrustySummarizedPackageVersionResults_Latest) AsTrustySummarizedPackageVersion() (TrustySummarizedPackageVersion, error) {
	var body TrustySummarizedPackageVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustySummarizedPackageVersion overwrites any union data inside the TrustySummarizedPackageVersionResults_Latest as the provided TrustySummarizedPackageVersion
func (t *TrustySummarizedPackageVersionResults_Latest) FromTrustySummarizedPackageVersion(v TrustySummarizedPackageVersion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustySummarizedPackageVersion performs a merge with any union data inside the TrustySummarizedPackageVersionResults_Latest, using the provided TrustySummarizedPackageVersion
func (t *TrustySummarizedPackageVersionResults_Latest) MergeTrustySummarizedPackageVersion(v TrustySummarizedPackageVersion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustySummarizedPackageVersionResults_Latest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustySummarizedPackageVersionResults_Latest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrustySummarizedPackageVersionResultsNextToken0 returns the union data inside the TrustySummarizedPackageVersionResults_NextToken as a TrustySummarizedPackageVersionResultsNextToken0
func (t TrustySummarizedPackageVersionResults_NextToken) AsTrustySummarizedPackageVersionResultsNextToken0() (TrustySummarizedPackageVersionResultsNextToken0, error) {
	var body TrustySummarizedPackageVersionResultsNextToken0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustySummarizedPackageVersionResultsNextToken0 overwrites any union data inside the TrustySummarizedPackageVersionResults_NextToken as the provided TrustySummarizedPackageVersionResultsNextToken0
func (t *TrustySummarizedPackageVersionResults_NextToken) FromTrustySummarizedPackageVersionResultsNextToken0(v TrustySummarizedPackageVersionResultsNextToken0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustySummarizedPackageVersionResultsNextToken0 performs a merge with any union data inside the TrustySummarizedPackageVersionResults_NextToken, using the provided TrustySummarizedPackageVersionResultsNextToken0
func (t *TrustySummarizedPackageVersionResults_NextToken) MergeTrustySummarizedPackageVersionResultsNextToken0(v TrustySummarizedPackageVersionResultsNextToken0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustySummarizedPackageVersionResults_NextToken) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustySummarizedPackageVersionResults_NextToken) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVulnerabilityListResponseNextToken0 returns the union data inside the VulnerabilityListResponse_NextToken as a VulnerabilityListResponseNextToken0
func (t VulnerabilityListResponse_NextToken) AsVulnerabilityListResponseNextToken0() (VulnerabilityListResponseNextToken0, error) {
	var body VulnerabilityListResponseNextToken0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVulnerabilityListResponseNextToken0 overwrites any union data inside the VulnerabilityListResponse_NextToken as the provided VulnerabilityListResponseNextToken0
func (t *VulnerabilityListResponse_NextToken) FromVulnerabilityListResponseNextToken0(v VulnerabilityListResponseNextToken0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVulnerabilityListResponseNextToken0 performs a merge with any union data inside the VulnerabilityListResponse_NextToken, using the provided VulnerabilityListResponseNextToken0
func (t *VulnerabilityListResponse_NextToken) MergeVulnerabilityListResponseNextToken0(v VulnerabilityListResponseNextToken0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VulnerabilityListResponse_NextToken) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VulnerabilityListResponse_NextToken) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// V2GetAlternatives request
	V2GetAlternatives(ctx context.Context, params *V2GetAlternativesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetContributorReport request
	V2GetContributorReport(ctx context.Context, params *V2GetContributorReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetDependencies request
	V2GetDependencies(ctx context.Context, params *V2GetDependenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetDependenciesId request
	V2GetDependenciesId(ctx context.Context, id openapi_types.UUID, params *V2GetDependenciesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetLicence request
	V2GetLicence(ctx context.Context, params *V2GetLicenceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetLicenceClaimId request
	V2GetLicenceClaimId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetLicenceOwner request
	V2GetLicenceOwner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetMalicious request
	V2GetMalicious(ctx context.Context, params *V2GetMaliciousParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2PostPackageWithBody request with any body
	V2PostPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V2PostPackage(ctx context.Context, body V2PostPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetPackage request
	V2GetPackage(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetPkg request
	V2GetPkg(ctx context.Context, params *V2GetPkgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetPackageProvenance request
	V2GetPackageProvenance(ctx context.Context, params *V2GetPackageProvenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetRepositoryReport request
	V2GetRepositoryReport(ctx context.Context, params *V2GetRepositoryReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetSameOrigin request
	V2GetSameOrigin(ctx context.Context, params *V2GetSameOriginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetSimilar request
	V2GetSimilar(ctx context.Context, params *V2GetSimilarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V2GetSummary request
	V2GetSummary(ctx context.Context, params *V2GetSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersionsV2VersionsGet request
	GetVersionsV2VersionsGet(ctx context.Context, params *GetVersionsV2VersionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVulnerabilitiesV2VulnerabilitiesGet request
	GetVulnerabilitiesV2VulnerabilitiesGet(ctx context.Context, params *GetVulnerabilitiesV2VulnerabilitiesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVulnerabilityV2VulnerabilityGet request
	GetVulnerabilityV2VulnerabilityGet(ctx context.Context, params *GetVulnerabilityV2VulnerabilityGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) V2GetAlternatives(ctx context.Context, params *V2GetAlternativesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetAlternativesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetContributorReport(ctx context.Context, params *V2GetContributorReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetContributorReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetDependencies(ctx context.Context, params *V2GetDependenciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetDependenciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetDependenciesId(ctx context.Context, id openapi_types.UUID, params *V2GetDependenciesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetDependenciesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetLicence(ctx context.Context, params *V2GetLicenceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetLicenceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetLicenceClaimId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetLicenceClaimIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetLicenceOwner(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetLicenceOwnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetMalicious(ctx context.Context, params *V2GetMaliciousParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetMaliciousRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2PostPackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2PostPackageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2PostPackage(ctx context.Context, body V2PostPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2PostPackageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetPackage(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetPackageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetPkg(ctx context.Context, params *V2GetPkgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetPkgRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetPackageProvenance(ctx context.Context, params *V2GetPackageProvenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetPackageProvenanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetRepositoryReport(ctx context.Context, params *V2GetRepositoryReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetRepositoryReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetSameOrigin(ctx context.Context, params *V2GetSameOriginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetSameOriginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetSimilar(ctx context.Context, params *V2GetSimilarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetSimilarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V2GetSummary(ctx context.Context, params *V2GetSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV2GetSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersionsV2VersionsGet(ctx context.Context, params *GetVersionsV2VersionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionsV2VersionsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVulnerabilitiesV2VulnerabilitiesGet(ctx context.Context, params *GetVulnerabilitiesV2VulnerabilitiesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVulnerabilitiesV2VulnerabilitiesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVulnerabilityV2VulnerabilityGet(ctx context.Context, params *GetVulnerabilityV2VulnerabilityGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVulnerabilityV2VulnerabilityGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewV2GetAlternativesRequest generates requests for V2GetAlternatives
func NewV2GetAlternativesRequest(server string, params *V2GetAlternativesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/alternatives")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetContributorReportRequest generates requests for V2GetContributorReport
func NewV2GetContributorReportRequest(server string, params *V2GetContributorReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/contributor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetDependenciesRequest generates requests for V2GetDependencies
func NewV2GetDependenciesRequest(server string, params *V2GetDependenciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dependencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecurseLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse_limit", runtime.ParamLocationQuery, *params.RecurseLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_from", runtime.ParamLocationQuery, *params.PageFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_to", runtime.ParamLocationQuery, *params.PageTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetDependenciesIdRequest generates requests for V2GetDependenciesId
func NewV2GetDependenciesIdRequest(server string, id openapi_types.UUID, params *V2GetDependenciesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/dependencies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecurseLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recurse_limit", runtime.ParamLocationQuery, *params.RecurseLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_from", runtime.ParamLocationQuery, *params.PageFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_to", runtime.ParamLocationQuery, *params.PageTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetLicenceRequest generates requests for V2GetLicence
func NewV2GetLicenceRequest(server string, params *V2GetLicenceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetLicenceClaimIdRequest generates requests for V2GetLicenceClaimId
func NewV2GetLicenceClaimIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/license/claim/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetLicenceOwnerRequest generates requests for V2GetLicenceOwner
func NewV2GetLicenceOwnerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/license/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetMaliciousRequest generates requests for V2GetMalicious
func NewV2GetMaliciousRequest(server string, params *V2GetMaliciousParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/malicious")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2PostPackageRequest calls the generic V2PostPackage builder with application/json body
func NewV2PostPackageRequest(server string, body V2PostPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV2PostPackageRequestWithBody(server, "application/json", bodyReader)
}

// NewV2PostPackageRequestWithBody generates requests for V2PostPackage with any type of body
func NewV2PostPackageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV2GetPackageRequest generates requests for V2GetPackage
func NewV2GetPackageRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/package/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetPkgRequest generates requests for V2GetPkg
func NewV2GetPkgRequest(server string, params *V2GetPkgParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/pkg")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetPackageProvenanceRequest generates requests for V2GetPackageProvenance
func NewV2GetPackageProvenanceRequest(server string, params *V2GetPackageProvenanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/provenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeriodType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period_type", runtime.ParamLocationQuery, *params.PeriodType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeriodCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period_count", runtime.ParamLocationQuery, *params.PeriodCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetRepositoryReportRequest generates requests for V2GetRepositoryReport
func NewV2GetRepositoryReportRequest(server string, params *V2GetRepositoryReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/repository")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetSameOriginRequest generates requests for V2GetSameOrigin
func NewV2GetSameOriginRequest(server string, params *V2GetSameOriginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/same-origin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetSimilarRequest generates requests for V2GetSimilar
func NewV2GetSimilarRequest(server string, params *V2GetSimilarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/similar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV2GetSummaryRequest generates requests for V2GetSummary
func NewV2GetSummaryRequest(server string, params *V2GetSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionsV2VersionsGetRequest generates requests for GetVersionsV2VersionsGet
func NewGetVersionsV2VersionsGetRequest(server string, params *GetVersionsV2VersionsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersionPrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_prefix", runtime.ParamLocationQuery, *params.VersionPrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersionFragment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_fragment", runtime.ParamLocationQuery, *params.VersionFragment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVulnerabilitiesV2VulnerabilitiesGetRequest generates requests for GetVulnerabilitiesV2VulnerabilitiesGet
func NewGetVulnerabilitiesV2VulnerabilitiesGetRequest(server string, params *GetVulnerabilitiesV2VulnerabilitiesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumVulnerabilities != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "num_vulnerabilities", runtime.ParamLocationQuery, *params.NumVulnerabilities); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVulnerabilityV2VulnerabilityGetRequest generates requests for GetVulnerabilityV2VulnerabilityGet
func NewGetVulnerabilityV2VulnerabilityGetRequest(server string, params *GetVulnerabilityV2VulnerabilityGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/vulnerability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "osv_id", runtime.ParamLocationQuery, params.OsvId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// V2GetAlternativesWithResponse request
	V2GetAlternativesWithResponse(ctx context.Context, params *V2GetAlternativesParams, reqEditors ...RequestEditorFn) (*V2GetAlternativesResponse, error)

	// V2GetContributorReportWithResponse request
	V2GetContributorReportWithResponse(ctx context.Context, params *V2GetContributorReportParams, reqEditors ...RequestEditorFn) (*V2GetContributorReportResponse, error)

	// V2GetDependenciesWithResponse request
	V2GetDependenciesWithResponse(ctx context.Context, params *V2GetDependenciesParams, reqEditors ...RequestEditorFn) (*V2GetDependenciesResponse, error)

	// V2GetDependenciesIdWithResponse request
	V2GetDependenciesIdWithResponse(ctx context.Context, id openapi_types.UUID, params *V2GetDependenciesIdParams, reqEditors ...RequestEditorFn) (*V2GetDependenciesIdResponse, error)

	// V2GetLicenceWithResponse request
	V2GetLicenceWithResponse(ctx context.Context, params *V2GetLicenceParams, reqEditors ...RequestEditorFn) (*V2GetLicenceResponse, error)

	// V2GetLicenceClaimIdWithResponse request
	V2GetLicenceClaimIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*V2GetLicenceClaimIdResponse, error)

	// V2GetLicenceOwnerWithResponse request
	V2GetLicenceOwnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*V2GetLicenceOwnerResponse, error)

	// V2GetMaliciousWithResponse request
	V2GetMaliciousWithResponse(ctx context.Context, params *V2GetMaliciousParams, reqEditors ...RequestEditorFn) (*V2GetMaliciousResponse, error)

	// V2PostPackageWithBodyWithResponse request with any body
	V2PostPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2PostPackageResponse, error)

	V2PostPackageWithResponse(ctx context.Context, body V2PostPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*V2PostPackageResponse, error)

	// V2GetPackageWithResponse request
	V2GetPackageWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*V2GetPackageResponse, error)

	// V2GetPkgWithResponse request
	V2GetPkgWithResponse(ctx context.Context, params *V2GetPkgParams, reqEditors ...RequestEditorFn) (*V2GetPkgResponse, error)

	// V2GetPackageProvenanceWithResponse request
	V2GetPackageProvenanceWithResponse(ctx context.Context, params *V2GetPackageProvenanceParams, reqEditors ...RequestEditorFn) (*V2GetPackageProvenanceResponse, error)

	// V2GetRepositoryReportWithResponse request
	V2GetRepositoryReportWithResponse(ctx context.Context, params *V2GetRepositoryReportParams, reqEditors ...RequestEditorFn) (*V2GetRepositoryReportResponse, error)

	// V2GetSameOriginWithResponse request
	V2GetSameOriginWithResponse(ctx context.Context, params *V2GetSameOriginParams, reqEditors ...RequestEditorFn) (*V2GetSameOriginResponse, error)

	// V2GetSimilarWithResponse request
	V2GetSimilarWithResponse(ctx context.Context, params *V2GetSimilarParams, reqEditors ...RequestEditorFn) (*V2GetSimilarResponse, error)

	// V2GetSummaryWithResponse request
	V2GetSummaryWithResponse(ctx context.Context, params *V2GetSummaryParams, reqEditors ...RequestEditorFn) (*V2GetSummaryResponse, error)

	// GetVersionsV2VersionsGetWithResponse request
	GetVersionsV2VersionsGetWithResponse(ctx context.Context, params *GetVersionsV2VersionsGetParams, reqEditors ...RequestEditorFn) (*GetVersionsV2VersionsGetResponse, error)

	// GetVulnerabilitiesV2VulnerabilitiesGetWithResponse request
	GetVulnerabilitiesV2VulnerabilitiesGetWithResponse(ctx context.Context, params *GetVulnerabilitiesV2VulnerabilitiesGetParams, reqEditors ...RequestEditorFn) (*GetVulnerabilitiesV2VulnerabilitiesGetResponse, error)

	// GetVulnerabilityV2VulnerabilityGetWithResponse request
	GetVulnerabilityV2VulnerabilityGetWithResponse(ctx context.Context, params *GetVulnerabilityV2VulnerabilityGetParams, reqEditors ...RequestEditorFn) (*GetVulnerabilityV2VulnerabilityGetResponse, error)
}

type V2GetAlternativesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PackageAlternatives
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetAlternativesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetAlternativesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetContributorReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContributorResult
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetContributorReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetContributorReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetDependenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DependencyResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetDependenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetDependenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetDependenciesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DependencyResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetDependenciesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetDependenciesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetLicenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *License
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetLicenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetLicenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetLicenceClaimIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LicenseClaim
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetLicenceClaimIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetLicenceClaimIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetLicenceOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *License
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetLicenceOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetLicenceOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetMaliciousResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetMaliciousResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetMaliciousResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2PostPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TrustyPackageResult
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2PostPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2PostPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustyPackageResult
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetPkgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustyPackageData
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetPkgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetPkgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetPackageProvenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProvenanceResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetPackageProvenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetPackageProvenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetRepositoryReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryResult
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetRepositoryReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetRepositoryReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetSameOriginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SameOriginPackagesResult
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetSameOriginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetSameOriginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetSimilarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PackageSimilarResult
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetSimilarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetSimilarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V2GetSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PackageSummaryAnnotation
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r V2GetSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V2GetSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionsV2VersionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustySummarizedPackageVersionResults
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetVersionsV2VersionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionsV2VersionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVulnerabilitiesV2VulnerabilitiesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VulnerabilityListResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetVulnerabilitiesV2VulnerabilitiesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVulnerabilitiesV2VulnerabilitiesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVulnerabilityV2VulnerabilityGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VulnerabilityResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetVulnerabilityV2VulnerabilityGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVulnerabilityV2VulnerabilityGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// V2GetAlternativesWithResponse request returning *V2GetAlternativesResponse
func (c *ClientWithResponses) V2GetAlternativesWithResponse(ctx context.Context, params *V2GetAlternativesParams, reqEditors ...RequestEditorFn) (*V2GetAlternativesResponse, error) {
	rsp, err := c.V2GetAlternatives(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetAlternativesResponse(rsp)
}

// V2GetContributorReportWithResponse request returning *V2GetContributorReportResponse
func (c *ClientWithResponses) V2GetContributorReportWithResponse(ctx context.Context, params *V2GetContributorReportParams, reqEditors ...RequestEditorFn) (*V2GetContributorReportResponse, error) {
	rsp, err := c.V2GetContributorReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetContributorReportResponse(rsp)
}

// V2GetDependenciesWithResponse request returning *V2GetDependenciesResponse
func (c *ClientWithResponses) V2GetDependenciesWithResponse(ctx context.Context, params *V2GetDependenciesParams, reqEditors ...RequestEditorFn) (*V2GetDependenciesResponse, error) {
	rsp, err := c.V2GetDependencies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetDependenciesResponse(rsp)
}

// V2GetDependenciesIdWithResponse request returning *V2GetDependenciesIdResponse
func (c *ClientWithResponses) V2GetDependenciesIdWithResponse(ctx context.Context, id openapi_types.UUID, params *V2GetDependenciesIdParams, reqEditors ...RequestEditorFn) (*V2GetDependenciesIdResponse, error) {
	rsp, err := c.V2GetDependenciesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetDependenciesIdResponse(rsp)
}

// V2GetLicenceWithResponse request returning *V2GetLicenceResponse
func (c *ClientWithResponses) V2GetLicenceWithResponse(ctx context.Context, params *V2GetLicenceParams, reqEditors ...RequestEditorFn) (*V2GetLicenceResponse, error) {
	rsp, err := c.V2GetLicence(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetLicenceResponse(rsp)
}

// V2GetLicenceClaimIdWithResponse request returning *V2GetLicenceClaimIdResponse
func (c *ClientWithResponses) V2GetLicenceClaimIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*V2GetLicenceClaimIdResponse, error) {
	rsp, err := c.V2GetLicenceClaimId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetLicenceClaimIdResponse(rsp)
}

// V2GetLicenceOwnerWithResponse request returning *V2GetLicenceOwnerResponse
func (c *ClientWithResponses) V2GetLicenceOwnerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*V2GetLicenceOwnerResponse, error) {
	rsp, err := c.V2GetLicenceOwner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetLicenceOwnerResponse(rsp)
}

// V2GetMaliciousWithResponse request returning *V2GetMaliciousResponse
func (c *ClientWithResponses) V2GetMaliciousWithResponse(ctx context.Context, params *V2GetMaliciousParams, reqEditors ...RequestEditorFn) (*V2GetMaliciousResponse, error) {
	rsp, err := c.V2GetMalicious(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetMaliciousResponse(rsp)
}

// V2PostPackageWithBodyWithResponse request with arbitrary body returning *V2PostPackageResponse
func (c *ClientWithResponses) V2PostPackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V2PostPackageResponse, error) {
	rsp, err := c.V2PostPackageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2PostPackageResponse(rsp)
}

func (c *ClientWithResponses) V2PostPackageWithResponse(ctx context.Context, body V2PostPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*V2PostPackageResponse, error) {
	rsp, err := c.V2PostPackage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2PostPackageResponse(rsp)
}

// V2GetPackageWithResponse request returning *V2GetPackageResponse
func (c *ClientWithResponses) V2GetPackageWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*V2GetPackageResponse, error) {
	rsp, err := c.V2GetPackage(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetPackageResponse(rsp)
}

// V2GetPkgWithResponse request returning *V2GetPkgResponse
func (c *ClientWithResponses) V2GetPkgWithResponse(ctx context.Context, params *V2GetPkgParams, reqEditors ...RequestEditorFn) (*V2GetPkgResponse, error) {
	rsp, err := c.V2GetPkg(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetPkgResponse(rsp)
}

// V2GetPackageProvenanceWithResponse request returning *V2GetPackageProvenanceResponse
func (c *ClientWithResponses) V2GetPackageProvenanceWithResponse(ctx context.Context, params *V2GetPackageProvenanceParams, reqEditors ...RequestEditorFn) (*V2GetPackageProvenanceResponse, error) {
	rsp, err := c.V2GetPackageProvenance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetPackageProvenanceResponse(rsp)
}

// V2GetRepositoryReportWithResponse request returning *V2GetRepositoryReportResponse
func (c *ClientWithResponses) V2GetRepositoryReportWithResponse(ctx context.Context, params *V2GetRepositoryReportParams, reqEditors ...RequestEditorFn) (*V2GetRepositoryReportResponse, error) {
	rsp, err := c.V2GetRepositoryReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetRepositoryReportResponse(rsp)
}

// V2GetSameOriginWithResponse request returning *V2GetSameOriginResponse
func (c *ClientWithResponses) V2GetSameOriginWithResponse(ctx context.Context, params *V2GetSameOriginParams, reqEditors ...RequestEditorFn) (*V2GetSameOriginResponse, error) {
	rsp, err := c.V2GetSameOrigin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetSameOriginResponse(rsp)
}

// V2GetSimilarWithResponse request returning *V2GetSimilarResponse
func (c *ClientWithResponses) V2GetSimilarWithResponse(ctx context.Context, params *V2GetSimilarParams, reqEditors ...RequestEditorFn) (*V2GetSimilarResponse, error) {
	rsp, err := c.V2GetSimilar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetSimilarResponse(rsp)
}

// V2GetSummaryWithResponse request returning *V2GetSummaryResponse
func (c *ClientWithResponses) V2GetSummaryWithResponse(ctx context.Context, params *V2GetSummaryParams, reqEditors ...RequestEditorFn) (*V2GetSummaryResponse, error) {
	rsp, err := c.V2GetSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV2GetSummaryResponse(rsp)
}

// GetVersionsV2VersionsGetWithResponse request returning *GetVersionsV2VersionsGetResponse
func (c *ClientWithResponses) GetVersionsV2VersionsGetWithResponse(ctx context.Context, params *GetVersionsV2VersionsGetParams, reqEditors ...RequestEditorFn) (*GetVersionsV2VersionsGetResponse, error) {
	rsp, err := c.GetVersionsV2VersionsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionsV2VersionsGetResponse(rsp)
}

// GetVulnerabilitiesV2VulnerabilitiesGetWithResponse request returning *GetVulnerabilitiesV2VulnerabilitiesGetResponse
func (c *ClientWithResponses) GetVulnerabilitiesV2VulnerabilitiesGetWithResponse(ctx context.Context, params *GetVulnerabilitiesV2VulnerabilitiesGetParams, reqEditors ...RequestEditorFn) (*GetVulnerabilitiesV2VulnerabilitiesGetResponse, error) {
	rsp, err := c.GetVulnerabilitiesV2VulnerabilitiesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVulnerabilitiesV2VulnerabilitiesGetResponse(rsp)
}

// GetVulnerabilityV2VulnerabilityGetWithResponse request returning *GetVulnerabilityV2VulnerabilityGetResponse
func (c *ClientWithResponses) GetVulnerabilityV2VulnerabilityGetWithResponse(ctx context.Context, params *GetVulnerabilityV2VulnerabilityGetParams, reqEditors ...RequestEditorFn) (*GetVulnerabilityV2VulnerabilityGetResponse, error) {
	rsp, err := c.GetVulnerabilityV2VulnerabilityGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVulnerabilityV2VulnerabilityGetResponse(rsp)
}

// ParseV2GetAlternativesResponse parses an HTTP response from a V2GetAlternativesWithResponse call
func ParseV2GetAlternativesResponse(rsp *http.Response) (*V2GetAlternativesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetAlternativesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackageAlternatives
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetContributorReportResponse parses an HTTP response from a V2GetContributorReportWithResponse call
func ParseV2GetContributorReportResponse(rsp *http.Response) (*V2GetContributorReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetContributorReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContributorResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetDependenciesResponse parses an HTTP response from a V2GetDependenciesWithResponse call
func ParseV2GetDependenciesResponse(rsp *http.Response) (*V2GetDependenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetDependenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DependencyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetDependenciesIdResponse parses an HTTP response from a V2GetDependenciesIdWithResponse call
func ParseV2GetDependenciesIdResponse(rsp *http.Response) (*V2GetDependenciesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetDependenciesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DependencyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetLicenceResponse parses an HTTP response from a V2GetLicenceWithResponse call
func ParseV2GetLicenceResponse(rsp *http.Response) (*V2GetLicenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetLicenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest License
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetLicenceClaimIdResponse parses an HTTP response from a V2GetLicenceClaimIdWithResponse call
func ParseV2GetLicenceClaimIdResponse(rsp *http.Response) (*V2GetLicenceClaimIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetLicenceClaimIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LicenseClaim
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetLicenceOwnerResponse parses an HTTP response from a V2GetLicenceOwnerWithResponse call
func ParseV2GetLicenceOwnerResponse(rsp *http.Response) (*V2GetLicenceOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetLicenceOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest License
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetMaliciousResponse parses an HTTP response from a V2GetMaliciousWithResponse call
func ParseV2GetMaliciousResponse(rsp *http.Response) (*V2GetMaliciousResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetMaliciousResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2PostPackageResponse parses an HTTP response from a V2PostPackageWithResponse call
func ParseV2PostPackageResponse(rsp *http.Response) (*V2PostPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2PostPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrustyPackageResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetPackageResponse parses an HTTP response from a V2GetPackageWithResponse call
func ParseV2GetPackageResponse(rsp *http.Response) (*V2GetPackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustyPackageResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetPkgResponse parses an HTTP response from a V2GetPkgWithResponse call
func ParseV2GetPkgResponse(rsp *http.Response) (*V2GetPkgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetPkgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustyPackageData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetPackageProvenanceResponse parses an HTTP response from a V2GetPackageProvenanceWithResponse call
func ParseV2GetPackageProvenanceResponse(rsp *http.Response) (*V2GetPackageProvenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetPackageProvenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetRepositoryReportResponse parses an HTTP response from a V2GetRepositoryReportWithResponse call
func ParseV2GetRepositoryReportResponse(rsp *http.Response) (*V2GetRepositoryReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetRepositoryReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetSameOriginResponse parses an HTTP response from a V2GetSameOriginWithResponse call
func ParseV2GetSameOriginResponse(rsp *http.Response) (*V2GetSameOriginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetSameOriginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SameOriginPackagesResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetSimilarResponse parses an HTTP response from a V2GetSimilarWithResponse call
func ParseV2GetSimilarResponse(rsp *http.Response) (*V2GetSimilarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetSimilarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackageSimilarResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV2GetSummaryResponse parses an HTTP response from a V2GetSummaryWithResponse call
func ParseV2GetSummaryResponse(rsp *http.Response) (*V2GetSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V2GetSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackageSummaryAnnotation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVersionsV2VersionsGetResponse parses an HTTP response from a GetVersionsV2VersionsGetWithResponse call
func ParseGetVersionsV2VersionsGetResponse(rsp *http.Response) (*GetVersionsV2VersionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionsV2VersionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustySummarizedPackageVersionResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVulnerabilitiesV2VulnerabilitiesGetResponse parses an HTTP response from a GetVulnerabilitiesV2VulnerabilitiesGetWithResponse call
func ParseGetVulnerabilitiesV2VulnerabilitiesGetResponse(rsp *http.Response) (*GetVulnerabilitiesV2VulnerabilitiesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVulnerabilitiesV2VulnerabilitiesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VulnerabilityListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetVulnerabilityV2VulnerabilityGetResponse parses an HTTP response from a GetVulnerabilityV2VulnerabilityGetWithResponse call
func ParseGetVulnerabilityV2VulnerabilityGetResponse(rsp *http.Response) (*GetVulnerabilityV2VulnerabilityGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVulnerabilityV2VulnerabilityGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VulnerabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Alternatives
	// (GET /v2/alternatives)
	V2GetAlternatives(ctx echo.Context, params V2GetAlternativesParams) error
	// Get Contributor Report
	// (GET /v2/contributor)
	V2GetContributorReport(ctx echo.Context, params V2GetContributorReportParams) error
	// Get Dependencies
	// (GET /v2/dependencies)
	V2GetDependencies(ctx echo.Context, params V2GetDependenciesParams) error
	// Get Dependencies Id
	// (GET /v2/dependencies/{id})
	V2GetDependenciesId(ctx echo.Context, id openapi_types.UUID, params V2GetDependenciesIdParams) error
	// Get Licence
	// (GET /v2/license)
	V2GetLicence(ctx echo.Context, params V2GetLicenceParams) error
	// Get Licence Claim Id
	// (GET /v2/license/claim/{id})
	V2GetLicenceClaimId(ctx echo.Context, id openapi_types.UUID) error
	// Get Licence Owner
	// (GET /v2/license/{id})
	V2GetLicenceOwner(ctx echo.Context, id openapi_types.UUID) error
	// Get Malicious
	// (GET /v2/malicious)
	V2GetMalicious(ctx echo.Context, params V2GetMaliciousParams) error
	// Post Package
	// (POST /v2/package)
	V2PostPackage(ctx echo.Context) error
	// Get Package
	// (GET /v2/package/{id})
	V2GetPackage(ctx echo.Context, id openapi_types.UUID) error
	// Get Pkg
	// (GET /v2/pkg)
	V2GetPkg(ctx echo.Context, params V2GetPkgParams) error
	// Get Package Provenance
	// (GET /v2/provenance)
	V2GetPackageProvenance(ctx echo.Context, params V2GetPackageProvenanceParams) error
	// Get Repository Report
	// (GET /v2/repository)
	V2GetRepositoryReport(ctx echo.Context, params V2GetRepositoryReportParams) error
	// Get Same Origin
	// (GET /v2/same-origin)
	V2GetSameOrigin(ctx echo.Context, params V2GetSameOriginParams) error
	// Get Similar
	// (GET /v2/similar)
	V2GetSimilar(ctx echo.Context, params V2GetSimilarParams) error
	// Get Summary
	// (GET /v2/summary)
	V2GetSummary(ctx echo.Context, params V2GetSummaryParams) error
	// Get Versions
	// (GET /v2/versions)
	GetVersionsV2VersionsGet(ctx echo.Context, params GetVersionsV2VersionsGetParams) error
	// Get Vulnerabilities
	// (GET /v2/vulnerabilities)
	GetVulnerabilitiesV2VulnerabilitiesGet(ctx echo.Context, params GetVulnerabilitiesV2VulnerabilitiesGetParams) error
	// Get Vulnerability
	// (GET /v2/vulnerability)
	GetVulnerabilityV2VulnerabilityGet(ctx echo.Context, params GetVulnerabilityV2VulnerabilityGetParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// V2GetAlternatives converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetAlternatives(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetAlternativesParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetAlternatives(ctx, params)
	return err
}

// V2GetContributorReport converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetContributorReport(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetContributorReportParams
	// ------------- Required query parameter "login" -------------

	err = runtime.BindQueryParameter("form", true, true, "login", ctx.QueryParams(), &params.Login)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetContributorReport(ctx, params)
	return err
}

// V2GetDependencies converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetDependencies(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetDependenciesParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "recurse_limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "recurse_limit", ctx.QueryParams(), &params.RecurseLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recurse_limit: %s", err))
	}

	// ------------- Optional query parameter "page_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_from", ctx.QueryParams(), &params.PageFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_from: %s", err))
	}

	// ------------- Optional query parameter "page_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_to", ctx.QueryParams(), &params.PageTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetDependencies(ctx, params)
	return err
}

// V2GetDependenciesId converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetDependenciesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetDependenciesIdParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_by: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "recurse_limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "recurse_limit", ctx.QueryParams(), &params.RecurseLimit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recurse_limit: %s", err))
	}

	// ------------- Optional query parameter "page_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_from", ctx.QueryParams(), &params.PageFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_from: %s", err))
	}

	// ------------- Optional query parameter "page_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_to", ctx.QueryParams(), &params.PageTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetDependenciesId(ctx, id, params)
	return err
}

// V2GetLicence converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetLicence(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetLicenceParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetLicence(ctx, params)
	return err
}

// V2GetLicenceClaimId converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetLicenceClaimId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(HTTPBearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetLicenceClaimId(ctx, id)
	return err
}

// V2GetLicenceOwner converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetLicenceOwner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(HTTPBearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetLicenceOwner(ctx, id)
	return err
}

// V2GetMalicious converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetMalicious(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetMaliciousParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetMalicious(ctx, params)
	return err
}

// V2PostPackage converts echo context to params.
func (w *ServerInterfaceWrapper) V2PostPackage(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2PostPackage(ctx)
	return err
}

// V2GetPackage converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetPackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(HTTPBearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetPackage(ctx, id)
	return err
}

// V2GetPkg converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetPkg(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetPkgParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetPkg(ctx, params)
	return err
}

// V2GetPackageProvenance converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetPackageProvenance(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetPackageProvenanceParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// ------------- Optional query parameter "period_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "period_type", ctx.QueryParams(), &params.PeriodType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period_type: %s", err))
	}

	// ------------- Optional query parameter "period_count" -------------

	err = runtime.BindQueryParameter("form", true, false, "period_count", ctx.QueryParams(), &params.PeriodCount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period_count: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetPackageProvenance(ctx, params)
	return err
}

// V2GetRepositoryReport converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetRepositoryReport(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetRepositoryReportParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetRepositoryReport(ctx, params)
	return err
}

// V2GetSameOrigin converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetSameOrigin(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetSameOriginParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetSameOrigin(ctx, params)
	return err
}

// V2GetSimilar converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetSimilar(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetSimilarParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetSimilar(ctx, params)
	return err
}

// V2GetSummary converts echo context to params.
func (w *ServerInterfaceWrapper) V2GetSummary(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V2GetSummaryParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V2GetSummary(ctx, params)
	return err
}

// GetVersionsV2VersionsGet converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersionsV2VersionsGet(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVersionsV2VersionsGetParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "version_prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "version_prefix", ctx.QueryParams(), &params.VersionPrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version_prefix: %s", err))
	}

	// ------------- Optional query parameter "version_fragment" -------------

	err = runtime.BindQueryParameter("form", true, false, "version_fragment", ctx.QueryParams(), &params.VersionFragment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version_fragment: %s", err))
	}

	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersionsV2VersionsGet(ctx, params)
	return err
}

// GetVulnerabilitiesV2VulnerabilitiesGet converts echo context to params.
func (w *ServerInterfaceWrapper) GetVulnerabilitiesV2VulnerabilitiesGet(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVulnerabilitiesV2VulnerabilitiesGetParams
	// ------------- Required query parameter "package_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_name", ctx.QueryParams(), &params.PackageName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_name: %s", err))
	}

	// ------------- Optional query parameter "package_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_type", ctx.QueryParams(), &params.PackageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_type: %s", err))
	}

	// ------------- Optional query parameter "package_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "package_version", ctx.QueryParams(), &params.PackageVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_version: %s", err))
	}

	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// ------------- Optional query parameter "num_vulnerabilities" -------------

	err = runtime.BindQueryParameter("form", true, false, "num_vulnerabilities", ctx.QueryParams(), &params.NumVulnerabilities)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter num_vulnerabilities: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVulnerabilitiesV2VulnerabilitiesGet(ctx, params)
	return err
}

// GetVulnerabilityV2VulnerabilityGet converts echo context to params.
func (w *ServerInterfaceWrapper) GetVulnerabilityV2VulnerabilityGet(ctx echo.Context) error {
	var err error

	ctx.Set(HTTPBearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVulnerabilityV2VulnerabilityGetParams
	// ------------- Required query parameter "osv_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "osv_id", ctx.QueryParams(), &params.OsvId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter osv_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVulnerabilityV2VulnerabilityGet(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/alternatives", wrapper.V2GetAlternatives)
	router.GET(baseURL+"/v2/contributor", wrapper.V2GetContributorReport)
	router.GET(baseURL+"/v2/dependencies", wrapper.V2GetDependencies)
	router.GET(baseURL+"/v2/dependencies/:id", wrapper.V2GetDependenciesId)
	router.GET(baseURL+"/v2/license", wrapper.V2GetLicence)
	router.GET(baseURL+"/v2/license/claim/:id", wrapper.V2GetLicenceClaimId)
	router.GET(baseURL+"/v2/license/:id", wrapper.V2GetLicenceOwner)
	router.GET(baseURL+"/v2/malicious", wrapper.V2GetMalicious)
	router.POST(baseURL+"/v2/package", wrapper.V2PostPackage)
	router.GET(baseURL+"/v2/package/:id", wrapper.V2GetPackage)
	router.GET(baseURL+"/v2/pkg", wrapper.V2GetPkg)
	router.GET(baseURL+"/v2/provenance", wrapper.V2GetPackageProvenance)
	router.GET(baseURL+"/v2/repository", wrapper.V2GetRepositoryReport)
	router.GET(baseURL+"/v2/same-origin", wrapper.V2GetSameOrigin)
	router.GET(baseURL+"/v2/similar", wrapper.V2GetSimilar)
	router.GET(baseURL+"/v2/summary", wrapper.V2GetSummary)
	router.GET(baseURL+"/v2/versions", wrapper.GetVersionsV2VersionsGet)
	router.GET(baseURL+"/v2/vulnerabilities", wrapper.GetVulnerabilitiesV2VulnerabilitiesGet)
	router.GET(baseURL+"/v2/vulnerability", wrapper.GetVulnerabilityV2VulnerabilityGet)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9f2/bOJZfhdAecB3ATbKZvQMmwOK2TadtgHQSTDLZP5rApSXa5kQiNSTl1Fv4ux/4",
	"U5RE2pKStDNp+kcRW3yP5OP7zafnL0lKi5ISRARPjr4kPF2iAqo/X+UCMQIFXiF+IaCo1LeIVEVy9DHB",
	"ZFoyumCI82SikORIoORmkggscpQcheAniViX8hkXDJNFspkkx5QIhmeVoOxXxKtcyElKRkvEBEZqyrQe",
	"Ms2ggPK7/2Jonhwlf9uvl79v1r5/DtNbuEAe5jcSajNpYGKopAo9JOuzeXL08UuCBSr4Luy/SjgsKFtb",
	"rGZPkDG4TjY3kyRDc6h28tEjh7ccoHAkm03wqSGDw0tnv6NUyIneoBKRDJEUI35RFQVk6y61MpTmkKFs",
	"muMUEa6/hFmGBaYE5ueNwWYKTARaICbncGv/4q3ujcEJTi3OwOoyVIrlw8ymEAWmKODnKU8pQ3qjBvag",
	"Bv0AP4MLNcBBk6qY6ckKBMkOcATJFni8CxxvgRZUwDwGeakeTgIUWlU5mXK0QgyL9QMQ96rKCbiw+Do0",
	"bh5Dh9u2MWWAF2Eq8AqLdU22WthaBPIVh4EytFQ7afJ0RGw7yqUjmTGGbvJvG6FH0xiPmikki+ZTyldT",
	"nN17kR9gDs74CpxkchiBhdq3ffqL/BxQqKXWfmYBc8oKKJKjpKpwltS4jY6UuIM4mDUIbt0dTJ19ONQa",
	"uEubEhoCNxSkm2HAVC3E9dThQ9Gfa9pdys8BvCvEOKZkB+2u9KgI7SyO9nlZqNi5dQV9MO9MOiNuYoIv",
	"BZ2hPyrMUCbNOfFW1dpDg6UaNKoZxUnPTUB/7FAbvyJeUiPUTfXxL2mv0WfRpMYOBdghjp3zJqIR/3Vs",
	"ZtE6wOm8Bktu8wi8jUbUZ4AleW2/e+H2lHD77LhTzo3lB4/CETtwJO8vL8+vYI4zKMn7M2OUhdwLAXHe",
	"mzZtfA0CKUxt0ngjQgsKrRtzQRlOFUOsEIEkNSaapwyXEjY5Sj7Ww0Dpxt28qP/eK7K/Ld2gl/WDl8vy",
	"h2tyucQcSI6EmHAglgho2wXoHHwScME/AUzU99K1nLRHGLnhn64JnauHRqwmAIKUVkQA8/2nlBYFJZ+A",
	"RAogyTRSSQQ1RH4rKNCjrgnk4BNdIZbD8tOelMmW8yxHxfyOY/004K5IjFOBi5at3XbWoXM4u/TV0i5R",
	"PFshBi7lpGYFOSxjSz8zj0OuFlzwqKclnwVg7PHE4K7s8w6sz7AhTuzJsWeXXWFbltPmOURU39ZoCDFM",
	"s+DKYj7i+xLUJxFYfqlQThXTNuj190PPFqtB4FgNCnm2Bou1zQ5JUlAilkkHU9ho76D+2WVoA6e1G9lU",
	"Eq/yXAmb8jNTBDDRToA03HBGKwGgFduAqOUQF1v8m22nZFZ0LFH4SvJY4+zaj6An3LX+NVU9gjqnd9P9",
	"Lk4tvbYuyYDatyOPWViEPKPW66ii/AEixiExsIrpvQ2MQPXGg99Mku3eYthL9IPzMLdE/etuDO6Ygt4R",
	"xHZ4r2dyTMR35bRi6TieutCgm0lSsXwUht9YHuJIffgBtjQhjJ9m6mpQI6xjEj0G/2vIcXpC5rR/qufc",
	"TipJ6jJn2+YK5Mo2mw7Cxla3UIQQKqDl7qa0KieGoZIhLhdQqzMAHVRXdFsCE8naNIRiUMTvAv2qzKBA",
	"2RSKBgvLL18KY40su+ih4JUIGgXfQfawdk/Jo1acpDUT7KSoNB8zOXyY8RijRDCfFjDHKaZVU5HMYc6R",
	"B83BBzfO4ZlRmiNI/JxBO2a1WYJduQZrw3uIk7LiHqjxu3ZpjPaKjDumMDWc/n6uavfsB3ipTQ9KOvvT",
	"+1qUX1FJwQNIUIvxTYzuHW7rzLrn0KV1zftx+Wjn2ruZwEosdTg5mDavNOhmYpBMUWEi0JGowM8KgUS4",
	"ggKy6ViL9UqBA2W4Jsksp4tRaF5LwI2+RIFkPdK70bCbSTKePI4uc5rn9A4xHkTjfHiPV946CAcupxoG",
	"brTKgplzaedQe27jnYE3idMlZgjO8rAoOSV448cRBkACiyIfzR/vRZFb7hjlJNIUjlYppxZYIVrgsVgk",
	"pNSy1SzH6XSBuejPFecKCLxTQDWSwNXbbiTmzszoRT5A1yPGKRmn6i/0XPKbOywEYtOKSxesGOckX2ok",
	"4DeL5AHc5Za+7+rvtm6Oa3HnJJzDdU5h1s/ZKfVgoDODHMwpAxA4xyTu8hiAkSGYht1MkoJmeI5RS1eE",
	"fceoX/HBIrFcypf3xHjusDxUYOWljN3D9r1cxAO2oF3u6Jx5nD0ucIFzGL2m5/rx1Pc3Hi3ucgTQkwLf",
	"U+Xd7QeX1iVGc4dbKNEphygRySThJwkmWGB1mUsQXixntGKNColJMoc4R5LQUpNpIElJuIDqcYbkuJAk",
	"x6so7AB9zH/hALBfuNzZp42Zv0kE2aV6nHMuTaTk+GZdYskqZSF5hEGhIvsCrpDEsqCB6WKXl1sSvR1Z",
	"LaBIl4jHyyj041Datn9y3a9iML5kLLMeANq0E8B9k+sde/+cBNnCwm1ihQjqyB2O7TDnFWLNHL7v2+rH",
	"0XSjcgej0Nr8Ke8vWAlAbxGZ7ljBpRwE4usQDBKurrJ1EUsYiT8ogOSOstt5Tu+iCP5tB2y7w2jReutp",
	"xC/Ol+UuDRq7D9pa3xStbeJ4IdENScA09znEJbdzNayFd3uEOddG1UFEzGaQ7NsuyOvSv2ft0ku7BAm2",
	"lbBhDePXbbpbx17Bo191qa8iVX6C3fKBiN5KmBrFqHAecjHVhLpXZHEKuQD6bPzCsMGRxS8mAqWlVaFD",
	"iXJWWr3qkWZofB5kklExOheQLeB/EBu6jwsHWG/jXnH5JLlTLtTglfzbgNl1bA3wW2KzVbB6FFffI1gL",
	"1FpHQ7Zjf8b6JmDM7Jes4mJt1jCsHNu/o2OOSkOLvzehw4iHjxewQGcMLzCx08eOhaDPYqqcm0bNJ/os",
	"gPJmgu4ULNCUKvTTb3LvKbcH9P5ATd92pWG9sxZokDIhKkaiv0FvJ8SQBOja5bLu9QZLl3iFst455lcW",
	"wF1r/NnuRh7Y5n57PWN2PZ0xSNLlyKyj+hK81igkUszhLB9w8G8swDe/ZnkAL2gJ+TSjdySnMOP971cg",
	"B28clEGj/Y9BOLTjYRGUjEoFMQzFuQUySATDiwViKJsyhMkC8ej1i48xdu8uZ7i0GMGvHkY5HS3QtISL",
	"cb7be1ogcC6hRzqjmE8zGaOk0m3vTbMTDt7UUI/n0zbKGgZd6Xfy2ZubAS9PPLArrI3xqAPWxtAVdQ2m",
	"Q0dT3nhFF/ctV7DZ9lZA+ue5I3y0oozaVezcTu94ayXot5srag/r6GjOQ2oDu8E3pfepinmkMKzfhUDz",
	"gsSBTVOajbx1U/DgWMJ7LxANKHDqWdgUnN2rbrKv29xbw9r3j94YFbvCHM9w3nnZqO8Sa/DHjHYdA0wa",
	"ryjd+HnZtnceCBkag+qYK5i4kw8BQ6VN35mScLn+PMcLVRfeLue7JtfkRABM0rzKEAeOPYCWwQkQ65Ly",
	"PyooBCaLCbBvRk7U+x11Cds1kZ9hzimAwNzaKuwXCIGP5sLw5sVSiJIf7e8vsFhWs72UFvtcwPQ2p7f7",
	"Qu11f5bT2X4BMdnPaCq5VIHuFdkP6oa+oKxR3t7NSNol9uT7htZIYKsqtw8CH+Tr+2PONvZ4wzyYd/jz",
	"F1FuteXRisrBZx/KQ/RUDMFbh0BWwbMPX7PqIJz1CJcgjDdd/d4MDJK+oWVGYGgp4H6lo0piYho5nsbR",
	"w3QeBv8HZQbgqublUIX0EH+r5vcD8+9l4D/7rxkyhUKkLfXVXlQUKrAed1XjiXXbM9jy4vEDewotlli5",
	"BTTms1vssEH0fAdzhOakwDseORSIi/5u7o6F6YCxkX8dTUovYavo6HYwIL0dX6jv/GvMgZdp/cOzC+h9",
	"Sh289WHtfFM4p2ljp1HLNAmYgk2gkDXQbIEvfOH4gDiHCxTvGFAPVWuOv1LoE03uQ0/VdT57vJ18VeUE",
	"Mah95VPMRfzaPsZ0fflr5U015AX2xhK9klevc4CPdgeTtVdxE8bUpMUuwsWJljLU9z77WA8N3mdPEuv4",
	"uUxtJJYYk22rO4K4/I5u7BEY+zgX9GqRmd6SWc3Ep90kcoUfPoVdx3XhMg/Nw9IzIyLwHOukVpMe7kno",
	"esvrjTGCrV3nC8/QdtrghNozDK21be1x4vVncFuIEdjQbSd5PVK0inCto7G7ZsfgmOZohfJRtDxVkD6u",
	"PjFMEJWOaNpluw20nSUHfI4wlfqS89RSwl4j/kKJnPdUFW19QBmuimSSvMeLZTJJjhkWOIX5zvlPzWo7",
	"HB2nhLeG46uLi+nVoZxQ/fWj++sfO2eO2jeO0oopflsiEy+9v7w8f40g02KpDks5sforh2QpRJlsJA4c",
	"fh1S+RPg1flJ0nYyzJfOq01WhzbnDkucHCU/7h3s/Zh4fYL2V4f77UzCAsVSN3c4zwFDomJEvYfOVUcN",
	"D96ma1T7DLFEgBIEJMMhLlDmkjgczCBHGaAEvDpR+RmFWbC1hJPBMc4Q4LRAYonJAtxhsQQmDgXziqS6",
	"RQMWXubG38XNC//T1oyMFG314SSTZ3z4DonWS8AlZLBAQl0iylhXUuOPCil1ozMR7SiuljDBKjQxLf/6",
	"Zyykv7ZtGiusDm3vhMYuzHXsUSO/f75DjmTGsCkOOzw4sJUxttlAWeZYe6H7v3MdkQ3aXzO3tWn3IEgu",
	"qjRFnM+rHDgbu5kk/zg8fLCVhJrpBFZSDwF2TK0uFJ19RfHxRlLPGcvkHRKg/Za6qhd3uYTkRiKUgu1V",
	"BETl+i0S6dL11GHCvFzkgUakpNFPUUL2ExX9olwfGTk1I9vC8ZjM1G0S+cRZqd0zUx2jZSiffxxTtRt4",
	"7eAqf7jhLVusu8ArRAAWHEjeAEb36HZM6xLtmYZQLuXvdXT6bw0zsUAT4M2vM/5ULBEDBRJQ+uTmPsGv",
	"kVGmo+7bdaZg+dE1mWMpX+CF/gbmH7lgNz8cgeOfT4F5ltIMSVMlT1jaIE6ZmM7WHoyMvRSghDw1lnKO",
	"UZ4p2ygBwMyBUpY1ZmxAH1OmGT6TttBaXYVBwcmdMHnoHE1zXGABXmAifjgCH+BnXFQFUJ3jJIweJS0f",
	"+K0sEQN6+EvAl7TKMwArQaVpTGGerwEXtARQgBzBOSA0Q3KiUpqJOaOFneQcLjDRPMgFZMKOETQwAhHt",
	"BLylzL3NSAlY0jtJlIojdciGyDmlt3J++dVHSfyMpry+mUlRvpeh1T5dIbbC6E5+8dJ++OGaXNACAfQZ",
	"FmWO5LG+VHvYUx4t+Oc/wcHeQevL6+rg4EckH6g/D/9X/98ZkoL/kZDXyasSpkv08nDv4DoBmOiBukmR",
	"9krU0o1vltG0KhDRieB6G3JTe/ZqSd0zmeulQT5Lqxfes89yb58lMqvmzd6TubIuDRZFaxRIBO+A1qbh",
	"CxSpK16vd0yvlMljruBMTRBdREOHNdZRtz87OPBTsmo8ODXju++3xRjHqLDwHAc+VywQeKtHDsIuaI/1",
	"K+yXNIT7MX2cQKvKJ+7ktBuFxvxl31fZ/4KzzUP5Nzh7dmaenZm/sjPzDd2Zkyzi0JRQNbE0elel2+Ne",
	"zJDbhGfb/2z7n23/07P95jowZv69hq87jL4ZafqyaqvPS5SqBjfO/lMG6rJj5QA4kz/VBt8PjpSddzkQ",
	"hjyEkINa/0U05qnup/sc+/3Z89V1a+AnLXc1P1p5s+LVlrd9JUV9/e2m6M3W0rcGUrJ+++3kje3vrh9i",
	"7skQJcblFsvtEqS64X4Dn+Mr8Jzp8vxdMB5Qm21q/CgHjuK9IWrfZ047TrJnJenZ5E4ZO8zVlDJyhJzT",
	"FKsSlMbsO8yAakH9FFn4e+Fee4BR1m28v9f3xn6ew4W551PX6kuk8gotrrwl9I7U7QVd6oKDtGIMEZGv",
	"QQFJpeLqtGKSOyPs6DdFfvZLvrlf4hWzKiTg6hBIrtvWu/ppy1tj57HAwH5x9CUpKd9qIjCZ02+bBvx6",
	"eZpzyoXhUSOsiIvXNFsPYoPhP392kgUqZDdtdbG5p6wMb49iKwYmQTmT1AI1ubrLf5pC1t72Dhnr64p9",
	"azkLm7t6n0/H8Qqy+NM2Cn3Y9XbRg0sdBzU4VV0aPP5t0FdN2J/fLp5dvD976inwUu0TF2TFlXEhbryF",
	"2y+IUpLq4NoxvSpUlueHUmFLoOu8AF5gImXzGEo7BWYI5JjcokyDQRWZ/Z8U3e/jlxSvyauc06YSrPfU",
	"+HEfqYkkLqcV9VymybJ+vLQugP7ZO+CS6mrBk2syWwMjhDqbA7kAfz8E6sfwOFDXwCp5qINckEGB6vLy",
	"6DEMU5OajI32ys9K87FqtfzfPwxeyQ39IcSt06TmdxhDV3/9f7XxcWvlu014vw9XDjQbmscMQrNN5ZB6",
	"eS/jG5Z8v3ll/2r53gIfEfTHZKZOO84nzkpe+6dOpbzHOI6ZOCzQy7o/2dC3qtybVHwJ5WkqnpM4Fa8B",
	"yIPvV2nDD4l0LkrE5igV+RoQaZbyCSggWWtWlW5FVqUIFFUucJkjAJnAc5gKPrkmlEn/xKCBgOMFUVVa",
	"ArKXv8P0VjXY0ZVvcmV0h1vEvf46S8hQZnyhmxf6o2llMtSY1h1NvxMrKkxf2pAlazfj/8rKINpd9okr",
	"Ba91zjbDYt5djOoB2+HGCT1kMninqoYQCrCEK+RegFQNeKRXrfIAvE4nFHANpPhAKfGiKbut7ljjhLe1",
	"ypsXrd5Ag1+1NPt+9oL/Im9ZNn++6anLtmPOuFzXTQxGpQJNfFqUldDJOpj9XklTbjvT6e52MelxbQ+e",
	"pecvIT2dn7F66hJUN/SISZDN5+wQodovdgmgZk69IyHvkDCHy68O7V/vkPhOpMX2DisZmuPP9xMW267s",
	"XOPaOeecwUWBWsmQ0bO+tdgG+MWj24mZTk9fIQ2/qyHYE1cNViI93eBUQa0cuu22+umIJpxWFXle6w46",
	"b1zHnciPtvYac9uBJJsASvK1MswhlMo1NwWAaaN2W0fzobIoqZaaqK4OW198P0rq26SFt6mLvj8zbNRE",
	"ZAZSFdNVp6fblvmCHVp/+uknrw9dVYB2m7jHVVPxVnJPXTV1u/FZDdVuvBdSVH2iAS8SaIDu1BfrprZY",
	"99YVriPdbi0Ra5z39bjte+S09XY+22z+PwAA//9WrrogSZoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
